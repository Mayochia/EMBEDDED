

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Sat Apr 26 21:46:28 2025

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2
    23                           	psect	text13,local,class=CODE,merge=1,delta=2
    24                           	psect	text14,local,class=CODE,merge=1,delta=2
    25                           	psect	text15,local,class=CODE,merge=1,delta=2
    26                           	psect	text16,local,class=CODE,merge=1,delta=2
    27                           	psect	text17,local,class=CODE,merge=1,delta=2
    28                           	psect	text18,local,class=CODE,merge=1,delta=2
    29                           	psect	text19,local,class=CODE,merge=1,delta=2
    30                           	psect	text20,local,class=CODE,merge=1,delta=2
    31                           	psect	text21,local,class=CODE,merge=1,delta=2
    32                           	psect	text22,local,class=CODE,merge=1,delta=2
    33                           	psect	text23,local,class=CODE,merge=1,delta=2
    34                           	psect	text24,local,class=CODE,merge=1,delta=2
    35                           	psect	text25,local,class=CODE,merge=1,delta=2
    36                           	psect	text26,local,class=CODE,merge=1,delta=2
    37                           	psect	text27,local,class=CODE,merge=1,delta=2
    38                           	psect	text28,local,class=CODE,merge=1,delta=2
    39                           	psect	text29,local,class=CODE,merge=1,delta=2
    40                           	psect	text30,local,class=CODE,merge=1,delta=2
    41                           	psect	text31,local,class=CODE,merge=1,delta=2
    42                           	psect	text32,local,class=CODE,merge=1,delta=2
    43                           	psect	text33,local,class=CODE,merge=1,delta=2
    44                           	psect	text34,local,class=CODE,merge=1,delta=2
    45                           	psect	text35,local,class=CODE,merge=1,delta=2
    46                           	psect	text36,local,class=CODE,merge=1,delta=2
    47                           	psect	text37,local,class=CODE,merge=1,delta=2
    48                           	psect	text38,local,class=CODE,merge=1,delta=2
    49                           	psect	text39,local,class=CODE,merge=1,delta=2
    50                           	psect	text40,local,class=CODE,merge=1,delta=2
    51                           	psect	text41,local,class=CODE,merge=1,delta=2
    52                           	psect	text42,local,class=CODE,merge=1,delta=2
    53                           	psect	text43,local,class=CODE,merge=1,delta=2
    54                           	psect	text44,local,class=CODE,merge=1,delta=2
    55                           	dabs	1,0x7E,2
    56  0000                     	;# 
    57  0001                     	;# 
    58  0002                     	;# 
    59  0003                     	;# 
    60  0004                     	;# 
    61  0005                     	;# 
    62  0006                     	;# 
    63  0007                     	;# 
    64  0008                     	;# 
    65  0009                     	;# 
    66  000A                     	;# 
    67  000B                     	;# 
    68  000C                     	;# 
    69  000D                     	;# 
    70  000E                     	;# 
    71  000E                     	;# 
    72  000F                     	;# 
    73  0010                     	;# 
    74  0011                     	;# 
    75  0012                     	;# 
    76  0013                     	;# 
    77  0014                     	;# 
    78  0015                     	;# 
    79  0015                     	;# 
    80  0016                     	;# 
    81  0017                     	;# 
    82  0018                     	;# 
    83  0019                     	;# 
    84  001A                     	;# 
    85  001B                     	;# 
    86  001B                     	;# 
    87  001C                     	;# 
    88  001D                     	;# 
    89  001E                     	;# 
    90  001F                     	;# 
    91  0081                     	;# 
    92  0085                     	;# 
    93  0086                     	;# 
    94  0087                     	;# 
    95  0088                     	;# 
    96  0089                     	;# 
    97  008C                     	;# 
    98  008D                     	;# 
    99  008E                     	;# 
   100  0091                     	;# 
   101  0092                     	;# 
   102  0093                     	;# 
   103  0094                     	;# 
   104  0098                     	;# 
   105  0099                     	;# 
   106  009C                     	;# 
   107  009D                     	;# 
   108  009E                     	;# 
   109  009F                     	;# 
   110  010C                     	;# 
   111  010D                     	;# 
   112  010E                     	;# 
   113  010F                     	;# 
   114  018C                     	;# 
   115  018D                     	;# 
   116                           
   117                           	psect	strings
   118  1000                     __pstrings:	
   119  1000                     stringtab:	
   120  1000                     __stringtab:	
   121  1000                     stringcode:	
   122                           ;	String table - string pointers are 1 byte each
   123                           
   124  1000                     stringdir:	
   125  1000  3010               	movlw	high stringdir
   126  1001  008A               	movwf	10
   127  1002  0804               	movf	4,w
   128  1003  0A84               	incf	4,f
   129  1004  0782               	addwf	2,f
   130  1005                     __stringbase:	
   131  1005  3400               	retlw	0
   132  1006                     __end_of__stringtab:	
   133  1006                     _dpowers:	
   134  1006  3401               	retlw	1
   135  1007  3400               	retlw	0
   136  1008  3400               	retlw	0
   137  1009  3400               	retlw	0
   138  100A  340A               	retlw	10
   139  100B  3400               	retlw	0
   140  100C  3400               	retlw	0
   141  100D  3400               	retlw	0
   142  100E  3464               	retlw	100
   143  100F  3400               	retlw	0
   144  1010  3400               	retlw	0
   145  1011  3400               	retlw	0
   146  1012  34E8               	retlw	232
   147  1013  3403               	retlw	3
   148  1014  3400               	retlw	0
   149  1015  3400               	retlw	0
   150  1016  3410               	retlw	16
   151  1017  3427               	retlw	39
   152  1018  3400               	retlw	0
   153  1019  3400               	retlw	0
   154  101A  34A0               	retlw	160
   155  101B  3486               	retlw	134
   156  101C  3401               	retlw	1
   157  101D  3400               	retlw	0
   158  101E  3440               	retlw	64
   159  101F  3442               	retlw	66
   160  1020  340F               	retlw	15
   161  1021  3400               	retlw	0
   162  1022  3480               	retlw	128
   163  1023  3496               	retlw	150
   164  1024  3498               	retlw	152
   165  1025  3400               	retlw	0
   166  1026  3400               	retlw	0
   167  1027  34E1               	retlw	225
   168  1028  34F5               	retlw	245
   169  1029  3405               	retlw	5
   170  102A  3400               	retlw	0
   171  102B  34CA               	retlw	202
   172  102C  349A               	retlw	154
   173  102D  343B               	retlw	59
   174  102E                     __end_of_dpowers:	
   175  102E                     __npowers_:	
   176  102E  3400               	retlw	0
   177  102F  3480               	retlw	128
   178  1030  343F               	retlw	63
   179  1031  34CD               	retlw	205
   180  1032  34CC               	retlw	204
   181  1033  343D               	retlw	61
   182  1034  34D7               	retlw	215
   183  1035  3423               	retlw	35
   184  1036  343C               	retlw	60
   185  1037  3412               	retlw	18
   186  1038  3483               	retlw	131
   187  1039  343A               	retlw	58
   188  103A  34B7               	retlw	183
   189  103B  34D1               	retlw	209
   190  103C  3438               	retlw	56
   191  103D  34C6               	retlw	198
   192  103E  3427               	retlw	39
   193  103F  3437               	retlw	55
   194  1040  3438               	retlw	56
   195  1041  3486               	retlw	134
   196  1042  3435               	retlw	53
   197  1043  34C0               	retlw	192
   198  1044  34D6               	retlw	214
   199  1045  3433               	retlw	51
   200  1046  34CC               	retlw	204
   201  1047  342B               	retlw	43
   202  1048  3432               	retlw	50
   203  1049  3470               	retlw	112
   204  104A  3489               	retlw	137
   205  104B  3430               	retlw	48
   206  104C  34E7               	retlw	231
   207  104D  34DB               	retlw	219
   208  104E  342E               	retlw	46
   209  104F  34E5               	retlw	229
   210  1050  343C               	retlw	60
   211  1051  341E               	retlw	30
   212  1052  3442               	retlw	66
   213  1053  34A2               	retlw	162
   214  1054  340D               	retlw	13
   215  1055                     __end_of__npowers_:	
   216  1055                     __powers_:	
   217  1055  3400               	retlw	0
   218  1056  3480               	retlw	128
   219  1057  343F               	retlw	63
   220  1058  3400               	retlw	0
   221  1059  3420               	retlw	32
   222  105A  3441               	retlw	65
   223  105B  3400               	retlw	0
   224  105C  34C8               	retlw	200
   225  105D  3442               	retlw	66
   226  105E  3400               	retlw	0
   227  105F  347A               	retlw	122
   228  1060  3444               	retlw	68
   229  1061  3440               	retlw	64
   230  1062  341C               	retlw	28
   231  1063  3446               	retlw	70
   232  1064  3450               	retlw	80
   233  1065  34C3               	retlw	195
   234  1066  3447               	retlw	71
   235  1067  3424               	retlw	36
   236  1068  3474               	retlw	116
   237  1069  3449               	retlw	73
   238  106A  3497               	retlw	151
   239  106B  3418               	retlw	24
   240  106C  344B               	retlw	75
   241  106D  34BC               	retlw	188
   242  106E  34BE               	retlw	190
   243  106F  344C               	retlw	76
   244  1070  346B               	retlw	107
   245  1071  346E               	retlw	110
   246  1072  344E               	retlw	78
   247  1073  3403               	retlw	3
   248  1074  3415               	retlw	21
   249  1075  3450               	retlw	80
   250  1076  3479               	retlw	121
   251  1077  34AD               	retlw	173
   252  1078  3460               	retlw	96
   253  1079  34F3               	retlw	243
   254  107A  3449               	retlw	73
   255  107B  3471               	retlw	113
   256  107C                     __end_of__powers_:	
   257  107C                     exp@coeff:	
   258  107C  3400               	retlw	0
   259  107D  3480               	retlw	128
   260  107E  343F               	retlw	63
   261  107F  3472               	retlw	114
   262  1080  3431               	retlw	49
   263  1081  343F               	retlw	63
   264  1082  34FE               	retlw	254
   265  1083  3475               	retlw	117
   266  1084  343E               	retlw	62
   267  1085  3458               	retlw	88
   268  1086  3463               	retlw	99
   269  1087  343D               	retlw	61
   270  1088  3495               	retlw	149
   271  1089  341D               	retlw	29
   272  108A  343C               	retlw	60
   273  108B  34C5               	retlw	197
   274  108C  34AE               	retlw	174
   275  108D  343A               	retlw	58
   276  108E  3479               	retlw	121
   277  108F  3421               	retlw	33
   278  1090  3439               	retlw	57
   279  1091  3494               	retlw	148
   280  1092  3480               	retlw	128
   281  1093  3437               	retlw	55
   282  1094  3493               	retlw	147
   283  1095  34A7               	retlw	167
   284  1096  3435               	retlw	53
   285  1097  3456               	retlw	86
   286  1098  3415               	retlw	21
   287  1099  3434               	retlw	52
   288  109A                     __end_ofexp@coeff:	
   289  109A                     log@coeff:	
   290  109A  3400               	retlw	0
   291  109B  3400               	retlw	0
   292  109C  3400               	retlw	0
   293  109D  3400               	retlw	0
   294  109E  3480               	retlw	128
   295  109F  343F               	retlw	63
   296  10A0  34F0               	retlw	240
   297  10A1  34FF               	retlw	255
   298  10A2  34BE               	retlw	190
   299  10A3  34E2               	retlw	226
   300  10A4  34A9               	retlw	169
   301  10A5  343E               	retlw	62
   302  10A6  3483               	retlw	131
   303  10A7  3476               	retlw	118
   304  10A8  34BE               	retlw	190
   305  10A9  34AE               	retlw	174
   306  10AA  342B               	retlw	43
   307  10AB  343E               	retlw	62
   308  10AC  343C               	retlw	60
   309  10AD  34C3               	retlw	195
   310  10AE  34BD               	retlw	189
   311  10AF  34D2               	retlw	210
   312  10B0  3413               	retlw	19
   313  10B1  343D               	retlw	61
   314  10B2  3478               	retlw	120
   315  10B3  34D3               	retlw	211
   316  10B4  34BB               	retlw	187
   317  10B5                     __end_oflog@coeff:	
   318  0006                     _PORTB	set	6
   319  0008                     _PORTD	set	8
   320  0013                     _SSPBUF	set	19
   321  0014                     _SSPCON	set	20
   322  0040                     _RD0	set	64
   323  0041                     _RD1	set	65
   324  0093                     _SSPADD	set	147
   325  0091                     _SSPCON2	set	145
   326  0094                     _SSPSTAT	set	148
   327  0086                     _TRISB	set	134
   328  0088                     _TRISD	set	136
   329  048D                     _ACKDT	set	1165
   330  048C                     _ACKEN	set	1164
   331  048A                     _PEN	set	1162
   332  048B                     _RCEN	set	1163
   333  0489                     _RSEN	set	1161
   334  0488                     _SEN	set	1160
   335  043B                     _TRISC3	set	1083
   336  043C                     _TRISC4	set	1084
   337  10B5                     __stringdata:	
   338  10B5                     STR_2:	
   339  10B5  3425               	retlw	37	;'%'
   340  10B6  342E               	retlw	46	;'.'
   341  10B7  3431               	retlw	49	;'1'
   342  10B8  3466               	retlw	102	;'f'
   343  10B9  3400               	retlw	0
   344  10BA                     STR_1:	
   345  10BA  3425               	retlw	37	;'%'
   346  10BB  3464               	retlw	100	;'d'
   347  10BC  3400               	retlw	0
   348  10BD                     __end_of__stringdata:	
   349                           
   350                           ; #config settings
   351  0000                     
   352                           	psect	cinit
   353  07F3                     start_initialization:	
   354  07F3                     __initialization:	
   355                           
   356                           ; Clear objects allocated to BANK1
   357  07F3  1683               	bsf	3,5	;RP0=1, select bank1
   358  07F4  1303               	bcf	3,6	;RP1=0, select bank1
   359  07F5  01DE               	clrf	__pbssBANK1& (0+127)
   360  07F6  01DF               	clrf	(__pbssBANK1+1)& (0+127)
   361  07F7  01E0               	clrf	(__pbssBANK1+2)& (0+127)
   362  07F8  01E1               	clrf	(__pbssBANK1+3)& (0+127)
   363  07F9  01E2               	clrf	(__pbssBANK1+4)& (0+127)
   364  07FA  01E3               	clrf	(__pbssBANK1+5)& (0+127)
   365  07FB  01E4               	clrf	(__pbssBANK1+6)& (0+127)
   366  07FC                     end_of_initialization:	
   367                           ;End of C runtime variable initialization code
   368                           
   369  07FC                     __end_of__initialization:	
   370  07FC  0183               	clrf	3
   371  07FD  120A  158A  2AFD   	ljmp	_main	;jump to C main() function
   372                           
   373                           	psect	bssBANK1
   374  00DE                     __pbssBANK1:	
   375  00DE                     _T:	
   376  00DE                     	ds	3
   377  00E1                     _RH:	
   378  00E1                     	ds	2
   379  00E3                     _errno:	
   380  00E3                     	ds	2
   381                           
   382                           	psect	cstackBANK1
   383  00A0                     __pcstackBANK1:	
   384  00A0                     _ldexp$521:	
   385  00A0                     _sprintf$700:	
   386                           ; 3 bytes @ 0x0
   387                           
   388                           
   389                           ; 3 bytes @ 0x0
   390  00A0                     	ds	3
   391  00A3                     ?_exp:	
   392  00A3                     exp@x:	
   393                           ; 3 bytes @ 0x3
   394                           
   395  00A3                     _sprintf$190:	
   396                           ; 3 bytes @ 0x3
   397                           
   398                           
   399                           ; 4 bytes @ 0x3
   400  00A3                     	ds	3
   401  00A6                     _exp$703:	
   402                           
   403                           ; 3 bytes @ 0x6
   404  00A6                     	ds	1
   405  00A7                     sprintf@vd:	
   406                           
   407                           ; 4 bytes @ 0x7
   408  00A7                     	ds	2
   409  00A9                     _exp$484:	
   410                           
   411                           ; 3 bytes @ 0x9
   412  00A9                     	ds	2
   413  00AB                     sprintf@vd_192:	
   414                           
   415                           ; 4 bytes @ 0xB
   416  00AB                     	ds	1
   417  00AC                     exp@exponent:	
   418                           
   419                           ; 2 bytes @ 0xC
   420  00AC                     	ds	2
   421  00AE                     exp@sign:	
   422                           
   423                           ; 1 bytes @ 0xE
   424  00AE                     	ds	1
   425  00AF                     ?_pow:	
   426  00AF                     sprintf@ap:	
   427                           ; 3 bytes @ 0xF
   428                           
   429  00AF                     pow@x:	
   430                           ; 1 bytes @ 0xF
   431                           
   432                           
   433                           ; 3 bytes @ 0xF
   434  00AF                     	ds	1
   435  00B0                     sprintf@flag:	
   436                           
   437                           ; 2 bytes @ 0x10
   438  00B0                     	ds	2
   439  00B2                     sprintf@integ:	
   440  00B2                     pow@y:	
   441                           ; 3 bytes @ 0x12
   442                           
   443                           
   444                           ; 3 bytes @ 0x12
   445  00B2                     	ds	3
   446  00B5                     sprintf@exp:	
   447  00B5                     _pow$701:	
   448                           ; 2 bytes @ 0x15
   449                           
   450                           
   451                           ; 3 bytes @ 0x15
   452  00B5                     	ds	2
   453  00B7                     sprintf@_val:	
   454                           
   455                           ; 4 bytes @ 0x17
   456  00B7                     	ds	1
   457  00B8                     _pow$702:	
   458                           
   459                           ; 3 bytes @ 0x18
   460  00B8                     	ds	3
   461  00BB                     sprintf@sp:	
   462  00BB                     pow@sign:	
   463                           ; 1 bytes @ 0x1B
   464                           
   465                           
   466                           ; 1 bytes @ 0x1B
   467  00BB                     	ds	1
   468  00BC                     sprintf@prec:	
   469  00BC                     pow@yi:	
   470                           ; 2 bytes @ 0x1C
   471                           
   472                           
   473                           ; 4 bytes @ 0x1C
   474  00BC                     	ds	2
   475  00BE                     sprintf@fval:	
   476                           
   477                           ; 3 bytes @ 0x1E
   478  00BE                     	ds	3
   479  00C1                     sprintf@c:	
   480                           
   481                           ; 1 bytes @ 0x21
   482  00C1                     	ds	1
   483  00C2                     dispRH@val:	
   484  00C2                     dispT@val:	
   485                           ; 4 bytes @ 0x22
   486                           
   487                           
   488                           ; 8 bytes @ 0x22
   489  00C2                     	ds	8
   490  00CA                     dispT@i:	
   491                           
   492                           ; 2 bytes @ 0x2A
   493  00CA                     	ds	2
   494  00CC                     ??_main:	
   495                           
   496                           ; 0 bytes @ 0x2C
   497  00CC                     	ds	2
   498  00CE                     main@rh:	
   499                           
   500                           ; 3 bytes @ 0x2E
   501  00CE                     	ds	3
   502  00D1                     main@t:	
   503                           
   504                           ; 3 bytes @ 0x31
   505  00D1                     	ds	3
   506  00D4                     _main$696:	
   507                           
   508                           ; 3 bytes @ 0x34
   509  00D4                     	ds	3
   510  00D7                     main@res:	
   511                           
   512                           ; 2 bytes @ 0x37
   513  00D7                     	ds	2
   514  00D9                     main@RH_temp:	
   515                           
   516                           ; 2 bytes @ 0x39
   517  00D9                     	ds	2
   518  00DB                     main@T_temp:	
   519                           
   520                           ; 2 bytes @ 0x3B
   521  00DB                     	ds	2
   522  00DD                     main@temp:	
   523                           
   524                           ; 1 bytes @ 0x3D
   525  00DD                     	ds	1
   526                           
   527                           	psect	cstackCOMMON
   528  0070                     __pcstackCOMMON:	
   529  0070                     ?_init_I2C_Master:	
   530  0070                     ??_init_I2C_Master:	
   531                           ; 0 bytes @ 0x0
   532                           
   533  0070                     ?_initLCD:	
   534                           ; 0 bytes @ 0x0
   535                           
   536  0070                     ?_I2C_Start:	
   537                           ; 0 bytes @ 0x0
   538                           
   539  0070                     ??_I2C_Start:	
   540                           ; 0 bytes @ 0x0
   541                           
   542  0070                     ?_I2C_Send:	
   543                           ; 0 bytes @ 0x0
   544                           
   545  0070                     ??_I2C_Send:	
   546                           ; 0 bytes @ 0x0
   547                           
   548  0070                     ?_I2C_RepeatedStart:	
   549                           ; 0 bytes @ 0x0
   550                           
   551  0070                     ??_I2C_RepeatedStart:	
   552                           ; 0 bytes @ 0x0
   553                           
   554  0070                     ??_I2C_Receive:	
   555                           ; 0 bytes @ 0x0
   556                           
   557  0070                     ?_I2C_Stop:	
   558                           ; 0 bytes @ 0x0
   559                           
   560  0070                     ??_I2C_Stop:	
   561                           ; 0 bytes @ 0x0
   562                           
   563  0070                     ?_delay_ms:	
   564                           ; 0 bytes @ 0x0
   565                           
   566  0070                     ?_dispRH:	
   567                           ; 0 bytes @ 0x0
   568                           
   569  0070                     ?_dispT:	
   570                           ; 0 bytes @ 0x0
   571                           
   572  0070                     ?_isdigit:	
   573                           ; 0 bytes @ 0x0
   574                           
   575  0070                     ??_isdigit:	
   576                           ; 1 bit 
   577                           
   578  0070                     ?_main:	
   579                           ; 0 bytes @ 0x0
   580                           
   581  0070                     ?_instCtrl:	
   582                           ; 0 bytes @ 0x0
   583                           
   584  0070                     ?_dataCtrl:	
   585                           ; 0 bytes @ 0x0
   586                           
   587  0070                     ?_I2C_Wait:	
   588                           ; 0 bytes @ 0x0
   589                           
   590  0070                     ??_I2C_Wait:	
   591                           ; 0 bytes @ 0x0
   592                           
   593  0070                     ?___ftge:	
   594                           ; 0 bytes @ 0x0
   595                           
   596  0070                     ?_I2C_Receive:	
   597                           ; 1 bit 
   598                           
   599  0070                     ?___wmul:	
   600                           ; 1 bytes @ 0x0
   601                           
   602  0070                     ?___awmod:	
   603                           ; 2 bytes @ 0x0
   604                           
   605  0070                     ?___ftpack:	
   606                           ; 2 bytes @ 0x0
   607                           
   608  0070                     ?_frexp:	
   609                           ; 3 bytes @ 0x0
   610                           
   611  0070                     ?___ftneg:	
   612                           ; 3 bytes @ 0x0
   613                           
   614  0070                     ?__tdiv_to_l_:	
   615                           ; 3 bytes @ 0x0
   616                           
   617  0070                     ?__div_to_l_:	
   618                           ; 4 bytes @ 0x0
   619                           
   620  0070                     ?___lldiv:	
   621                           ; 4 bytes @ 0x0
   622                           
   623  0070                     I2C_Send@data:	
   624                           ; 4 bytes @ 0x0
   625                           
   626  0070                     _isdigit$390:	
   627                           ; 1 bytes @ 0x0
   628                           
   629  0070                     delay_ms@cnt:	
   630                           ; 1 bytes @ 0x0
   631                           
   632  0070                     ___wmul@multiplier:	
   633                           ; 2 bytes @ 0x0
   634                           
   635  0070                     ___awmod@divisor:	
   636                           ; 2 bytes @ 0x0
   637                           
   638  0070                     __div_to_l_@f1:	
   639                           ; 2 bytes @ 0x0
   640                           
   641  0070                     ___ftpack@arg:	
   642                           ; 3 bytes @ 0x0
   643                           
   644  0070                     __tdiv_to_l_@f1:	
   645                           ; 3 bytes @ 0x0
   646                           
   647  0070                     ___ftge@ff1:	
   648                           ; 3 bytes @ 0x0
   649                           
   650  0070                     ___ftneg@f1:	
   651                           ; 3 bytes @ 0x0
   652                           
   653  0070                     frexp@value:	
   654                           ; 3 bytes @ 0x0
   655                           
   656  0070                     ___lldiv@divisor:	
   657                           ; 3 bytes @ 0x0
   658                           
   659                           
   660                           ; 4 bytes @ 0x0
   661  0070                     	ds	1
   662  0071                     I2C_Receive@ack:	
   663  0071                     isdigit@c:	
   664                           ; 1 bytes @ 0x1
   665                           
   666                           
   667                           ; 1 bytes @ 0x1
   668  0071                     	ds	1
   669  0072                     ??_delay_ms:	
   670  0072                     I2C_Receive@temp:	
   671                           ; 0 bytes @ 0x2
   672                           
   673  0072                     delay_ms@i:	
   674                           ; 1 bytes @ 0x2
   675                           
   676  0072                     ___wmul@multiplicand:	
   677                           ; 2 bytes @ 0x2
   678                           
   679  0072                     ___awmod@dividend:	
   680                           ; 2 bytes @ 0x2
   681                           
   682                           
   683                           ; 2 bytes @ 0x2
   684  0072                     	ds	1
   685  0073                     ??___ftneg:	
   686  0073                     ___ftpack@exp:	
   687                           ; 0 bytes @ 0x3
   688                           
   689  0073                     frexp@eptr:	
   690                           ; 1 bytes @ 0x3
   691                           
   692  0073                     __div_to_l_@f2:	
   693                           ; 1 bytes @ 0x3
   694                           
   695  0073                     __tdiv_to_l_@f2:	
   696                           ; 3 bytes @ 0x3
   697                           
   698  0073                     ___ftge@ff2:	
   699                           ; 3 bytes @ 0x3
   700                           
   701                           
   702                           ; 3 bytes @ 0x3
   703  0073                     	ds	1
   704  0074                     ??_frexp:	
   705  0074                     ??___wmul:	
   706                           ; 0 bytes @ 0x4
   707                           
   708  0074                     ??___awmod:	
   709                           ; 0 bytes @ 0x4
   710                           
   711  0074                     ___ftpack@sign:	
   712                           ; 0 bytes @ 0x4
   713                           
   714  0074                     delay_ms@j:	
   715                           ; 1 bytes @ 0x4
   716                           
   717  0074                     ___wmul@product:	
   718                           ; 2 bytes @ 0x4
   719                           
   720  0074                     ___lldiv@dividend:	
   721                           ; 2 bytes @ 0x4
   722                           
   723                           
   724                           ; 4 bytes @ 0x4
   725  0074                     	ds	1
   726  0075                     ??___ftpack:	
   727  0075                     ___awmod@counter:	
   728                           ; 0 bytes @ 0x5
   729                           
   730                           
   731                           ; 1 bytes @ 0x5
   732  0075                     	ds	1
   733  0076                     ??__tdiv_to_l_:	
   734  0076                     ??__div_to_l_:	
   735                           ; 0 bytes @ 0x6
   736                           
   737  0076                     ??_instCtrl:	
   738                           ; 0 bytes @ 0x6
   739                           
   740  0076                     ??_dataCtrl:	
   741                           ; 0 bytes @ 0x6
   742                           
   743  0076                     ??___ftge:	
   744                           ; 0 bytes @ 0x6
   745                           
   746  0076                     instCtrl@INST:	
   747                           ; 0 bytes @ 0x6
   748                           
   749  0076                     dataCtrl@DATA:	
   750                           ; 1 bytes @ 0x6
   751                           
   752  0076                     ___awmod@sign:	
   753                           ; 1 bytes @ 0x6
   754                           
   755                           
   756                           ; 1 bytes @ 0x6
   757  0076                     	ds	1
   758  0077                     ??_initLCD:	
   759  0077                     ?___awdiv:	
   760                           ; 0 bytes @ 0x7
   761                           
   762  0077                     ___awdiv@divisor:	
   763                           ; 2 bytes @ 0x7
   764                           
   765                           
   766                           ; 2 bytes @ 0x7
   767  0077                     	ds	1
   768  0078                     ??___lldiv:	
   769  0078                     ?___awtoft:	
   770                           ; 0 bytes @ 0x8
   771                           
   772  0078                     ?___lltoft:	
   773                           ; 3 bytes @ 0x8
   774                           
   775  0078                     ?___lwtoft:	
   776                           ; 3 bytes @ 0x8
   777                           
   778  0078                     ___awtoft@c:	
   779                           ; 3 bytes @ 0x8
   780                           
   781  0078                     ___lwtoft@c:	
   782                           ; 2 bytes @ 0x8
   783                           
   784  0078                     ___lltoft@c:	
   785                           ; 2 bytes @ 0x8
   786                           
   787                           
   788                           ; 4 bytes @ 0x8
   789  0078                     	ds	1
   790  0079                     ___awdiv@dividend:	
   791  0079                     ___lldiv@quotient:	
   792                           ; 2 bytes @ 0x9
   793                           
   794                           
   795                           ; 4 bytes @ 0x9
   796  0079                     	ds	2
   797  007B                     ??___awdiv:	
   798  007B                     ??___awtoft:	
   799                           ; 0 bytes @ 0xB
   800                           
   801  007B                     ??___lwtoft:	
   802                           ; 0 bytes @ 0xB
   803                           
   804                           
   805                           ; 0 bytes @ 0xB
   806  007B                     	ds	1
   807  007C                     ??___bmul:	
   808  007C                     ??___lltoft:	
   809                           ; 0 bytes @ 0xC
   810                           
   811                           
   812                           ; 0 bytes @ 0xC
   813  007C                     	ds	1
   814  007D                     ___awtoft@sign:	
   815  007D                     ___lldiv@counter:	
   816                           ; 1 bytes @ 0xD
   817                           
   818  007D                     ___lltoft@exp:	
   819                           ; 1 bytes @ 0xD
   820                           
   821                           
   822                           ; 1 bytes @ 0xD
   823  007D                     	ds	1
   824  007E                     ??___ftsub:	
   825                           
   826                           	psect	cstackBANK0
   827  0020                     __pcstackBANK0:	
   828                           ; 0 bytes @ 0xE
   829                           
   830  0020                     ?___ftdiv:	
   831  0020                     ?___llmod:	
   832                           ; 3 bytes @ 0x0
   833                           
   834  0020                     ___awdiv@counter:	
   835                           ; 4 bytes @ 0x0
   836                           
   837  0020                     ___ftdiv@f2:	
   838                           ; 1 bytes @ 0x0
   839                           
   840  0020                     __div_to_l_@quot:	
   841                           ; 3 bytes @ 0x0
   842                           
   843  0020                     __tdiv_to_l_@quot:	
   844                           ; 4 bytes @ 0x0
   845                           
   846  0020                     ___llmod@divisor:	
   847                           ; 4 bytes @ 0x0
   848                           
   849                           
   850                           ; 4 bytes @ 0x0
   851  0020                     	ds	1
   852  0021                     ___awdiv@sign:	
   853                           
   854                           ; 1 bytes @ 0x1
   855  0021                     	ds	1
   856  0022                     ___awdiv@quotient:	
   857                           
   858                           ; 2 bytes @ 0x2
   859  0022                     	ds	1
   860  0023                     ___ftdiv@f1:	
   861                           
   862                           ; 3 bytes @ 0x3
   863  0023                     	ds	1
   864  0024                     ?___bmul:	
   865  0024                     ___bmul@multiplicand:	
   866                           ; 1 bytes @ 0x4
   867                           
   868  0024                     __div_to_l_@cntr:	
   869                           ; 1 bytes @ 0x4
   870                           
   871  0024                     __tdiv_to_l_@cntr:	
   872                           ; 1 bytes @ 0x4
   873                           
   874  0024                     ___llmod@dividend:	
   875                           ; 1 bytes @ 0x4
   876                           
   877                           
   878                           ; 4 bytes @ 0x4
   879  0024                     	ds	1
   880  0025                     ___bmul@product:	
   881  0025                     __div_to_l_@exp1:	
   882                           ; 1 bytes @ 0x5
   883                           
   884  0025                     __tdiv_to_l_@exp1:	
   885                           ; 1 bytes @ 0x5
   886                           
   887                           
   888                           ; 1 bytes @ 0x5
   889  0025                     	ds	1
   890  0026                     ??___ftdiv:	
   891  0026                     ___bmul@multiplier:	
   892                           ; 0 bytes @ 0x6
   893                           
   894                           
   895                           ; 1 bytes @ 0x6
   896  0026                     	ds	2
   897  0028                     ??___llmod:	
   898                           
   899                           ; 0 bytes @ 0x8
   900  0028                     	ds	1
   901  0029                     ___llmod@counter:	
   902                           
   903                           ; 1 bytes @ 0x9
   904  0029                     	ds	1
   905  002A                     ___ftdiv@cntr:	
   906                           
   907                           ; 1 bytes @ 0xA
   908  002A                     	ds	1
   909  002B                     ___ftdiv@f3:	
   910                           
   911                           ; 3 bytes @ 0xB
   912  002B                     	ds	3
   913  002E                     ___ftdiv@exp:	
   914                           
   915                           ; 1 bytes @ 0xE
   916  002E                     	ds	1
   917  002F                     ___ftdiv@sign:	
   918                           
   919                           ; 1 bytes @ 0xF
   920  002F                     	ds	1
   921  0030                     ?___ftmul:	
   922  0030                     ___ftmul@f1:	
   923                           ; 3 bytes @ 0x10
   924                           
   925                           
   926                           ; 3 bytes @ 0x10
   927  0030                     	ds	3
   928  0033                     ___ftmul@f2:	
   929                           
   930                           ; 3 bytes @ 0x13
   931  0033                     	ds	3
   932  0036                     ??___ftmul:	
   933                           
   934                           ; 0 bytes @ 0x16
   935  0036                     	ds	4
   936  003A                     ___ftmul@exp:	
   937                           
   938                           ; 1 bytes @ 0x1A
   939  003A                     	ds	1
   940  003B                     ___ftmul@f3_as_product:	
   941                           
   942                           ; 3 bytes @ 0x1B
   943  003B                     	ds	3
   944  003E                     ___ftmul@cntr:	
   945                           
   946                           ; 1 bytes @ 0x1E
   947  003E                     	ds	1
   948  003F                     ___ftmul@sign:	
   949                           
   950                           ; 1 bytes @ 0x1F
   951  003F                     	ds	1
   952  0040                     ?_fround:	
   953  0040                     ?_scale:	
   954                           ; 3 bytes @ 0x20
   955                           
   956                           
   957                           ; 3 bytes @ 0x20
   958  0040                     	ds	3
   959  0043                     ??_fround:	
   960  0043                     ??_scale:	
   961                           ; 0 bytes @ 0x23
   962                           
   963                           
   964                           ; 0 bytes @ 0x23
   965  0043                     	ds	2
   966  0045                     _scale$699:	
   967                           
   968                           ; 3 bytes @ 0x25
   969  0045                     	ds	3
   970  0048                     scale@scl:	
   971                           
   972                           ; 1 bytes @ 0x28
   973  0048                     	ds	1
   974  0049                     ?___fttol:	
   975  0049                     ___fttol@f1:	
   976                           ; 4 bytes @ 0x29
   977                           
   978  0049                     _fround$698:	
   979                           ; 3 bytes @ 0x29
   980                           
   981                           
   982                           ; 3 bytes @ 0x29
   983  0049                     	ds	3
   984  004C                     _fround$697:	
   985                           
   986                           ; 3 bytes @ 0x2C
   987  004C                     	ds	1
   988  004D                     ??___fttol:	
   989                           
   990                           ; 0 bytes @ 0x2D
   991  004D                     	ds	2
   992  004F                     fround@prec:	
   993                           
   994                           ; 1 bytes @ 0x2F
   995  004F                     	ds	1
   996  0050                     ?___ftadd:	
   997  0050                     ___ftadd@f1:	
   998                           ; 3 bytes @ 0x30
   999                           
  1000                           
  1001                           ; 3 bytes @ 0x30
  1002  0050                     	ds	1
  1003  0051                     ___fttol@sign1:	
  1004                           
  1005                           ; 1 bytes @ 0x31
  1006  0051                     	ds	1
  1007  0052                     ___fttol@lval:	
  1008                           
  1009                           ; 4 bytes @ 0x32
  1010  0052                     	ds	1
  1011  0053                     ___ftadd@f2:	
  1012                           
  1013                           ; 3 bytes @ 0x33
  1014  0053                     	ds	3
  1015  0056                     ??___ftadd:	
  1016  0056                     ___fttol@exp1:	
  1017                           ; 0 bytes @ 0x36
  1018                           
  1019                           
  1020                           ; 1 bytes @ 0x36
  1021  0056                     	ds	1
  1022  0057                     ?___altoft:	
  1023  0057                     ___altoft@c:	
  1024                           ; 3 bytes @ 0x37
  1025                           
  1026                           
  1027                           ; 4 bytes @ 0x37
  1028  0057                     	ds	3
  1029  005A                     ___ftadd@sign:	
  1030                           
  1031                           ; 1 bytes @ 0x3A
  1032  005A                     	ds	1
  1033  005B                     ??___altoft:	
  1034  005B                     ___ftadd@exp2:	
  1035                           ; 0 bytes @ 0x3B
  1036                           
  1037                           
  1038                           ; 1 bytes @ 0x3B
  1039  005B                     	ds	1
  1040  005C                     ___ftadd@exp1:	
  1041                           
  1042                           ; 1 bytes @ 0x3C
  1043  005C                     	ds	1
  1044  005D                     ?_eval_poly:	
  1045  005D                     ?___ftsub:	
  1046                           ; 3 bytes @ 0x3D
  1047                           
  1048  005D                     ___altoft@exp:	
  1049                           ; 3 bytes @ 0x3D
  1050                           
  1051  005D                     ___ftsub@f2:	
  1052                           ; 1 bytes @ 0x3D
  1053                           
  1054  005D                     eval_poly@x:	
  1055                           ; 3 bytes @ 0x3D
  1056                           
  1057                           
  1058                           ; 3 bytes @ 0x3D
  1059  005D                     	ds	1
  1060  005E                     ___altoft@sign:	
  1061                           
  1062                           ; 1 bytes @ 0x3E
  1063  005E                     	ds	1
  1064  005F                     ?_floor:	
  1065  005F                     floor@x:	
  1066                           ; 3 bytes @ 0x3F
  1067                           
  1068                           
  1069                           ; 3 bytes @ 0x3F
  1070  005F                     	ds	1
  1071  0060                     eval_poly@d:	
  1072  0060                     ___ftsub@f1:	
  1073                           ; 1 bytes @ 0x40
  1074                           
  1075                           
  1076                           ; 3 bytes @ 0x40
  1077  0060                     	ds	1
  1078  0061                     eval_poly@n:	
  1079                           
  1080                           ; 2 bytes @ 0x41
  1081  0061                     	ds	1
  1082  0062                     ??_floor:	
  1083                           
  1084                           ; 0 bytes @ 0x42
  1085  0062                     	ds	1
  1086  0063                     ??_eval_poly:	
  1087  0063                     ?_sprintf:	
  1088                           ; 0 bytes @ 0x43
  1089                           
  1090  0063                     sprintf@f:	
  1091                           ; 2 bytes @ 0x43
  1092                           
  1093  0063                     floor@i:	
  1094                           ; 1 bytes @ 0x43
  1095                           
  1096                           
  1097                           ; 3 bytes @ 0x43
  1098  0063                     	ds	1
  1099  0064                     eval_poly@res:	
  1100                           
  1101                           ; 3 bytes @ 0x44
  1102  0064                     	ds	2
  1103  0066                     floor@expon:	
  1104                           
  1105                           ; 2 bytes @ 0x46
  1106  0066                     	ds	1
  1107  0067                     ??_sprintf:	
  1108  0067                     ?_log:	
  1109                           ; 0 bytes @ 0x47
  1110                           
  1111  0067                     ?_ldexp:	
  1112                           ; 3 bytes @ 0x47
  1113                           
  1114  0067                     ldexp@value:	
  1115                           ; 3 bytes @ 0x47
  1116                           
  1117  0067                     log@x:	
  1118                           ; 3 bytes @ 0x47
  1119                           
  1120                           
  1121                           ; 3 bytes @ 0x47
  1122  0067                     	ds	3
  1123  006A                     ??_log:	
  1124  006A                     ldexp@newexp:	
  1125                           ; 0 bytes @ 0x4A
  1126                           
  1127                           
  1128                           ; 2 bytes @ 0x4A
  1129  006A                     	ds	1
  1130  006B                     log@exponent:	
  1131                           
  1132                           ; 2 bytes @ 0x4B
  1133  006B                     	ds	1
  1134  006C                     ??_ldexp:	
  1135                           
  1136                           ; 0 bytes @ 0x4C
  1137  006C                     	ds	1
  1138  006D                     ??_dispRH:	
  1139  006D                     ??_dispT:	
  1140                           ; 0 bytes @ 0x4D
  1141                           
  1142                           
  1143                           ; 0 bytes @ 0x4D
  1144  006D                     	ds	1
  1145  006E                     ??_exp:	
  1146                           
  1147                           ; 0 bytes @ 0x4E
  1148  006E                     	ds	1
  1149  006F                     ??_pow:	
  1150                           
  1151                           ; 0 bytes @ 0x4F
  1152  006F                     	ds	1
  1153                           
  1154                           	psect	maintext
  1155  0AFD                     __pmaintext:	
  1156 ;;
  1157 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1158 ;;
  1159 ;; *************** function _main *****************
  1160 ;; Defined at:
  1161 ;;		line 33 in file "D:\From old laptop\Subjects\Uni\3rd Year M\2nd sem\Embedded Systems\Practical Activities\Practical 
      +Activity #7\To Submit\LE7-3.c"
  1162 ;; Parameters:    Size  Location     Type
  1163 ;;		None
  1164 ;; Auto vars:     Size  Location     Type
  1165 ;;  t               3   49[BANK1 ] float 
  1166 ;;  rh              3   46[BANK1 ] float 
  1167 ;;  T_temp          2   59[BANK1 ] unsigned int 
  1168 ;;  RH_temp         2   57[BANK1 ] unsigned int 
  1169 ;;  res             2   55[BANK1 ] int 
  1170 ;;  temp            1   61[BANK1 ] unsigned char 
  1171 ;; Return value:  Size  Location     Type
  1172 ;;		None               void
  1173 ;; Registers used:
  1174 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1175 ;; Tracked objects:
  1176 ;;		On entry : 17F/0
  1177 ;;		On exit  : 0/0
  1178 ;;		Unchanged: 0/0
  1179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1180 ;;      Params:         0       0       0       0       0
  1181 ;;      Locals:         0       0      16       0       0
  1182 ;;      Temps:          0       0       2       0       0
  1183 ;;      Totals:         0       0      18       0       0
  1184 ;;Total ram usage:       18 bytes
  1185 ;; Hardware stack levels required when called:    5
  1186 ;; This function calls:
  1187 ;;		_I2C_Receive
  1188 ;;		_I2C_RepeatedStart
  1189 ;;		_I2C_Send
  1190 ;;		_I2C_Start
  1191 ;;		_I2C_Stop
  1192 ;;		___awtoft
  1193 ;;		___ftadd
  1194 ;;		___ftdiv
  1195 ;;		___ftmul
  1196 ;;		___fttol
  1197 ;;		___lwtoft
  1198 ;;		_delay_ms
  1199 ;;		_dispRH
  1200 ;;		_dispT
  1201 ;;		_initLCD
  1202 ;;		_init_I2C_Master
  1203 ;;		_pow
  1204 ;; This function is called by:
  1205 ;;		Startup code after reset
  1206 ;; This function uses a non-reentrant model
  1207 ;;
  1208                           
  1209                           
  1210                           ;psect for function _main
  1211  0AFD                     _main:	
  1212                           
  1213                           ;LE7-3.c: 34: int res = (int)(pow(2,14));
  1214                           
  1215                           ;incstack = 0
  1216                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1217  0AFD  3000               	movlw	0
  1218  0AFE  1683               	bsf	3,5	;RP0=1, select bank1
  1219  0AFF  1303               	bcf	3,6	;RP1=0, select bank1
  1220  0B00  00B2               	movwf	pow@y^(0+128)
  1221  0B01  3060               	movlw	96
  1222  0B02  00B3               	movwf	(pow@y+1)^(0+128)
  1223  0B03  3041               	movlw	65
  1224  0B04  00B4               	movwf	(pow@y+2)^(0+128)
  1225  0B05  3000               	movlw	0
  1226  0B06  00AF               	movwf	pow@x^(0+128)
  1227  0B07  3000               	movlw	0
  1228  0B08  00B0               	movwf	(pow@x+1)^(0+128)
  1229  0B09  3040               	movlw	64
  1230  0B0A  00B1               	movwf	(pow@x+2)^(0+128)
  1231  0B0B  160A  118A  2520  120A  158A  	fcall	_pow
  1232  0B10  1683               	bsf	3,5	;RP0=1, select bank1
  1233  0B11  1303               	bcf	3,6	;RP1=0, select bank1
  1234  0B12  082F               	movf	?_pow^(0+128),w
  1235  0B13  00D4               	movwf	_main$696^(0+128)
  1236  0B14  0830               	movf	(?_pow+1)^(0+128),w
  1237  0B15  00D5               	movwf	(_main$696+1)^(0+128)
  1238  0B16  0831               	movf	(?_pow+2)^(0+128),w
  1239  0B17  00D6               	movwf	(_main$696+2)^(0+128)
  1240                           
  1241                           ;LE7-3.c: 34: int res = (int)(pow(2,14));
  1242  0B18  0854               	movf	_main$696^(0+128),w
  1243  0B19  1283               	bcf	3,5	;RP0=0, select bank0
  1244  0B1A  1303               	bcf	3,6	;RP1=0, select bank0
  1245  0B1B  00C9               	movwf	___fttol@f1
  1246  0B1C  1683               	bsf	3,5	;RP0=1, select bank1
  1247  0B1D  1303               	bcf	3,6	;RP1=0, select bank1
  1248  0B1E  0855               	movf	(_main$696+1)^(0+128),w
  1249  0B1F  1283               	bcf	3,5	;RP0=0, select bank0
  1250  0B20  1303               	bcf	3,6	;RP1=0, select bank0
  1251  0B21  00CA               	movwf	___fttol@f1+1
  1252  0B22  1683               	bsf	3,5	;RP0=1, select bank1
  1253  0B23  1303               	bcf	3,6	;RP1=0, select bank1
  1254  0B24  0856               	movf	(_main$696+2)^(0+128),w
  1255  0B25  1283               	bcf	3,5	;RP0=0, select bank0
  1256  0B26  1303               	bcf	3,6	;RP1=0, select bank0
  1257  0B27  00CB               	movwf	___fttol@f1+2
  1258  0B28  160A  158A  25AB  120A  158A  	fcall	___fttol
  1259  0B2D  1283               	bcf	3,5	;RP0=0, select bank0
  1260  0B2E  1303               	bcf	3,6	;RP1=0, select bank0
  1261  0B2F  084A               	movf	?___fttol+1,w
  1262  0B30  1683               	bsf	3,5	;RP0=1, select bank1
  1263  0B31  1303               	bcf	3,6	;RP1=0, select bank1
  1264  0B32  01D8               	clrf	(main@res+1)^(0+128)
  1265  0B33  07D8               	addwf	(main@res+1)^(0+128),f
  1266  0B34  1283               	bcf	3,5	;RP0=0, select bank0
  1267  0B35  1303               	bcf	3,6	;RP1=0, select bank0
  1268  0B36  0849               	movf	?___fttol,w
  1269  0B37  1683               	bsf	3,5	;RP0=1, select bank1
  1270  0B38  1303               	bcf	3,6	;RP1=0, select bank1
  1271  0B39  01D7               	clrf	main@res^(0+128)
  1272  0B3A  07D7               	addwf	main@res^(0+128),f
  1273                           
  1274                           ;LE7-3.c: 35: unsigned int RH_temp = 0x0000, T_temp = 0x0000;
  1275  0B3B  01D9               	clrf	main@RH_temp^(0+128)
  1276  0B3C  01DA               	clrf	(main@RH_temp+1)^(0+128)
  1277  0B3D  01DB               	clrf	main@T_temp^(0+128)
  1278  0B3E  01DC               	clrf	(main@T_temp+1)^(0+128)
  1279                           
  1280                           ;LE7-3.c: 36: unsigned char temp = 0x00;
  1281  0B3F  01DD               	clrf	main@temp^(0+128)
  1282                           
  1283                           ;LE7-3.c: 37: float rh, t;
  1284                           ;LE7-3.c: 38: TRISB = 0x00;
  1285  0B40  0186               	clrf	6	;volatile
  1286                           
  1287                           ;LE7-3.c: 39: TRISD = 0x00;
  1288  0B41  0188               	clrf	8	;volatile
  1289                           
  1290                           ;LE7-3.c: 40: PORTB = 0x00;
  1291  0B42  1283               	bcf	3,5	;RP0=0, select bank0
  1292  0B43  1303               	bcf	3,6	;RP1=0, select bank0
  1293  0B44  0186               	clrf	6	;volatile
  1294                           
  1295                           ;LE7-3.c: 41: PORTD = 0x00;
  1296  0B45  0188               	clrf	8	;volatile
  1297                           
  1298                           ;LE7-3.c: 42: init_I2C_Master();
  1299  0B46  160A  158A  2125  120A  158A  	fcall	_init_I2C_Master
  1300  0B4B                     l3393:	
  1301                           ;LE7-3.c: 44: for(;;)
  1302                           
  1303                           
  1304                           ;LE7-3.c: 45: {
  1305                           ;LE7-3.c: 46: initLCD();
  1306  0B4B  160A  158A  2188  120A  158A  	fcall	_initLCD
  1307                           
  1308                           ;LE7-3.c: 48: I2C_Start();
  1309  0B50  160A  158A  20F8  120A  158A  	fcall	_I2C_Start
  1310                           
  1311                           ;LE7-3.c: 49: I2C_Send(0x80);
  1312  0B55  3080               	movlw	128
  1313  0B56  160A  158A  210E  120A  158A  	fcall	_I2C_Send
  1314                           
  1315                           ;LE7-3.c: 50: I2C_Send(0xE5);
  1316  0B5B  30E5               	movlw	229
  1317  0B5C  160A  158A  210E  120A  158A  	fcall	_I2C_Send
  1318                           
  1319                           ;LE7-3.c: 51: I2C_RepeatedStart();
  1320  0B61  160A  158A  20F1  120A  158A  	fcall	_I2C_RepeatedStart
  1321                           
  1322                           ;LE7-3.c: 52: I2C_Send(0x81);
  1323  0B66  3081               	movlw	129
  1324  0B67  160A  158A  210E  120A  158A  	fcall	_I2C_Send
  1325                           
  1326                           ;LE7-3.c: 53: RH_temp = I2C_Receive(1);
  1327  0B6C  3001               	movlw	1
  1328  0B6D  160A  158A  21EC  120A  158A  	fcall	_I2C_Receive
  1329  0B72  1683               	bsf	3,5	;RP0=1, select bank1
  1330  0B73  1303               	bcf	3,6	;RP1=0, select bank1
  1331  0B74  00CC               	movwf	??_main^(0+128)
  1332  0B75  01CD               	clrf	(??_main^(0+128)+1)
  1333  0B76  084C               	movf	??_main^(0+128),w
  1334  0B77  00D9               	movwf	main@RH_temp^(0+128)
  1335  0B78  084D               	movf	(??_main+1)^(0+128),w
  1336  0B79  00DA               	movwf	(main@RH_temp+1)^(0+128)
  1337                           
  1338                           ;LE7-3.c: 54: temp = I2C_Receive(0);
  1339  0B7A  3000               	movlw	0
  1340  0B7B  160A  158A  21EC  120A  158A  	fcall	_I2C_Receive
  1341  0B80  1683               	bsf	3,5	;RP0=1, select bank1
  1342  0B81  1303               	bcf	3,6	;RP1=0, select bank1
  1343  0B82  00CC               	movwf	??_main^(0+128)
  1344  0B83  084C               	movf	??_main^(0+128),w
  1345  0B84  00DD               	movwf	main@temp^(0+128)
  1346                           
  1347                           ;LE7-3.c: 55: I2C_Stop();
  1348  0B85  160A  158A  20FF  120A  158A  	fcall	_I2C_Stop
  1349                           
  1350                           ;LE7-3.c: 56: delay_ms(200);
  1351  0B8A  30C8               	movlw	200
  1352  0B8B  00F0               	movwf	delay_ms@cnt
  1353  0B8C  3000               	movlw	0
  1354  0B8D  00F1               	movwf	delay_ms@cnt+1
  1355  0B8E  120A  158A  2000  120A  158A  	fcall	_delay_ms
  1356                           
  1357                           ;LE7-3.c: 59: RH_temp = RH_temp << 6;
  1358  0B93  1683               	bsf	3,5	;RP0=1, select bank1
  1359  0B94  1303               	bcf	3,6	;RP1=0, select bank1
  1360  0B95  085A               	movf	(main@RH_temp+1)^(0+128),w
  1361  0B96  00CD               	movwf	(??_main^(0+128)+1)
  1362  0B97  0859               	movf	main@RH_temp^(0+128),w
  1363  0B98  00CC               	movwf	??_main^(0+128)
  1364  0B99  3006               	movlw	6
  1365  0B9A  00FF               	movwf	127
  1366  0B9B                     u4615:	
  1367  0B9B  1003               	clrc
  1368  0B9C  0DCC               	rlf	??_main^(0+128),f
  1369  0B9D  0DCD               	rlf	(??_main^(0+128)+1),f
  1370  0B9E  0BFF               	decfsz	127,f
  1371  0B9F  2B9B               	goto	u4615
  1372  0BA0  084C               	movf	??_main^(0+128),w
  1373  0BA1  00D9               	movwf	main@RH_temp^(0+128)
  1374  0BA2  084D               	movf	(??_main+1)^(0+128),w
  1375  0BA3  00DA               	movwf	(main@RH_temp+1)^(0+128)
  1376                           
  1377                           ;LE7-3.c: 60: temp = temp >> 2;
  1378  0BA4  085D               	movf	main@temp^(0+128),w
  1379  0BA5  00CC               	movwf	??_main^(0+128)
  1380  0BA6  3002               	movlw	2
  1381  0BA7                     u4625:	
  1382  0BA7  1003               	clrc
  1383  0BA8  0CCC               	rrf	??_main^(0+128),f
  1384  0BA9  3EFF               	addlw	-1
  1385  0BAA  1D03               	skipz
  1386  0BAB  2BA7               	goto	u4625
  1387  0BAC  084C               	movf	??_main^(0+128),w
  1388  0BAD  00CD               	movwf	(??_main+1)^(0+128)
  1389  0BAE  084D               	movf	(??_main+1)^(0+128),w
  1390  0BAF  00DD               	movwf	main@temp^(0+128)
  1391                           
  1392                           ;LE7-3.c: 61: RH_temp = RH_temp | temp;
  1393  0BB0  0859               	movf	main@RH_temp^(0+128),w
  1394  0BB1  045D               	iorwf	main@temp^(0+128),w
  1395  0BB2  00D9               	movwf	main@RH_temp^(0+128)
  1396  0BB3  085A               	movf	(main@RH_temp+1)^(0+128),w
  1397  0BB4  00DA               	movwf	(main@RH_temp+1)^(0+128)
  1398                           
  1399                           ;LE7-3.c: 63: rh = (float)(-6+(125*((float)RH_temp/(float)res)));
  1400  0BB5  3000               	movlw	0
  1401  0BB6  1283               	bcf	3,5	;RP0=0, select bank0
  1402  0BB7  1303               	bcf	3,6	;RP1=0, select bank0
  1403  0BB8  00D0               	movwf	___ftadd@f1
  1404  0BB9  30C0               	movlw	192
  1405  0BBA  00D1               	movwf	___ftadd@f1+1
  1406  0BBB  30C0               	movlw	192
  1407  0BBC  00D2               	movwf	___ftadd@f1+2
  1408  0BBD  3000               	movlw	0
  1409  0BBE  00B0               	movwf	___ftmul@f1
  1410  0BBF  30FA               	movlw	250
  1411  0BC0  00B1               	movwf	___ftmul@f1+1
  1412  0BC1  3042               	movlw	66
  1413  0BC2  00B2               	movwf	___ftmul@f1+2
  1414  0BC3  1683               	bsf	3,5	;RP0=1, select bank1
  1415  0BC4  1303               	bcf	3,6	;RP1=0, select bank1
  1416  0BC5  0858               	movf	(main@res+1)^(0+128),w
  1417  0BC6  01F9               	clrf	___awtoft@c+1
  1418  0BC7  07F9               	addwf	___awtoft@c+1,f
  1419  0BC8  0857               	movf	main@res^(0+128),w
  1420  0BC9  01F8               	clrf	___awtoft@c
  1421  0BCA  07F8               	addwf	___awtoft@c,f
  1422  0BCB  160A  158A  21A8  120A  158A  	fcall	___awtoft
  1423  0BD0  0878               	movf	?___awtoft,w
  1424  0BD1  1283               	bcf	3,5	;RP0=0, select bank0
  1425  0BD2  1303               	bcf	3,6	;RP1=0, select bank0
  1426  0BD3  00A0               	movwf	___ftdiv@f2
  1427  0BD4  0879               	movf	?___awtoft+1,w
  1428  0BD5  00A1               	movwf	___ftdiv@f2+1
  1429  0BD6  087A               	movf	?___awtoft+2,w
  1430  0BD7  00A2               	movwf	___ftdiv@f2+2
  1431  0BD8  1683               	bsf	3,5	;RP0=1, select bank1
  1432  0BD9  1303               	bcf	3,6	;RP1=0, select bank1
  1433  0BDA  085A               	movf	(main@RH_temp+1)^(0+128),w
  1434  0BDB  01F9               	clrf	___lwtoft@c+1
  1435  0BDC  07F9               	addwf	___lwtoft@c+1,f
  1436  0BDD  0859               	movf	main@RH_temp^(0+128),w
  1437  0BDE  01F8               	clrf	___lwtoft@c
  1438  0BDF  07F8               	addwf	___lwtoft@c,f
  1439  0BE0  160A  158A  2158  120A  158A  	fcall	___lwtoft
  1440  0BE5  0878               	movf	?___lwtoft,w
  1441  0BE6  1283               	bcf	3,5	;RP0=0, select bank0
  1442  0BE7  1303               	bcf	3,6	;RP1=0, select bank0
  1443  0BE8  00A3               	movwf	___ftdiv@f1
  1444  0BE9  0879               	movf	?___lwtoft+1,w
  1445  0BEA  00A4               	movwf	___ftdiv@f1+1
  1446  0BEB  087A               	movf	?___lwtoft+2,w
  1447  0BEC  00A5               	movwf	___ftdiv@f1+2
  1448  0BED  160A  118A  20D0  120A  158A  	fcall	___ftdiv
  1449  0BF2  1283               	bcf	3,5	;RP0=0, select bank0
  1450  0BF3  1303               	bcf	3,6	;RP1=0, select bank0
  1451  0BF4  0820               	movf	?___ftdiv,w
  1452  0BF5  00B3               	movwf	___ftmul@f2
  1453  0BF6  0821               	movf	?___ftdiv+1,w
  1454  0BF7  00B4               	movwf	___ftmul@f2+1
  1455  0BF8  0822               	movf	?___ftdiv+2,w
  1456  0BF9  00B5               	movwf	___ftmul@f2+2
  1457  0BFA  160A  118A  231B  120A  158A  	fcall	___ftmul
  1458  0BFF  1283               	bcf	3,5	;RP0=0, select bank0
  1459  0C00  1303               	bcf	3,6	;RP1=0, select bank0
  1460  0C01  0830               	movf	?___ftmul,w
  1461  0C02  00D3               	movwf	___ftadd@f2
  1462  0C03  0831               	movf	?___ftmul+1,w
  1463  0C04  00D4               	movwf	___ftadd@f2+1
  1464  0C05  0832               	movf	?___ftmul+2,w
  1465  0C06  00D5               	movwf	___ftadd@f2+2
  1466  0C07  120A  158A  2028  120A  158A  	fcall	___ftadd
  1467  0C0C  1283               	bcf	3,5	;RP0=0, select bank0
  1468  0C0D  1303               	bcf	3,6	;RP1=0, select bank0
  1469  0C0E  0850               	movf	?___ftadd,w
  1470  0C0F  1683               	bsf	3,5	;RP0=1, select bank1
  1471  0C10  1303               	bcf	3,6	;RP1=0, select bank1
  1472  0C11  00CE               	movwf	main@rh^(0+128)
  1473  0C12  1283               	bcf	3,5	;RP0=0, select bank0
  1474  0C13  1303               	bcf	3,6	;RP1=0, select bank0
  1475  0C14  0851               	movf	?___ftadd+1,w
  1476  0C15  1683               	bsf	3,5	;RP0=1, select bank1
  1477  0C16  1303               	bcf	3,6	;RP1=0, select bank1
  1478  0C17  00CF               	movwf	(main@rh+1)^(0+128)
  1479  0C18  1283               	bcf	3,5	;RP0=0, select bank0
  1480  0C19  1303               	bcf	3,6	;RP1=0, select bank0
  1481  0C1A  0852               	movf	?___ftadd+2,w
  1482  0C1B  1683               	bsf	3,5	;RP0=1, select bank1
  1483  0C1C  1303               	bcf	3,6	;RP1=0, select bank1
  1484  0C1D  00D0               	movwf	(main@rh+2)^(0+128)
  1485                           
  1486                           ;LE7-3.c: 64: RH = (int)(rh);
  1487  0C1E  084E               	movf	main@rh^(0+128),w
  1488  0C1F  1283               	bcf	3,5	;RP0=0, select bank0
  1489  0C20  1303               	bcf	3,6	;RP1=0, select bank0
  1490  0C21  00C9               	movwf	___fttol@f1
  1491  0C22  1683               	bsf	3,5	;RP0=1, select bank1
  1492  0C23  1303               	bcf	3,6	;RP1=0, select bank1
  1493  0C24  084F               	movf	(main@rh+1)^(0+128),w
  1494  0C25  1283               	bcf	3,5	;RP0=0, select bank0
  1495  0C26  1303               	bcf	3,6	;RP1=0, select bank0
  1496  0C27  00CA               	movwf	___fttol@f1+1
  1497  0C28  1683               	bsf	3,5	;RP0=1, select bank1
  1498  0C29  1303               	bcf	3,6	;RP1=0, select bank1
  1499  0C2A  0850               	movf	(main@rh+2)^(0+128),w
  1500  0C2B  1283               	bcf	3,5	;RP0=0, select bank0
  1501  0C2C  1303               	bcf	3,6	;RP1=0, select bank0
  1502  0C2D  00CB               	movwf	___fttol@f1+2
  1503  0C2E  160A  158A  25AB  120A  158A  	fcall	___fttol
  1504  0C33  1283               	bcf	3,5	;RP0=0, select bank0
  1505  0C34  1303               	bcf	3,6	;RP1=0, select bank0
  1506  0C35  084A               	movf	?___fttol+1,w
  1507  0C36  1683               	bsf	3,5	;RP0=1, select bank1
  1508  0C37  1303               	bcf	3,6	;RP1=0, select bank1
  1509  0C38  01E2               	clrf	(_RH+1)^(0+128)
  1510  0C39  07E2               	addwf	(_RH+1)^(0+128),f
  1511  0C3A  1283               	bcf	3,5	;RP0=0, select bank0
  1512  0C3B  1303               	bcf	3,6	;RP1=0, select bank0
  1513  0C3C  0849               	movf	?___fttol,w
  1514  0C3D  1683               	bsf	3,5	;RP0=1, select bank1
  1515  0C3E  1303               	bcf	3,6	;RP1=0, select bank1
  1516  0C3F  01E1               	clrf	_RH^(0+128)
  1517  0C40  07E1               	addwf	_RH^(0+128),f
  1518                           
  1519                           ;LE7-3.c: 67: I2C_Start();
  1520  0C41  160A  158A  20F8  120A  158A  	fcall	_I2C_Start
  1521                           
  1522                           ;LE7-3.c: 68: I2C_Send(0x80);
  1523  0C46  3080               	movlw	128
  1524  0C47  160A  158A  210E  120A  158A  	fcall	_I2C_Send
  1525                           
  1526                           ;LE7-3.c: 69: I2C_Send(0xE3);
  1527  0C4C  30E3               	movlw	227
  1528  0C4D  160A  158A  210E  120A  158A  	fcall	_I2C_Send
  1529                           
  1530                           ;LE7-3.c: 70: I2C_Stop();
  1531  0C52  160A  158A  20FF  120A  158A  	fcall	_I2C_Stop
  1532                           
  1533                           ;LE7-3.c: 71: delay_ms(200);
  1534  0C57  30C8               	movlw	200
  1535  0C58  00F0               	movwf	delay_ms@cnt
  1536  0C59  3000               	movlw	0
  1537  0C5A  00F1               	movwf	delay_ms@cnt+1
  1538  0C5B  120A  158A  2000  120A  158A  	fcall	_delay_ms
  1539                           
  1540                           ;LE7-3.c: 74: temp = 0x00;
  1541  0C60  1683               	bsf	3,5	;RP0=1, select bank1
  1542  0C61  1303               	bcf	3,6	;RP1=0, select bank1
  1543  0C62  01DD               	clrf	main@temp^(0+128)
  1544                           
  1545                           ;LE7-3.c: 75: I2C_Start();
  1546  0C63  160A  158A  20F8  120A  158A  	fcall	_I2C_Start
  1547                           
  1548                           ;LE7-3.c: 76: I2C_Send(0x80);
  1549  0C68  3080               	movlw	128
  1550  0C69  160A  158A  210E  120A  158A  	fcall	_I2C_Send
  1551                           
  1552                           ;LE7-3.c: 77: I2C_Send(0xE3);
  1553  0C6E  30E3               	movlw	227
  1554  0C6F  160A  158A  210E  120A  158A  	fcall	_I2C_Send
  1555                           
  1556                           ;LE7-3.c: 78: I2C_RepeatedStart();
  1557  0C74  160A  158A  20F1  120A  158A  	fcall	_I2C_RepeatedStart
  1558                           
  1559                           ;LE7-3.c: 79: I2C_Send(0x81);
  1560  0C79  3081               	movlw	129
  1561  0C7A  160A  158A  210E  120A  158A  	fcall	_I2C_Send
  1562                           
  1563                           ;LE7-3.c: 80: T_temp = I2C_Receive(1);
  1564  0C7F  3001               	movlw	1
  1565  0C80  160A  158A  21EC  120A  158A  	fcall	_I2C_Receive
  1566  0C85  1683               	bsf	3,5	;RP0=1, select bank1
  1567  0C86  1303               	bcf	3,6	;RP1=0, select bank1
  1568  0C87  00CC               	movwf	??_main^(0+128)
  1569  0C88  01CD               	clrf	(??_main^(0+128)+1)
  1570  0C89  084C               	movf	??_main^(0+128),w
  1571  0C8A  00DB               	movwf	main@T_temp^(0+128)
  1572  0C8B  084D               	movf	(??_main+1)^(0+128),w
  1573  0C8C  00DC               	movwf	(main@T_temp+1)^(0+128)
  1574                           
  1575                           ;LE7-3.c: 81: temp = I2C_Receive(0);
  1576  0C8D  3000               	movlw	0
  1577  0C8E  160A  158A  21EC  120A  158A  	fcall	_I2C_Receive
  1578  0C93  1683               	bsf	3,5	;RP0=1, select bank1
  1579  0C94  1303               	bcf	3,6	;RP1=0, select bank1
  1580  0C95  00CC               	movwf	??_main^(0+128)
  1581  0C96  084C               	movf	??_main^(0+128),w
  1582  0C97  00DD               	movwf	main@temp^(0+128)
  1583                           
  1584                           ;LE7-3.c: 82: I2C_Stop();
  1585  0C98  160A  158A  20FF  120A  158A  	fcall	_I2C_Stop
  1586                           
  1587                           ;LE7-3.c: 83: delay_ms(200);
  1588  0C9D  30C8               	movlw	200
  1589  0C9E  00F0               	movwf	delay_ms@cnt
  1590  0C9F  3000               	movlw	0
  1591  0CA0  00F1               	movwf	delay_ms@cnt+1
  1592  0CA1  120A  158A  2000  120A  158A  	fcall	_delay_ms
  1593                           
  1594                           ;LE7-3.c: 85: T_temp = T_temp << 6;
  1595  0CA6  1683               	bsf	3,5	;RP0=1, select bank1
  1596  0CA7  1303               	bcf	3,6	;RP1=0, select bank1
  1597  0CA8  085C               	movf	(main@T_temp+1)^(0+128),w
  1598  0CA9  00CD               	movwf	(??_main^(0+128)+1)
  1599  0CAA  085B               	movf	main@T_temp^(0+128),w
  1600  0CAB  00CC               	movwf	??_main^(0+128)
  1601  0CAC  3006               	movlw	6
  1602  0CAD  00FF               	movwf	127
  1603  0CAE                     u4635:	
  1604  0CAE  1003               	clrc
  1605  0CAF  0DCC               	rlf	??_main^(0+128),f
  1606  0CB0  0DCD               	rlf	(??_main^(0+128)+1),f
  1607  0CB1  0BFF               	decfsz	127,f
  1608  0CB2  2CAE               	goto	u4635
  1609  0CB3  084C               	movf	??_main^(0+128),w
  1610  0CB4  00DB               	movwf	main@T_temp^(0+128)
  1611  0CB5  084D               	movf	(??_main+1)^(0+128),w
  1612  0CB6  00DC               	movwf	(main@T_temp+1)^(0+128)
  1613                           
  1614                           ;LE7-3.c: 86: temp = temp >> 2;
  1615  0CB7  085D               	movf	main@temp^(0+128),w
  1616  0CB8  00CC               	movwf	??_main^(0+128)
  1617  0CB9  3002               	movlw	2
  1618  0CBA                     u4645:	
  1619  0CBA  1003               	clrc
  1620  0CBB  0CCC               	rrf	??_main^(0+128),f
  1621  0CBC  3EFF               	addlw	-1
  1622  0CBD  1D03               	skipz
  1623  0CBE  2CBA               	goto	u4645
  1624  0CBF  084C               	movf	??_main^(0+128),w
  1625  0CC0  00CD               	movwf	(??_main+1)^(0+128)
  1626  0CC1  084D               	movf	(??_main+1)^(0+128),w
  1627  0CC2  00DD               	movwf	main@temp^(0+128)
  1628                           
  1629                           ;LE7-3.c: 87: T_temp = T_temp | temp;
  1630  0CC3  085B               	movf	main@T_temp^(0+128),w
  1631  0CC4  045D               	iorwf	main@temp^(0+128),w
  1632  0CC5  00DB               	movwf	main@T_temp^(0+128)
  1633  0CC6  085C               	movf	(main@T_temp+1)^(0+128),w
  1634  0CC7  00DC               	movwf	(main@T_temp+1)^(0+128)
  1635                           
  1636                           ;LE7-3.c: 89: t = (float)(-46.85+(175.72*((float)T_temp/(float)res)));
  1637  0CC8  3066               	movlw	102
  1638  0CC9  1283               	bcf	3,5	;RP0=0, select bank0
  1639  0CCA  1303               	bcf	3,6	;RP1=0, select bank0
  1640  0CCB  00D0               	movwf	___ftadd@f1
  1641  0CCC  303B               	movlw	59
  1642  0CCD  00D1               	movwf	___ftadd@f1+1
  1643  0CCE  30C2               	movlw	194
  1644  0CCF  00D2               	movwf	___ftadd@f1+2
  1645  0CD0  30B8               	movlw	184
  1646  0CD1  00B0               	movwf	___ftmul@f1
  1647  0CD2  302F               	movlw	47
  1648  0CD3  00B1               	movwf	___ftmul@f1+1
  1649  0CD4  3043               	movlw	67
  1650  0CD5  00B2               	movwf	___ftmul@f1+2
  1651  0CD6  1683               	bsf	3,5	;RP0=1, select bank1
  1652  0CD7  1303               	bcf	3,6	;RP1=0, select bank1
  1653  0CD8  0858               	movf	(main@res+1)^(0+128),w
  1654  0CD9  01F9               	clrf	___awtoft@c+1
  1655  0CDA  07F9               	addwf	___awtoft@c+1,f
  1656  0CDB  0857               	movf	main@res^(0+128),w
  1657  0CDC  01F8               	clrf	___awtoft@c
  1658  0CDD  07F8               	addwf	___awtoft@c,f
  1659  0CDE  160A  158A  21A8  120A  158A  	fcall	___awtoft
  1660  0CE3  0878               	movf	?___awtoft,w
  1661  0CE4  1283               	bcf	3,5	;RP0=0, select bank0
  1662  0CE5  1303               	bcf	3,6	;RP1=0, select bank0
  1663  0CE6  00A0               	movwf	___ftdiv@f2
  1664  0CE7  0879               	movf	?___awtoft+1,w
  1665  0CE8  00A1               	movwf	___ftdiv@f2+1
  1666  0CE9  087A               	movf	?___awtoft+2,w
  1667  0CEA  00A2               	movwf	___ftdiv@f2+2
  1668  0CEB  1683               	bsf	3,5	;RP0=1, select bank1
  1669  0CEC  1303               	bcf	3,6	;RP1=0, select bank1
  1670  0CED  085C               	movf	(main@T_temp+1)^(0+128),w
  1671  0CEE  01F9               	clrf	___lwtoft@c+1
  1672  0CEF  07F9               	addwf	___lwtoft@c+1,f
  1673  0CF0  085B               	movf	main@T_temp^(0+128),w
  1674  0CF1  01F8               	clrf	___lwtoft@c
  1675  0CF2  07F8               	addwf	___lwtoft@c,f
  1676  0CF3  160A  158A  2158  120A  158A  	fcall	___lwtoft
  1677  0CF8  0878               	movf	?___lwtoft,w
  1678  0CF9  1283               	bcf	3,5	;RP0=0, select bank0
  1679  0CFA  1303               	bcf	3,6	;RP1=0, select bank0
  1680  0CFB  00A3               	movwf	___ftdiv@f1
  1681  0CFC  0879               	movf	?___lwtoft+1,w
  1682  0CFD  00A4               	movwf	___ftdiv@f1+1
  1683  0CFE  087A               	movf	?___lwtoft+2,w
  1684  0CFF  00A5               	movwf	___ftdiv@f1+2
  1685  0D00  160A  118A  20D0  120A  158A  	fcall	___ftdiv
  1686  0D05  1283               	bcf	3,5	;RP0=0, select bank0
  1687  0D06  1303               	bcf	3,6	;RP1=0, select bank0
  1688  0D07  0820               	movf	?___ftdiv,w
  1689  0D08  00B3               	movwf	___ftmul@f2
  1690  0D09  0821               	movf	?___ftdiv+1,w
  1691  0D0A  00B4               	movwf	___ftmul@f2+1
  1692  0D0B  0822               	movf	?___ftdiv+2,w
  1693  0D0C  00B5               	movwf	___ftmul@f2+2
  1694  0D0D  160A  118A  231B  120A  158A  	fcall	___ftmul
  1695  0D12  1283               	bcf	3,5	;RP0=0, select bank0
  1696  0D13  1303               	bcf	3,6	;RP1=0, select bank0
  1697  0D14  0830               	movf	?___ftmul,w
  1698  0D15  00D3               	movwf	___ftadd@f2
  1699  0D16  0831               	movf	?___ftmul+1,w
  1700  0D17  00D4               	movwf	___ftadd@f2+1
  1701  0D18  0832               	movf	?___ftmul+2,w
  1702  0D19  00D5               	movwf	___ftadd@f2+2
  1703  0D1A  120A  158A  2028  120A  158A  	fcall	___ftadd
  1704  0D1F  1283               	bcf	3,5	;RP0=0, select bank0
  1705  0D20  1303               	bcf	3,6	;RP1=0, select bank0
  1706  0D21  0850               	movf	?___ftadd,w
  1707  0D22  1683               	bsf	3,5	;RP0=1, select bank1
  1708  0D23  1303               	bcf	3,6	;RP1=0, select bank1
  1709  0D24  00D1               	movwf	main@t^(0+128)
  1710  0D25  1283               	bcf	3,5	;RP0=0, select bank0
  1711  0D26  1303               	bcf	3,6	;RP1=0, select bank0
  1712  0D27  0851               	movf	?___ftadd+1,w
  1713  0D28  1683               	bsf	3,5	;RP0=1, select bank1
  1714  0D29  1303               	bcf	3,6	;RP1=0, select bank1
  1715  0D2A  00D2               	movwf	(main@t+1)^(0+128)
  1716  0D2B  1283               	bcf	3,5	;RP0=0, select bank0
  1717  0D2C  1303               	bcf	3,6	;RP1=0, select bank0
  1718  0D2D  0852               	movf	?___ftadd+2,w
  1719  0D2E  1683               	bsf	3,5	;RP0=1, select bank1
  1720  0D2F  1303               	bcf	3,6	;RP1=0, select bank1
  1721  0D30  00D3               	movwf	(main@t+2)^(0+128)
  1722                           
  1723                           ;LE7-3.c: 90: T = t;
  1724  0D31  0851               	movf	main@t^(0+128),w
  1725  0D32  00DE               	movwf	_T^(0+128)
  1726  0D33  0852               	movf	(main@t+1)^(0+128),w
  1727  0D34  00DF               	movwf	(_T+1)^(0+128)
  1728  0D35  0853               	movf	(main@t+2)^(0+128),w
  1729  0D36  00E0               	movwf	(_T+2)^(0+128)
  1730                           
  1731                           ;LE7-3.c: 93: I2C_Start();
  1732  0D37  160A  158A  20F8  120A  158A  	fcall	_I2C_Start
  1733                           
  1734                           ;LE7-3.c: 94: I2C_Send(0x80);
  1735  0D3C  3080               	movlw	128
  1736  0D3D  160A  158A  210E  120A  158A  	fcall	_I2C_Send
  1737                           
  1738                           ;LE7-3.c: 95: I2C_Send(0xE5);
  1739  0D42  30E5               	movlw	229
  1740  0D43  160A  158A  210E  120A  158A  	fcall	_I2C_Send
  1741                           
  1742                           ;LE7-3.c: 96: I2C_Stop();
  1743  0D48  160A  158A  20FF  120A  158A  	fcall	_I2C_Stop
  1744                           
  1745                           ;LE7-3.c: 97: delay_ms(200);
  1746  0D4D  30C8               	movlw	200
  1747  0D4E  00F0               	movwf	delay_ms@cnt
  1748  0D4F  3000               	movlw	0
  1749  0D50  00F1               	movwf	delay_ms@cnt+1
  1750  0D51  120A  158A  2000  120A  158A  	fcall	_delay_ms
  1751                           
  1752                           ;LE7-3.c: 99: dispRH();
  1753  0D56  160A  158A  2528  120A  158A  	fcall	_dispRH
  1754                           
  1755                           ;LE7-3.c: 100: dispT();
  1756  0D5B  160A  158A  2639  120A  158A  	fcall	_dispT
  1757                           
  1758                           ;LE7-3.c: 101: }
  1759  0D60  2B4B               	goto	l3393
  1760  0D61                     __end_of_main:	
  1761                           
  1762                           	psect	text1
  1763  1520                     __ptext1:	
  1764 ;; *************** function _pow *****************
  1765 ;; Defined at:
  1766 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\pow.c"
  1767 ;; Parameters:    Size  Location     Type
  1768 ;;  x               3   15[BANK1 ] unsigned char 
  1769 ;;  y               3   18[BANK1 ] unsigned char 
  1770 ;; Auto vars:     Size  Location     Type
  1771 ;;  yi              4   28[BANK1 ] unsigned long 
  1772 ;;  sign            1   27[BANK1 ] unsigned char 
  1773 ;; Return value:  Size  Location     Type
  1774 ;;                  3   15[BANK1 ] unsigned char 
  1775 ;; Registers used:
  1776 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1777 ;; Tracked objects:
  1778 ;;		On entry : 0/0
  1779 ;;		On exit  : 0/0
  1780 ;;		Unchanged: 0/0
  1781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1782 ;;      Params:         0       0       6       0       0
  1783 ;;      Locals:         0       0      11       0       0
  1784 ;;      Temps:          0       1       0       0       0
  1785 ;;      Totals:         0       1      17       0       0
  1786 ;;Total ram usage:       18 bytes
  1787 ;; Hardware stack levels used:    1
  1788 ;; Hardware stack levels required when called:    4
  1789 ;; This function calls:
  1790 ;;		___ftge
  1791 ;;		___ftmul
  1792 ;;		___ftneg
  1793 ;;		___fttol
  1794 ;;		___lltoft
  1795 ;;		_exp
  1796 ;;		_log
  1797 ;; This function is called by:
  1798 ;;		_main
  1799 ;; This function uses a non-reentrant model
  1800 ;;
  1801                           
  1802                           
  1803                           ;psect for function _pow
  1804  1520                     _pow:	
  1805                           
  1806                           ;incstack = 0
  1807                           ; Regs used in _pow: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1808  1520  1683               	bsf	3,5	;RP0=1, select bank1
  1809  1521  1303               	bcf	3,6	;RP1=0, select bank1
  1810  1522  01BB               	clrf	pow@sign^(0+128)
  1811  1523  0831               	movf	(pow@x+2)^(0+128),w
  1812  1524  0430               	iorwf	(pow@x+1)^(0+128),w
  1813  1525  042F               	iorwf	pow@x^(0+128),w
  1814  1526  1D03               	skipz
  1815  1527  2D4A               	goto	l3269
  1816  1528  3000               	movlw	0
  1817  1529  00F0               	movwf	___ftge@ff1
  1818  152A  3000               	movlw	0
  1819  152B  00F1               	movwf	___ftge@ff1+1
  1820  152C  3000               	movlw	0
  1821  152D  00F2               	movwf	___ftge@ff1+2
  1822  152E  0832               	movf	pow@y^(0+128),w
  1823  152F  00F3               	movwf	___ftge@ff2
  1824  1530  0833               	movf	(pow@y+1)^(0+128),w
  1825  1531  00F4               	movwf	___ftge@ff2+1
  1826  1532  0834               	movf	(pow@y+2)^(0+128),w
  1827  1533  00F5               	movwf	___ftge@ff2+2
  1828  1534  160A  158A  232F  160A  118A  	fcall	___ftge
  1829  1539  1C03               	btfss	3,0
  1830  153A  2D41               	goto	l706
  1831  153B  3021               	movlw	33
  1832  153C  1683               	bsf	3,5	;RP0=1, select bank1
  1833  153D  1303               	bcf	3,6	;RP1=0, select bank1
  1834  153E  00E3               	movwf	_errno^(0+128)
  1835  153F  3000               	movlw	0
  1836  1540  00E4               	movwf	(_errno^(0+128)+1)
  1837  1541                     l706:	
  1838  1541  3000               	movlw	0
  1839  1542  1683               	bsf	3,5	;RP0=1, select bank1
  1840  1543  1303               	bcf	3,6	;RP1=0, select bank1
  1841  1544  00AF               	movwf	?_pow^(0+128)
  1842  1545  3000               	movlw	0
  1843  1546  00B0               	movwf	(?_pow+1)^(0+128)
  1844  1547  3000               	movlw	0
  1845  1548  00B1               	movwf	(?_pow+2)^(0+128)
  1846  1549  0008               	return
  1847  154A                     l3269:	
  1848  154A  0834               	movf	(pow@y+2)^(0+128),w
  1849  154B  0433               	iorwf	(pow@y+1)^(0+128),w
  1850  154C  0432               	iorwf	pow@y^(0+128),w
  1851  154D  1D03               	skipz
  1852  154E  2D56               	goto	l3275
  1853  154F  3000               	movlw	0
  1854  1550  00AF               	movwf	?_pow^(0+128)
  1855  1551  3080               	movlw	128
  1856  1552  00B0               	movwf	(?_pow+1)^(0+128)
  1857  1553  303F               	movlw	63
  1858  1554  00B1               	movwf	(?_pow+2)^(0+128)
  1859  1555  0008               	return
  1860  1556                     l3275:	
  1861  1556  082F               	movf	pow@x^(0+128),w
  1862  1557  00F0               	movwf	___ftge@ff1
  1863  1558  0830               	movf	(pow@x+1)^(0+128),w
  1864  1559  00F1               	movwf	___ftge@ff1+1
  1865  155A  0831               	movf	(pow@x+2)^(0+128),w
  1866  155B  00F2               	movwf	___ftge@ff1+2
  1867  155C  3000               	movlw	0
  1868  155D  00F3               	movwf	___ftge@ff2
  1869  155E  3000               	movlw	0
  1870  155F  00F4               	movwf	___ftge@ff2+1
  1871  1560  3000               	movlw	0
  1872  1561  00F5               	movwf	___ftge@ff2+2
  1873  1562  160A  158A  232F  160A  118A  	fcall	___ftge
  1874  1567  1803               	btfsc	3,0
  1875  1568  2DDA               	goto	l3287
  1876  1569  1683               	bsf	3,5	;RP0=1, select bank1
  1877  156A  1303               	bcf	3,6	;RP1=0, select bank1
  1878  156B  0832               	movf	pow@y^(0+128),w
  1879  156C  1283               	bcf	3,5	;RP0=0, select bank0
  1880  156D  1303               	bcf	3,6	;RP1=0, select bank0
  1881  156E  00C9               	movwf	___fttol@f1
  1882  156F  1683               	bsf	3,5	;RP0=1, select bank1
  1883  1570  1303               	bcf	3,6	;RP1=0, select bank1
  1884  1571  0833               	movf	(pow@y+1)^(0+128),w
  1885  1572  1283               	bcf	3,5	;RP0=0, select bank0
  1886  1573  1303               	bcf	3,6	;RP1=0, select bank0
  1887  1574  00CA               	movwf	___fttol@f1+1
  1888  1575  1683               	bsf	3,5	;RP0=1, select bank1
  1889  1576  1303               	bcf	3,6	;RP1=0, select bank1
  1890  1577  0834               	movf	(pow@y+2)^(0+128),w
  1891  1578  1283               	bcf	3,5	;RP0=0, select bank0
  1892  1579  1303               	bcf	3,6	;RP1=0, select bank0
  1893  157A  00CB               	movwf	___fttol@f1+2
  1894  157B  160A  158A  25AB  160A  118A  	fcall	___fttol
  1895  1580  1283               	bcf	3,5	;RP0=0, select bank0
  1896  1581  1303               	bcf	3,6	;RP1=0, select bank0
  1897  1582  084C               	movf	?___fttol+3,w
  1898  1583  1683               	bsf	3,5	;RP0=1, select bank1
  1899  1584  1303               	bcf	3,6	;RP1=0, select bank1
  1900  1585  00BF               	movwf	(pow@yi+3)^(0+128)
  1901  1586  1283               	bcf	3,5	;RP0=0, select bank0
  1902  1587  1303               	bcf	3,6	;RP1=0, select bank0
  1903  1588  084B               	movf	?___fttol+2,w
  1904  1589  1683               	bsf	3,5	;RP0=1, select bank1
  1905  158A  1303               	bcf	3,6	;RP1=0, select bank1
  1906  158B  00BE               	movwf	(pow@yi+2)^(0+128)
  1907  158C  1283               	bcf	3,5	;RP0=0, select bank0
  1908  158D  1303               	bcf	3,6	;RP1=0, select bank0
  1909  158E  084A               	movf	?___fttol+1,w
  1910  158F  1683               	bsf	3,5	;RP0=1, select bank1
  1911  1590  1303               	bcf	3,6	;RP1=0, select bank1
  1912  1591  00BD               	movwf	(pow@yi+1)^(0+128)
  1913  1592  1283               	bcf	3,5	;RP0=0, select bank0
  1914  1593  1303               	bcf	3,6	;RP1=0, select bank0
  1915  1594  0849               	movf	?___fttol,w
  1916  1595  1683               	bsf	3,5	;RP0=1, select bank1
  1917  1596  1303               	bcf	3,6	;RP1=0, select bank1
  1918  1597  00BC               	movwf	pow@yi^(0+128)
  1919  1598  083F               	movf	(pow@yi+3)^(0+128),w
  1920  1599  00FB               	movwf	___lltoft@c+3
  1921  159A  083E               	movf	(pow@yi+2)^(0+128),w
  1922  159B  00FA               	movwf	___lltoft@c+2
  1923  159C  083D               	movf	(pow@yi+1)^(0+128),w
  1924  159D  00F9               	movwf	___lltoft@c+1
  1925  159E  083C               	movf	pow@yi^(0+128),w
  1926  159F  00F8               	movwf	___lltoft@c
  1927  15A0  120A  118A  200B  160A  118A  	fcall	___lltoft
  1928  15A5  1683               	bsf	3,5	;RP0=1, select bank1
  1929  15A6  1303               	bcf	3,6	;RP1=0, select bank1
  1930  15A7  0834               	movf	(pow@y+2)^(0+128),w
  1931  15A8  067A               	xorwf	?___lltoft+2,w
  1932  15A9  1D03               	skipz
  1933  15AA  2DB1               	goto	u4565
  1934  15AB  0833               	movf	(pow@y+1)^(0+128),w
  1935  15AC  0679               	xorwf	?___lltoft+1,w
  1936  15AD  1D03               	skipz
  1937  15AE  2DB1               	goto	u4565
  1938  15AF  0832               	movf	pow@y^(0+128),w
  1939  15B0  0678               	xorwf	?___lltoft,w
  1940  15B1                     u4565:	
  1941  15B1  1903               	skipnz
  1942  15B2  2DBE               	goto	l3283
  1943  15B3  3021               	movlw	33
  1944  15B4  00E3               	movwf	_errno^(0+128)
  1945  15B5  3000               	movlw	0
  1946  15B6  00E4               	movwf	(_errno^(0+128)+1)
  1947  15B7  3000               	movlw	0
  1948  15B8  00AF               	movwf	?_pow^(0+128)
  1949  15B9  3000               	movlw	0
  1950  15BA  00B0               	movwf	(?_pow+1)^(0+128)
  1951  15BB  3000               	movlw	0
  1952  15BC  00B1               	movwf	(?_pow+2)^(0+128)
  1953  15BD  0008               	return
  1954  15BE                     l3283:	
  1955  15BE  083C               	movf	pow@yi^(0+128),w
  1956  15BF  3901               	andlw	1
  1957  15C0  1283               	bcf	3,5	;RP0=0, select bank0
  1958  15C1  1303               	bcf	3,6	;RP1=0, select bank0
  1959  15C2  00EF               	movwf	??_pow
  1960  15C3  086F               	movf	??_pow,w
  1961  15C4  1683               	bsf	3,5	;RP0=1, select bank1
  1962  15C5  1303               	bcf	3,6	;RP1=0, select bank1
  1963  15C6  00BB               	movwf	pow@sign^(0+128)
  1964  15C7  082F               	movf	pow@x^(0+128),w
  1965  15C8  00F0               	movwf	___ftneg@f1
  1966  15C9  0830               	movf	(pow@x+1)^(0+128),w
  1967  15CA  00F1               	movwf	___ftneg@f1+1
  1968  15CB  0831               	movf	(pow@x+2)^(0+128),w
  1969  15CC  00F2               	movwf	___ftneg@f1+2
  1970  15CD  120A  118A  2003  160A  118A  	fcall	___ftneg
  1971  15D2  0870               	movf	?___ftneg,w
  1972  15D3  1683               	bsf	3,5	;RP0=1, select bank1
  1973  15D4  1303               	bcf	3,6	;RP1=0, select bank1
  1974  15D5  00AF               	movwf	pow@x^(0+128)
  1975  15D6  0871               	movf	?___ftneg+1,w
  1976  15D7  00B0               	movwf	(pow@x+1)^(0+128)
  1977  15D8  0872               	movf	?___ftneg+2,w
  1978  15D9  00B1               	movwf	(pow@x+2)^(0+128)
  1979  15DA                     l3287:	
  1980  15DA  1683               	bsf	3,5	;RP0=1, select bank1
  1981  15DB  1303               	bcf	3,6	;RP1=0, select bank1
  1982  15DC  082F               	movf	pow@x^(0+128),w
  1983  15DD  1283               	bcf	3,5	;RP0=0, select bank0
  1984  15DE  1303               	bcf	3,6	;RP1=0, select bank0
  1985  15DF  00E7               	movwf	log@x
  1986  15E0  1683               	bsf	3,5	;RP0=1, select bank1
  1987  15E1  1303               	bcf	3,6	;RP1=0, select bank1
  1988  15E2  0830               	movf	(pow@x+1)^(0+128),w
  1989  15E3  1283               	bcf	3,5	;RP0=0, select bank0
  1990  15E4  1303               	bcf	3,6	;RP1=0, select bank0
  1991  15E5  00E8               	movwf	log@x+1
  1992  15E6  1683               	bsf	3,5	;RP0=1, select bank1
  1993  15E7  1303               	bcf	3,6	;RP1=0, select bank1
  1994  15E8  0831               	movf	(pow@x+2)^(0+128),w
  1995  15E9  1283               	bcf	3,5	;RP0=0, select bank0
  1996  15EA  1303               	bcf	3,6	;RP1=0, select bank0
  1997  15EB  00E9               	movwf	log@x+2
  1998  15EC  160A  118A  224B  160A  118A  	fcall	_log
  1999  15F1  1283               	bcf	3,5	;RP0=0, select bank0
  2000  15F2  1303               	bcf	3,6	;RP1=0, select bank0
  2001  15F3  0867               	movf	?_log,w
  2002  15F4  1683               	bsf	3,5	;RP0=1, select bank1
  2003  15F5  1303               	bcf	3,6	;RP1=0, select bank1
  2004  15F6  00B5               	movwf	_pow$701^(0+128)
  2005  15F7  1283               	bcf	3,5	;RP0=0, select bank0
  2006  15F8  1303               	bcf	3,6	;RP1=0, select bank0
  2007  15F9  0868               	movf	?_log+1,w
  2008  15FA  1683               	bsf	3,5	;RP0=1, select bank1
  2009  15FB  1303               	bcf	3,6	;RP1=0, select bank1
  2010  15FC  00B6               	movwf	(_pow$701+1)^(0+128)
  2011  15FD  1283               	bcf	3,5	;RP0=0, select bank0
  2012  15FE  1303               	bcf	3,6	;RP1=0, select bank0
  2013  15FF  0869               	movf	?_log+2,w
  2014  1600  1683               	bsf	3,5	;RP0=1, select bank1
  2015  1601  1303               	bcf	3,6	;RP1=0, select bank1
  2016  1602  00B7               	movwf	(_pow$701+2)^(0+128)
  2017  1603  0832               	movf	pow@y^(0+128),w
  2018  1604  1283               	bcf	3,5	;RP0=0, select bank0
  2019  1605  1303               	bcf	3,6	;RP1=0, select bank0
  2020  1606  00B0               	movwf	___ftmul@f1
  2021  1607  1683               	bsf	3,5	;RP0=1, select bank1
  2022  1608  1303               	bcf	3,6	;RP1=0, select bank1
  2023  1609  0833               	movf	(pow@y+1)^(0+128),w
  2024  160A  1283               	bcf	3,5	;RP0=0, select bank0
  2025  160B  1303               	bcf	3,6	;RP1=0, select bank0
  2026  160C  00B1               	movwf	___ftmul@f1+1
  2027  160D  1683               	bsf	3,5	;RP0=1, select bank1
  2028  160E  1303               	bcf	3,6	;RP1=0, select bank1
  2029  160F  0834               	movf	(pow@y+2)^(0+128),w
  2030  1610  1283               	bcf	3,5	;RP0=0, select bank0
  2031  1611  1303               	bcf	3,6	;RP1=0, select bank0
  2032  1612  00B2               	movwf	___ftmul@f1+2
  2033  1613  1683               	bsf	3,5	;RP0=1, select bank1
  2034  1614  1303               	bcf	3,6	;RP1=0, select bank1
  2035  1615  0835               	movf	_pow$701^(0+128),w
  2036  1616  1283               	bcf	3,5	;RP0=0, select bank0
  2037  1617  1303               	bcf	3,6	;RP1=0, select bank0
  2038  1618  00B3               	movwf	___ftmul@f2
  2039  1619  1683               	bsf	3,5	;RP0=1, select bank1
  2040  161A  1303               	bcf	3,6	;RP1=0, select bank1
  2041  161B  0836               	movf	(_pow$701+1)^(0+128),w
  2042  161C  1283               	bcf	3,5	;RP0=0, select bank0
  2043  161D  1303               	bcf	3,6	;RP1=0, select bank0
  2044  161E  00B4               	movwf	___ftmul@f2+1
  2045  161F  1683               	bsf	3,5	;RP0=1, select bank1
  2046  1620  1303               	bcf	3,6	;RP1=0, select bank1
  2047  1621  0837               	movf	(_pow$701+2)^(0+128),w
  2048  1622  1283               	bcf	3,5	;RP0=0, select bank0
  2049  1623  1303               	bcf	3,6	;RP1=0, select bank0
  2050  1624  00B5               	movwf	___ftmul@f2+2
  2051  1625  160A  118A  231B  160A  118A  	fcall	___ftmul
  2052  162A  1283               	bcf	3,5	;RP0=0, select bank0
  2053  162B  1303               	bcf	3,6	;RP1=0, select bank0
  2054  162C  0830               	movf	?___ftmul,w
  2055  162D  1683               	bsf	3,5	;RP0=1, select bank1
  2056  162E  1303               	bcf	3,6	;RP1=0, select bank1
  2057  162F  00B8               	movwf	_pow$702^(0+128)
  2058  1630  1283               	bcf	3,5	;RP0=0, select bank0
  2059  1631  1303               	bcf	3,6	;RP1=0, select bank0
  2060  1632  0831               	movf	?___ftmul+1,w
  2061  1633  1683               	bsf	3,5	;RP0=1, select bank1
  2062  1634  1303               	bcf	3,6	;RP1=0, select bank1
  2063  1635  00B9               	movwf	(_pow$702+1)^(0+128)
  2064  1636  1283               	bcf	3,5	;RP0=0, select bank0
  2065  1637  1303               	bcf	3,6	;RP1=0, select bank0
  2066  1638  0832               	movf	?___ftmul+2,w
  2067  1639  1683               	bsf	3,5	;RP0=1, select bank1
  2068  163A  1303               	bcf	3,6	;RP1=0, select bank1
  2069  163B  00BA               	movwf	(_pow$702+2)^(0+128)
  2070  163C  0838               	movf	_pow$702^(0+128),w
  2071  163D  00A3               	movwf	exp@x^(0+128)
  2072  163E  0839               	movf	(_pow$702+1)^(0+128),w
  2073  163F  00A4               	movwf	(exp@x+1)^(0+128)
  2074  1640  083A               	movf	(_pow$702+2)^(0+128),w
  2075  1641  00A5               	movwf	(exp@x+2)^(0+128)
  2076  1642  120A  158A  2131  160A  118A  	fcall	_exp
  2077  1647  1683               	bsf	3,5	;RP0=1, select bank1
  2078  1648  1303               	bcf	3,6	;RP1=0, select bank1
  2079  1649  0823               	movf	?_exp^(0+128),w
  2080  164A  00AF               	movwf	pow@x^(0+128)
  2081  164B  0824               	movf	(?_exp+1)^(0+128),w
  2082  164C  00B0               	movwf	(pow@x+1)^(0+128)
  2083  164D  0825               	movf	(?_exp+2)^(0+128),w
  2084  164E  00B1               	movwf	(pow@x+2)^(0+128)
  2085  164F  083B               	movf	pow@sign^(0+128),w
  2086  1650  1903               	btfsc	3,2
  2087  1651  0008               	return
  2088  1652  082F               	movf	pow@x^(0+128),w
  2089  1653  00F0               	movwf	___ftneg@f1
  2090  1654  0830               	movf	(pow@x+1)^(0+128),w
  2091  1655  00F1               	movwf	___ftneg@f1+1
  2092  1656  0831               	movf	(pow@x+2)^(0+128),w
  2093  1657  00F2               	movwf	___ftneg@f1+2
  2094  1658  120A  118A  2003   	fcall	___ftneg
  2095  165B  0870               	movf	?___ftneg,w
  2096  165C  1683               	bsf	3,5	;RP0=1, select bank1
  2097  165D  1303               	bcf	3,6	;RP1=0, select bank1
  2098  165E  00AF               	movwf	?_pow^(0+128)
  2099  165F  0871               	movf	?___ftneg+1,w
  2100  1660  00B0               	movwf	(?_pow+1)^(0+128)
  2101  1661  0872               	movf	?___ftneg+2,w
  2102  1662  00B1               	movwf	(?_pow+2)^(0+128)
  2103  1663  0008               	return
  2104  1664                     __end_of_pow:	
  2105                           
  2106                           	psect	text2
  2107  124B                     __ptext2:	
  2108 ;; *************** function _log *****************
  2109 ;; Defined at:
  2110 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\log.c"
  2111 ;; Parameters:    Size  Location     Type
  2112 ;;  x               3   71[BANK0 ] unsigned char 
  2113 ;; Auto vars:     Size  Location     Type
  2114 ;;  exponent        2   75[BANK0 ] int 
  2115 ;; Return value:  Size  Location     Type
  2116 ;;                  3   71[BANK0 ] int 
  2117 ;; Registers used:
  2118 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2119 ;; Tracked objects:
  2120 ;;		On entry : 0/0
  2121 ;;		On exit  : 0/0
  2122 ;;		Unchanged: 0/0
  2123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2124 ;;      Params:         0       3       0       0       0
  2125 ;;      Locals:         0       2       0       0       0
  2126 ;;      Temps:          0       1       0       0       0
  2127 ;;      Totals:         0       6       0       0       0
  2128 ;;Total ram usage:        6 bytes
  2129 ;; Hardware stack levels used:    1
  2130 ;; Hardware stack levels required when called:    3
  2131 ;; This function calls:
  2132 ;;		___awtoft
  2133 ;;		___ftadd
  2134 ;;		___ftge
  2135 ;;		___ftmul
  2136 ;;		_eval_poly
  2137 ;;		_frexp
  2138 ;; This function is called by:
  2139 ;;		_pow
  2140 ;; This function uses a non-reentrant model
  2141 ;;
  2142                           
  2143                           
  2144                           ;psect for function _log
  2145  124B                     _log:	
  2146                           
  2147                           ;incstack = 0
  2148                           ; Regs used in _log: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2149  124B  1283               	bcf	3,5	;RP0=0, select bank0
  2150  124C  1303               	bcf	3,6	;RP1=0, select bank0
  2151  124D  0867               	movf	log@x,w
  2152  124E  00F0               	movwf	___ftge@ff1
  2153  124F  0868               	movf	log@x+1,w
  2154  1250  00F1               	movwf	___ftge@ff1+1
  2155  1251  0869               	movf	log@x+2,w
  2156  1252  00F2               	movwf	___ftge@ff1+2
  2157  1253  3000               	movlw	0
  2158  1254  00F3               	movwf	___ftge@ff2
  2159  1255  3000               	movlw	0
  2160  1256  00F4               	movwf	___ftge@ff2+1
  2161  1257  3000               	movlw	0
  2162  1258  00F5               	movwf	___ftge@ff2+2
  2163  1259  160A  158A  232F  160A  118A  	fcall	___ftge
  2164  125E  1803               	btfsc	3,0
  2165  125F  2A6F               	goto	l3189
  2166  1260  3021               	movlw	33
  2167  1261  1683               	bsf	3,5	;RP0=1, select bank1
  2168  1262  1303               	bcf	3,6	;RP1=0, select bank1
  2169  1263  00E3               	movwf	_errno^(0+128)
  2170  1264  3000               	movlw	0
  2171  1265  00E4               	movwf	(_errno^(0+128)+1)
  2172  1266  3000               	movlw	0
  2173  1267  1283               	bcf	3,5	;RP0=0, select bank0
  2174  1268  1303               	bcf	3,6	;RP1=0, select bank0
  2175  1269  00E7               	movwf	?_log
  2176  126A  3000               	movlw	0
  2177  126B  00E8               	movwf	?_log+1
  2178  126C  3000               	movlw	0
  2179  126D  00E9               	movwf	?_log+2
  2180  126E  0008               	return
  2181  126F                     l3189:	
  2182  126F  1283               	bcf	3,5	;RP0=0, select bank0
  2183  1270  1303               	bcf	3,6	;RP1=0, select bank0
  2184  1271  0869               	movf	log@x+2,w
  2185  1272  0468               	iorwf	log@x+1,w
  2186  1273  0467               	iorwf	log@x,w
  2187  1274  1D03               	skipz
  2188  1275  2A85               	goto	l3195
  2189  1276  3022               	movlw	34
  2190  1277  1683               	bsf	3,5	;RP0=1, select bank1
  2191  1278  1303               	bcf	3,6	;RP1=0, select bank1
  2192  1279  00E3               	movwf	_errno^(0+128)
  2193  127A  3000               	movlw	0
  2194  127B  00E4               	movwf	(_errno^(0+128)+1)
  2195  127C  3000               	movlw	0
  2196  127D  1283               	bcf	3,5	;RP0=0, select bank0
  2197  127E  1303               	bcf	3,6	;RP1=0, select bank0
  2198  127F  00E7               	movwf	?_log
  2199  1280  3000               	movlw	0
  2200  1281  00E8               	movwf	?_log+1
  2201  1282  3000               	movlw	0
  2202  1283  00E9               	movwf	?_log+2
  2203  1284  0008               	return
  2204  1285                     l3195:	
  2205  1285  3000               	movlw	0
  2206  1286  00D0               	movwf	___ftadd@f1
  2207  1287  3080               	movlw	128
  2208  1288  00D1               	movwf	___ftadd@f1+1
  2209  1289  30BF               	movlw	191
  2210  128A  00D2               	movwf	___ftadd@f1+2
  2211  128B  3000               	movlw	0
  2212  128C  00B0               	movwf	___ftmul@f1
  2213  128D  3000               	movlw	0
  2214  128E  00B1               	movwf	___ftmul@f1+1
  2215  128F  3040               	movlw	64
  2216  1290  00B2               	movwf	___ftmul@f1+2
  2217  1291  306B               	movlw	log@exponent& (0+255)
  2218  1292  00EA               	movwf	??_log
  2219  1293  086A               	movf	??_log,w
  2220  1294  00F3               	movwf	frexp@eptr
  2221  1295  0867               	movf	log@x,w
  2222  1296  00F0               	movwf	frexp@value
  2223  1297  0868               	movf	log@x+1,w
  2224  1298  00F1               	movwf	frexp@value+1
  2225  1299  0869               	movf	log@x+2,w
  2226  129A  00F2               	movwf	frexp@value+2
  2227  129B  160A  158A  2212  160A  118A  	fcall	_frexp
  2228  12A0  0870               	movf	?_frexp,w
  2229  12A1  1283               	bcf	3,5	;RP0=0, select bank0
  2230  12A2  1303               	bcf	3,6	;RP1=0, select bank0
  2231  12A3  00B3               	movwf	___ftmul@f2
  2232  12A4  0871               	movf	?_frexp+1,w
  2233  12A5  00B4               	movwf	___ftmul@f2+1
  2234  12A6  0872               	movf	?_frexp+2,w
  2235  12A7  00B5               	movwf	___ftmul@f2+2
  2236  12A8  160A  118A  231B  160A  118A  	fcall	___ftmul
  2237  12AD  1283               	bcf	3,5	;RP0=0, select bank0
  2238  12AE  1303               	bcf	3,6	;RP1=0, select bank0
  2239  12AF  0830               	movf	?___ftmul,w
  2240  12B0  00D3               	movwf	___ftadd@f2
  2241  12B1  0831               	movf	?___ftmul+1,w
  2242  12B2  00D4               	movwf	___ftadd@f2+1
  2243  12B3  0832               	movf	?___ftmul+2,w
  2244  12B4  00D5               	movwf	___ftadd@f2+2
  2245  12B5  120A  158A  2028  160A  118A  	fcall	___ftadd
  2246  12BA  1283               	bcf	3,5	;RP0=0, select bank0
  2247  12BB  1303               	bcf	3,6	;RP1=0, select bank0
  2248  12BC  0850               	movf	?___ftadd,w
  2249  12BD  00E7               	movwf	log@x
  2250  12BE  0851               	movf	?___ftadd+1,w
  2251  12BF  00E8               	movwf	log@x+1
  2252  12C0  0852               	movf	?___ftadd+2,w
  2253  12C1  00E9               	movwf	log@x+2
  2254  12C2  30FF               	movlw	255
  2255  12C3  07EB               	addwf	log@exponent,f
  2256  12C4  1803               	skipnc
  2257  12C5  0AEC               	incf	log@exponent+1,f
  2258  12C6  30FF               	movlw	255
  2259  12C7  07EC               	addwf	log@exponent+1,f
  2260  12C8  0867               	movf	log@x,w
  2261  12C9  00DD               	movwf	eval_poly@x
  2262  12CA  0868               	movf	log@x+1,w
  2263  12CB  00DE               	movwf	eval_poly@x+1
  2264  12CC  0869               	movf	log@x+2,w
  2265  12CD  00DF               	movwf	eval_poly@x+2
  2266  12CE  3095               	movlw	(log@coeff-__stringbase)& (0+255)
  2267  12CF  00EA               	movwf	??_log
  2268  12D0  086A               	movf	??_log,w
  2269  12D1  00E0               	movwf	eval_poly@d
  2270  12D2  3008               	movlw	8
  2271  12D3  00E1               	movwf	eval_poly@n
  2272  12D4  3000               	movlw	0
  2273  12D5  00E2               	movwf	eval_poly@n+1
  2274  12D6  160A  158A  24AF  160A  118A  	fcall	_eval_poly
  2275  12DB  1283               	bcf	3,5	;RP0=0, select bank0
  2276  12DC  1303               	bcf	3,6	;RP1=0, select bank0
  2277  12DD  085D               	movf	?_eval_poly,w
  2278  12DE  00E7               	movwf	log@x
  2279  12DF  085E               	movf	?_eval_poly+1,w
  2280  12E0  00E8               	movwf	log@x+1
  2281  12E1  085F               	movf	?_eval_poly+2,w
  2282  12E2  00E9               	movwf	log@x+2
  2283  12E3  0867               	movf	log@x,w
  2284  12E4  00D0               	movwf	___ftadd@f1
  2285  12E5  0868               	movf	log@x+1,w
  2286  12E6  00D1               	movwf	___ftadd@f1+1
  2287  12E7  0869               	movf	log@x+2,w
  2288  12E8  00D2               	movwf	___ftadd@f1+2
  2289  12E9  3072               	movlw	114
  2290  12EA  00B0               	movwf	___ftmul@f1
  2291  12EB  3031               	movlw	49
  2292  12EC  00B1               	movwf	___ftmul@f1+1
  2293  12ED  303F               	movlw	63
  2294  12EE  00B2               	movwf	___ftmul@f1+2
  2295  12EF  086C               	movf	log@exponent+1,w
  2296  12F0  01F9               	clrf	___awtoft@c+1
  2297  12F1  07F9               	addwf	___awtoft@c+1,f
  2298  12F2  086B               	movf	log@exponent,w
  2299  12F3  01F8               	clrf	___awtoft@c
  2300  12F4  07F8               	addwf	___awtoft@c,f
  2301  12F5  160A  158A  21A8  160A  118A  	fcall	___awtoft
  2302  12FA  0878               	movf	?___awtoft,w
  2303  12FB  1283               	bcf	3,5	;RP0=0, select bank0
  2304  12FC  1303               	bcf	3,6	;RP1=0, select bank0
  2305  12FD  00B3               	movwf	___ftmul@f2
  2306  12FE  0879               	movf	?___awtoft+1,w
  2307  12FF  00B4               	movwf	___ftmul@f2+1
  2308  1300  087A               	movf	?___awtoft+2,w
  2309  1301  00B5               	movwf	___ftmul@f2+2
  2310  1302  160A  118A  231B  160A  118A  	fcall	___ftmul
  2311  1307  1283               	bcf	3,5	;RP0=0, select bank0
  2312  1308  1303               	bcf	3,6	;RP1=0, select bank0
  2313  1309  0830               	movf	?___ftmul,w
  2314  130A  00D3               	movwf	___ftadd@f2
  2315  130B  0831               	movf	?___ftmul+1,w
  2316  130C  00D4               	movwf	___ftadd@f2+1
  2317  130D  0832               	movf	?___ftmul+2,w
  2318  130E  00D5               	movwf	___ftadd@f2+2
  2319  130F  120A  158A  2028   	fcall	___ftadd
  2320  1312  1283               	bcf	3,5	;RP0=0, select bank0
  2321  1313  1303               	bcf	3,6	;RP1=0, select bank0
  2322  1314  0850               	movf	?___ftadd,w
  2323  1315  00E7               	movwf	?_log
  2324  1316  0851               	movf	?___ftadd+1,w
  2325  1317  00E8               	movwf	?_log+1
  2326  1318  0852               	movf	?___ftadd+2,w
  2327  1319  00E9               	movwf	?_log+2
  2328  131A  0008               	return
  2329  131B                     __end_of_log:	
  2330                           
  2331                           	psect	text3
  2332  0931                     __ptext3:	
  2333 ;; *************** function _exp *****************
  2334 ;; Defined at:
  2335 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\exp.c"
  2336 ;; Parameters:    Size  Location     Type
  2337 ;;  x               3    3[BANK1 ] int 
  2338 ;; Auto vars:     Size  Location     Type
  2339 ;;  exponent        2   12[BANK1 ] int 
  2340 ;;  sign            1   14[BANK1 ] unsigned char 
  2341 ;; Return value:  Size  Location     Type
  2342 ;;                  3    3[BANK1 ] unsigned char 
  2343 ;; Registers used:
  2344 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2345 ;; Tracked objects:
  2346 ;;		On entry : 0/0
  2347 ;;		On exit  : 0/0
  2348 ;;		Unchanged: 0/0
  2349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2350 ;;      Params:         0       0       3       0       0
  2351 ;;      Locals:         0       0       9       0       0
  2352 ;;      Temps:          0       1       0       0       0
  2353 ;;      Totals:         0       1      12       0       0
  2354 ;;Total ram usage:       13 bytes
  2355 ;; Hardware stack levels used:    1
  2356 ;; Hardware stack levels required when called:    3
  2357 ;; This function calls:
  2358 ;;		___awtoft
  2359 ;;		___ftdiv
  2360 ;;		___ftge
  2361 ;;		___ftmul
  2362 ;;		___ftneg
  2363 ;;		___ftsub
  2364 ;;		___fttol
  2365 ;;		_eval_poly
  2366 ;;		_floor
  2367 ;;		_ldexp
  2368 ;; This function is called by:
  2369 ;;		_pow
  2370 ;; This function uses a non-reentrant model
  2371 ;;
  2372                           
  2373                           
  2374                           ;psect for function _exp
  2375  0931                     _exp:	
  2376                           
  2377                           ;incstack = 0
  2378                           ; Regs used in _exp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2379  0931  1683               	bsf	3,5	;RP0=1, select bank1
  2380  0932  1303               	bcf	3,6	;RP1=0, select bank1
  2381  0933  0825               	movf	(exp@x+2)^(0+128),w
  2382  0934  0424               	iorwf	(exp@x+1)^(0+128),w
  2383  0935  0423               	iorwf	exp@x^(0+128),w
  2384  0936  1D03               	skipz
  2385  0937  293F               	goto	l3211
  2386  0938  3000               	movlw	0
  2387  0939  00A3               	movwf	?_exp^(0+128)
  2388  093A  3080               	movlw	128
  2389  093B  00A4               	movwf	(?_exp+1)^(0+128)
  2390  093C  303F               	movlw	63
  2391  093D  00A5               	movwf	(?_exp+2)^(0+128)
  2392  093E  0008               	return
  2393  093F                     l3211:	
  2394  093F  3072               	movlw	114
  2395  0940  00F0               	movwf	___ftge@ff1
  2396  0941  3031               	movlw	49
  2397  0942  00F1               	movwf	___ftge@ff1+1
  2398  0943  3044               	movlw	68
  2399  0944  00F2               	movwf	___ftge@ff1+2
  2400  0945  0823               	movf	exp@x^(0+128),w
  2401  0946  00F3               	movwf	___ftge@ff2
  2402  0947  0824               	movf	(exp@x+1)^(0+128),w
  2403  0948  00F4               	movwf	___ftge@ff2+1
  2404  0949  0825               	movf	(exp@x+2)^(0+128),w
  2405  094A  00F5               	movwf	___ftge@ff2+2
  2406  094B  160A  158A  232F  120A  158A  	fcall	___ftge
  2407  0950  1803               	btfsc	3,0
  2408  0951  295F               	goto	l3221
  2409  0952  3022               	movlw	34
  2410  0953  1683               	bsf	3,5	;RP0=1, select bank1
  2411  0954  1303               	bcf	3,6	;RP1=0, select bank1
  2412  0955  00E3               	movwf	_errno^(0+128)
  2413  0956  3000               	movlw	0
  2414  0957  00E4               	movwf	(_errno^(0+128)+1)
  2415  0958  30FF               	movlw	255
  2416  0959  00A3               	movwf	?_exp^(0+128)
  2417  095A  307F               	movlw	127
  2418  095B  00A4               	movwf	(?_exp+1)^(0+128)
  2419  095C  307F               	movlw	127
  2420  095D  00A5               	movwf	(?_exp+2)^(0+128)
  2421  095E  0008               	return
  2422  095F                     l3221:	
  2423  095F  1683               	bsf	3,5	;RP0=1, select bank1
  2424  0960  1303               	bcf	3,6	;RP1=0, select bank1
  2425  0961  0823               	movf	exp@x^(0+128),w
  2426  0962  00F0               	movwf	___ftge@ff1
  2427  0963  0824               	movf	(exp@x+1)^(0+128),w
  2428  0964  00F1               	movwf	___ftge@ff1+1
  2429  0965  0825               	movf	(exp@x+2)^(0+128),w
  2430  0966  00F2               	movwf	___ftge@ff1+2
  2431  0967  3049               	movlw	73
  2432  0968  00F3               	movwf	___ftge@ff2
  2433  0969  303A               	movlw	58
  2434  096A  00F4               	movwf	___ftge@ff2+1
  2435  096B  30C4               	movlw	196
  2436  096C  00F5               	movwf	___ftge@ff2+2
  2437  096D  160A  158A  232F  120A  158A  	fcall	___ftge
  2438  0972  1803               	btfsc	3,0
  2439  0973  2981               	goto	l3227
  2440  0974  3022               	movlw	34
  2441  0975  1683               	bsf	3,5	;RP0=1, select bank1
  2442  0976  1303               	bcf	3,6	;RP1=0, select bank1
  2443  0977  00E3               	movwf	_errno^(0+128)
  2444  0978  3000               	movlw	0
  2445  0979  00E4               	movwf	(_errno^(0+128)+1)
  2446  097A  3000               	movlw	0
  2447  097B  00A3               	movwf	?_exp^(0+128)
  2448  097C  3000               	movlw	0
  2449  097D  00A4               	movwf	(?_exp+1)^(0+128)
  2450  097E  3000               	movlw	0
  2451  097F  00A5               	movwf	(?_exp+2)^(0+128)
  2452  0980  0008               	return
  2453  0981                     l3227:	
  2454  0981  1683               	bsf	3,5	;RP0=1, select bank1
  2455  0982  1303               	bcf	3,6	;RP1=0, select bank1
  2456  0983  0823               	movf	exp@x^(0+128),w
  2457  0984  00F0               	movwf	___ftge@ff1
  2458  0985  0824               	movf	(exp@x+1)^(0+128),w
  2459  0986  00F1               	movwf	___ftge@ff1+1
  2460  0987  0825               	movf	(exp@x+2)^(0+128),w
  2461  0988  00F2               	movwf	___ftge@ff1+2
  2462  0989  3000               	movlw	0
  2463  098A  00F3               	movwf	___ftge@ff2
  2464  098B  3000               	movlw	0
  2465  098C  00F4               	movwf	___ftge@ff2+1
  2466  098D  3000               	movlw	0
  2467  098E  00F5               	movwf	___ftge@ff2+2
  2468  098F  160A  158A  232F  120A  158A  	fcall	___ftge
  2469  0994  3000               	movlw	0
  2470  0995  1C03               	btfss	3,0
  2471  0996  3001               	movlw	1
  2472  0997  1283               	bcf	3,5	;RP0=0, select bank0
  2473  0998  1303               	bcf	3,6	;RP1=0, select bank0
  2474  0999  00EE               	movwf	??_exp
  2475  099A  086E               	movf	??_exp,w
  2476  099B  1683               	bsf	3,5	;RP0=1, select bank1
  2477  099C  1303               	bcf	3,6	;RP1=0, select bank1
  2478  099D  00AE               	movwf	exp@sign^(0+128)
  2479  099E  082E               	movf	exp@sign^(0+128),w
  2480  099F  1903               	btfsc	3,2
  2481  09A0  29B4               	goto	l3233
  2482  09A1  0823               	movf	exp@x^(0+128),w
  2483  09A2  00F0               	movwf	___ftneg@f1
  2484  09A3  0824               	movf	(exp@x+1)^(0+128),w
  2485  09A4  00F1               	movwf	___ftneg@f1+1
  2486  09A5  0825               	movf	(exp@x+2)^(0+128),w
  2487  09A6  00F2               	movwf	___ftneg@f1+2
  2488  09A7  120A  118A  2003  120A  158A  	fcall	___ftneg
  2489  09AC  0870               	movf	?___ftneg,w
  2490  09AD  1683               	bsf	3,5	;RP0=1, select bank1
  2491  09AE  1303               	bcf	3,6	;RP1=0, select bank1
  2492  09AF  00A3               	movwf	exp@x^(0+128)
  2493  09B0  0871               	movf	?___ftneg+1,w
  2494  09B1  00A4               	movwf	(exp@x+1)^(0+128)
  2495  09B2  0872               	movf	?___ftneg+2,w
  2496  09B3  00A5               	movwf	(exp@x+2)^(0+128)
  2497  09B4                     l3233:	
  2498  09B4  30AA               	movlw	170
  2499  09B5  1283               	bcf	3,5	;RP0=0, select bank0
  2500  09B6  1303               	bcf	3,6	;RP1=0, select bank0
  2501  09B7  00B0               	movwf	___ftmul@f1
  2502  09B8  30B8               	movlw	184
  2503  09B9  00B1               	movwf	___ftmul@f1+1
  2504  09BA  303F               	movlw	63
  2505  09BB  00B2               	movwf	___ftmul@f1+2
  2506  09BC  1683               	bsf	3,5	;RP0=1, select bank1
  2507  09BD  1303               	bcf	3,6	;RP1=0, select bank1
  2508  09BE  0823               	movf	exp@x^(0+128),w
  2509  09BF  1283               	bcf	3,5	;RP0=0, select bank0
  2510  09C0  1303               	bcf	3,6	;RP1=0, select bank0
  2511  09C1  00B3               	movwf	___ftmul@f2
  2512  09C2  1683               	bsf	3,5	;RP0=1, select bank1
  2513  09C3  1303               	bcf	3,6	;RP1=0, select bank1
  2514  09C4  0824               	movf	(exp@x+1)^(0+128),w
  2515  09C5  1283               	bcf	3,5	;RP0=0, select bank0
  2516  09C6  1303               	bcf	3,6	;RP1=0, select bank0
  2517  09C7  00B4               	movwf	___ftmul@f2+1
  2518  09C8  1683               	bsf	3,5	;RP0=1, select bank1
  2519  09C9  1303               	bcf	3,6	;RP1=0, select bank1
  2520  09CA  0825               	movf	(exp@x+2)^(0+128),w
  2521  09CB  1283               	bcf	3,5	;RP0=0, select bank0
  2522  09CC  1303               	bcf	3,6	;RP1=0, select bank0
  2523  09CD  00B5               	movwf	___ftmul@f2+2
  2524  09CE  160A  118A  231B  120A  158A  	fcall	___ftmul
  2525  09D3  1283               	bcf	3,5	;RP0=0, select bank0
  2526  09D4  1303               	bcf	3,6	;RP1=0, select bank0
  2527  09D5  0830               	movf	?___ftmul,w
  2528  09D6  1683               	bsf	3,5	;RP0=1, select bank1
  2529  09D7  1303               	bcf	3,6	;RP1=0, select bank1
  2530  09D8  00A3               	movwf	exp@x^(0+128)
  2531  09D9  1283               	bcf	3,5	;RP0=0, select bank0
  2532  09DA  1303               	bcf	3,6	;RP1=0, select bank0
  2533  09DB  0831               	movf	?___ftmul+1,w
  2534  09DC  1683               	bsf	3,5	;RP0=1, select bank1
  2535  09DD  1303               	bcf	3,6	;RP1=0, select bank1
  2536  09DE  00A4               	movwf	(exp@x+1)^(0+128)
  2537  09DF  1283               	bcf	3,5	;RP0=0, select bank0
  2538  09E0  1303               	bcf	3,6	;RP1=0, select bank0
  2539  09E1  0832               	movf	?___ftmul+2,w
  2540  09E2  1683               	bsf	3,5	;RP0=1, select bank1
  2541  09E3  1303               	bcf	3,6	;RP1=0, select bank1
  2542  09E4  00A5               	movwf	(exp@x+2)^(0+128)
  2543  09E5  0823               	movf	exp@x^(0+128),w
  2544  09E6  1283               	bcf	3,5	;RP0=0, select bank0
  2545  09E7  1303               	bcf	3,6	;RP1=0, select bank0
  2546  09E8  00DF               	movwf	floor@x
  2547  09E9  1683               	bsf	3,5	;RP0=1, select bank1
  2548  09EA  1303               	bcf	3,6	;RP1=0, select bank1
  2549  09EB  0824               	movf	(exp@x+1)^(0+128),w
  2550  09EC  1283               	bcf	3,5	;RP0=0, select bank0
  2551  09ED  1303               	bcf	3,6	;RP1=0, select bank0
  2552  09EE  00E0               	movwf	floor@x+1
  2553  09EF  1683               	bsf	3,5	;RP0=1, select bank1
  2554  09F0  1303               	bcf	3,6	;RP1=0, select bank1
  2555  09F1  0825               	movf	(exp@x+2)^(0+128),w
  2556  09F2  1283               	bcf	3,5	;RP0=0, select bank0
  2557  09F3  1303               	bcf	3,6	;RP1=0, select bank0
  2558  09F4  00E1               	movwf	floor@x+2
  2559  09F5  160A  158A  26CE  120A  158A  	fcall	_floor
  2560  09FA  1283               	bcf	3,5	;RP0=0, select bank0
  2561  09FB  1303               	bcf	3,6	;RP1=0, select bank0
  2562  09FC  085F               	movf	?_floor,w
  2563  09FD  1683               	bsf	3,5	;RP0=1, select bank1
  2564  09FE  1303               	bcf	3,6	;RP1=0, select bank1
  2565  09FF  00A6               	movwf	_exp$703^(0+128)
  2566  0A00  1283               	bcf	3,5	;RP0=0, select bank0
  2567  0A01  1303               	bcf	3,6	;RP1=0, select bank0
  2568  0A02  0860               	movf	?_floor+1,w
  2569  0A03  1683               	bsf	3,5	;RP0=1, select bank1
  2570  0A04  1303               	bcf	3,6	;RP1=0, select bank1
  2571  0A05  00A7               	movwf	(_exp$703+1)^(0+128)
  2572  0A06  1283               	bcf	3,5	;RP0=0, select bank0
  2573  0A07  1303               	bcf	3,6	;RP1=0, select bank0
  2574  0A08  0861               	movf	?_floor+2,w
  2575  0A09  1683               	bsf	3,5	;RP0=1, select bank1
  2576  0A0A  1303               	bcf	3,6	;RP1=0, select bank1
  2577  0A0B  00A8               	movwf	(_exp$703+2)^(0+128)
  2578  0A0C  0826               	movf	_exp$703^(0+128),w
  2579  0A0D  1283               	bcf	3,5	;RP0=0, select bank0
  2580  0A0E  1303               	bcf	3,6	;RP1=0, select bank0
  2581  0A0F  00C9               	movwf	___fttol@f1
  2582  0A10  1683               	bsf	3,5	;RP0=1, select bank1
  2583  0A11  1303               	bcf	3,6	;RP1=0, select bank1
  2584  0A12  0827               	movf	(_exp$703+1)^(0+128),w
  2585  0A13  1283               	bcf	3,5	;RP0=0, select bank0
  2586  0A14  1303               	bcf	3,6	;RP1=0, select bank0
  2587  0A15  00CA               	movwf	___fttol@f1+1
  2588  0A16  1683               	bsf	3,5	;RP0=1, select bank1
  2589  0A17  1303               	bcf	3,6	;RP1=0, select bank1
  2590  0A18  0828               	movf	(_exp$703+2)^(0+128),w
  2591  0A19  1283               	bcf	3,5	;RP0=0, select bank0
  2592  0A1A  1303               	bcf	3,6	;RP1=0, select bank0
  2593  0A1B  00CB               	movwf	___fttol@f1+2
  2594  0A1C  160A  158A  25AB  120A  158A  	fcall	___fttol
  2595  0A21  1283               	bcf	3,5	;RP0=0, select bank0
  2596  0A22  1303               	bcf	3,6	;RP1=0, select bank0
  2597  0A23  084A               	movf	?___fttol+1,w
  2598  0A24  1683               	bsf	3,5	;RP0=1, select bank1
  2599  0A25  1303               	bcf	3,6	;RP1=0, select bank1
  2600  0A26  01AD               	clrf	(exp@exponent+1)^(0+128)
  2601  0A27  07AD               	addwf	(exp@exponent+1)^(0+128),f
  2602  0A28  1283               	bcf	3,5	;RP0=0, select bank0
  2603  0A29  1303               	bcf	3,6	;RP1=0, select bank0
  2604  0A2A  0849               	movf	?___fttol,w
  2605  0A2B  1683               	bsf	3,5	;RP0=1, select bank1
  2606  0A2C  1303               	bcf	3,6	;RP1=0, select bank1
  2607  0A2D  01AC               	clrf	exp@exponent^(0+128)
  2608  0A2E  07AC               	addwf	exp@exponent^(0+128),f
  2609  0A2F  082D               	movf	(exp@exponent+1)^(0+128),w
  2610  0A30  01F9               	clrf	___awtoft@c+1
  2611  0A31  07F9               	addwf	___awtoft@c+1,f
  2612  0A32  082C               	movf	exp@exponent^(0+128),w
  2613  0A33  01F8               	clrf	___awtoft@c
  2614  0A34  07F8               	addwf	___awtoft@c,f
  2615  0A35  160A  158A  21A8  120A  158A  	fcall	___awtoft
  2616  0A3A  0878               	movf	?___awtoft,w
  2617  0A3B  1283               	bcf	3,5	;RP0=0, select bank0
  2618  0A3C  1303               	bcf	3,6	;RP1=0, select bank0
  2619  0A3D  00DD               	movwf	___ftsub@f2
  2620  0A3E  0879               	movf	?___awtoft+1,w
  2621  0A3F  00DE               	movwf	___ftsub@f2+1
  2622  0A40  087A               	movf	?___awtoft+2,w
  2623  0A41  00DF               	movwf	___ftsub@f2+2
  2624  0A42  1683               	bsf	3,5	;RP0=1, select bank1
  2625  0A43  1303               	bcf	3,6	;RP1=0, select bank1
  2626  0A44  0823               	movf	exp@x^(0+128),w
  2627  0A45  1283               	bcf	3,5	;RP0=0, select bank0
  2628  0A46  1303               	bcf	3,6	;RP1=0, select bank0
  2629  0A47  00E0               	movwf	___ftsub@f1
  2630  0A48  1683               	bsf	3,5	;RP0=1, select bank1
  2631  0A49  1303               	bcf	3,6	;RP1=0, select bank1
  2632  0A4A  0824               	movf	(exp@x+1)^(0+128),w
  2633  0A4B  1283               	bcf	3,5	;RP0=0, select bank0
  2634  0A4C  1303               	bcf	3,6	;RP1=0, select bank0
  2635  0A4D  00E1               	movwf	___ftsub@f1+1
  2636  0A4E  1683               	bsf	3,5	;RP0=1, select bank1
  2637  0A4F  1303               	bcf	3,6	;RP1=0, select bank1
  2638  0A50  0825               	movf	(exp@x+2)^(0+128),w
  2639  0A51  1283               	bcf	3,5	;RP0=0, select bank0
  2640  0A52  1303               	bcf	3,6	;RP1=0, select bank0
  2641  0A53  00E2               	movwf	___ftsub@f1+2
  2642  0A54  160A  158A  216C  120A  158A  	fcall	___ftsub
  2643  0A59  1283               	bcf	3,5	;RP0=0, select bank0
  2644  0A5A  1303               	bcf	3,6	;RP1=0, select bank0
  2645  0A5B  085D               	movf	?___ftsub,w
  2646  0A5C  1683               	bsf	3,5	;RP0=1, select bank1
  2647  0A5D  1303               	bcf	3,6	;RP1=0, select bank1
  2648  0A5E  00A3               	movwf	exp@x^(0+128)
  2649  0A5F  1283               	bcf	3,5	;RP0=0, select bank0
  2650  0A60  1303               	bcf	3,6	;RP1=0, select bank0
  2651  0A61  085E               	movf	?___ftsub+1,w
  2652  0A62  1683               	bsf	3,5	;RP0=1, select bank1
  2653  0A63  1303               	bcf	3,6	;RP1=0, select bank1
  2654  0A64  00A4               	movwf	(exp@x+1)^(0+128)
  2655  0A65  1283               	bcf	3,5	;RP0=0, select bank0
  2656  0A66  1303               	bcf	3,6	;RP1=0, select bank0
  2657  0A67  085F               	movf	?___ftsub+2,w
  2658  0A68  1683               	bsf	3,5	;RP0=1, select bank1
  2659  0A69  1303               	bcf	3,6	;RP1=0, select bank1
  2660  0A6A  00A5               	movwf	(exp@x+2)^(0+128)
  2661  0A6B  0823               	movf	exp@x^(0+128),w
  2662  0A6C  1283               	bcf	3,5	;RP0=0, select bank0
  2663  0A6D  1303               	bcf	3,6	;RP1=0, select bank0
  2664  0A6E  00DD               	movwf	eval_poly@x
  2665  0A6F  1683               	bsf	3,5	;RP0=1, select bank1
  2666  0A70  1303               	bcf	3,6	;RP1=0, select bank1
  2667  0A71  0824               	movf	(exp@x+1)^(0+128),w
  2668  0A72  1283               	bcf	3,5	;RP0=0, select bank0
  2669  0A73  1303               	bcf	3,6	;RP1=0, select bank0
  2670  0A74  00DE               	movwf	eval_poly@x+1
  2671  0A75  1683               	bsf	3,5	;RP0=1, select bank1
  2672  0A76  1303               	bcf	3,6	;RP1=0, select bank1
  2673  0A77  0825               	movf	(exp@x+2)^(0+128),w
  2674  0A78  1283               	bcf	3,5	;RP0=0, select bank0
  2675  0A79  1303               	bcf	3,6	;RP1=0, select bank0
  2676  0A7A  00DF               	movwf	eval_poly@x+2
  2677  0A7B  3077               	movlw	(exp@coeff-__stringbase)& (0+255)
  2678  0A7C  00EE               	movwf	??_exp
  2679  0A7D  086E               	movf	??_exp,w
  2680  0A7E  00E0               	movwf	eval_poly@d
  2681  0A7F  3009               	movlw	9
  2682  0A80  00E1               	movwf	eval_poly@n
  2683  0A81  3000               	movlw	0
  2684  0A82  00E2               	movwf	eval_poly@n+1
  2685  0A83  160A  158A  24AF  120A  158A  	fcall	_eval_poly
  2686  0A88  1283               	bcf	3,5	;RP0=0, select bank0
  2687  0A89  1303               	bcf	3,6	;RP1=0, select bank0
  2688  0A8A  085D               	movf	?_eval_poly,w
  2689  0A8B  00E7               	movwf	ldexp@value
  2690  0A8C  085E               	movf	?_eval_poly+1,w
  2691  0A8D  00E8               	movwf	ldexp@value+1
  2692  0A8E  085F               	movf	?_eval_poly+2,w
  2693  0A8F  00E9               	movwf	ldexp@value+2
  2694  0A90  1683               	bsf	3,5	;RP0=1, select bank1
  2695  0A91  1303               	bcf	3,6	;RP1=0, select bank1
  2696  0A92  082D               	movf	(exp@exponent+1)^(0+128),w
  2697  0A93  1283               	bcf	3,5	;RP0=0, select bank0
  2698  0A94  1303               	bcf	3,6	;RP1=0, select bank0
  2699  0A95  01EB               	clrf	ldexp@newexp+1
  2700  0A96  07EB               	addwf	ldexp@newexp+1,f
  2701  0A97  1683               	bsf	3,5	;RP0=1, select bank1
  2702  0A98  1303               	bcf	3,6	;RP1=0, select bank1
  2703  0A99  082C               	movf	exp@exponent^(0+128),w
  2704  0A9A  1283               	bcf	3,5	;RP0=0, select bank0
  2705  0A9B  1303               	bcf	3,6	;RP1=0, select bank0
  2706  0A9C  01EA               	clrf	ldexp@newexp
  2707  0A9D  07EA               	addwf	ldexp@newexp,f
  2708  0A9E  160A  158A  2767  120A  158A  	fcall	_ldexp
  2709  0AA3  1283               	bcf	3,5	;RP0=0, select bank0
  2710  0AA4  1303               	bcf	3,6	;RP1=0, select bank0
  2711  0AA5  0867               	movf	?_ldexp,w
  2712  0AA6  1683               	bsf	3,5	;RP0=1, select bank1
  2713  0AA7  1303               	bcf	3,6	;RP1=0, select bank1
  2714  0AA8  00A3               	movwf	exp@x^(0+128)
  2715  0AA9  1283               	bcf	3,5	;RP0=0, select bank0
  2716  0AAA  1303               	bcf	3,6	;RP1=0, select bank0
  2717  0AAB  0868               	movf	?_ldexp+1,w
  2718  0AAC  1683               	bsf	3,5	;RP0=1, select bank1
  2719  0AAD  1303               	bcf	3,6	;RP1=0, select bank1
  2720  0AAE  00A4               	movwf	(exp@x+1)^(0+128)
  2721  0AAF  1283               	bcf	3,5	;RP0=0, select bank0
  2722  0AB0  1303               	bcf	3,6	;RP1=0, select bank0
  2723  0AB1  0869               	movf	?_ldexp+2,w
  2724  0AB2  1683               	bsf	3,5	;RP0=1, select bank1
  2725  0AB3  1303               	bcf	3,6	;RP1=0, select bank1
  2726  0AB4  00A5               	movwf	(exp@x+2)^(0+128)
  2727  0AB5  082E               	movf	exp@sign^(0+128),w
  2728  0AB6  1903               	btfsc	3,2
  2729  0AB7  0008               	return
  2730  0AB8  30FF               	movlw	255
  2731  0AB9  00A9               	movwf	_exp$484^(0+128)
  2732  0ABA  307F               	movlw	127
  2733  0ABB  00AA               	movwf	(_exp$484+1)^(0+128)
  2734  0ABC  307F               	movlw	127
  2735  0ABD  00AB               	movwf	(_exp$484+2)^(0+128)
  2736  0ABE  0825               	movf	(exp@x+2)^(0+128),w
  2737  0ABF  062B               	xorwf	(_exp$484+2)^(0+128),w
  2738  0AC0  1D03               	skipz
  2739  0AC1  2AC8               	goto	u4515
  2740  0AC2  0824               	movf	(exp@x+1)^(0+128),w
  2741  0AC3  062A               	xorwf	(_exp$484+1)^(0+128),w
  2742  0AC4  1D03               	skipz
  2743  0AC5  2AC8               	goto	u4515
  2744  0AC6  0823               	movf	exp@x^(0+128),w
  2745  0AC7  0629               	xorwf	_exp$484^(0+128),w
  2746  0AC8                     u4515:	
  2747  0AC8  1D03               	skipz
  2748  0AC9  2AD1               	goto	l3255
  2749  0ACA  3000               	movlw	0
  2750  0ACB  00A3               	movwf	?_exp^(0+128)
  2751  0ACC  3000               	movlw	0
  2752  0ACD  00A4               	movwf	(?_exp+1)^(0+128)
  2753  0ACE  3000               	movlw	0
  2754  0ACF  00A5               	movwf	(?_exp+2)^(0+128)
  2755  0AD0  0008               	return
  2756  0AD1                     l3255:	
  2757  0AD1  0823               	movf	exp@x^(0+128),w
  2758  0AD2  1283               	bcf	3,5	;RP0=0, select bank0
  2759  0AD3  1303               	bcf	3,6	;RP1=0, select bank0
  2760  0AD4  00A0               	movwf	___ftdiv@f2
  2761  0AD5  1683               	bsf	3,5	;RP0=1, select bank1
  2762  0AD6  1303               	bcf	3,6	;RP1=0, select bank1
  2763  0AD7  0824               	movf	(exp@x+1)^(0+128),w
  2764  0AD8  1283               	bcf	3,5	;RP0=0, select bank0
  2765  0AD9  1303               	bcf	3,6	;RP1=0, select bank0
  2766  0ADA  00A1               	movwf	___ftdiv@f2+1
  2767  0ADB  1683               	bsf	3,5	;RP0=1, select bank1
  2768  0ADC  1303               	bcf	3,6	;RP1=0, select bank1
  2769  0ADD  0825               	movf	(exp@x+2)^(0+128),w
  2770  0ADE  1283               	bcf	3,5	;RP0=0, select bank0
  2771  0ADF  1303               	bcf	3,6	;RP1=0, select bank0
  2772  0AE0  00A2               	movwf	___ftdiv@f2+2
  2773  0AE1  3000               	movlw	0
  2774  0AE2  00A3               	movwf	___ftdiv@f1
  2775  0AE3  3080               	movlw	128
  2776  0AE4  00A4               	movwf	___ftdiv@f1+1
  2777  0AE5  303F               	movlw	63
  2778  0AE6  00A5               	movwf	___ftdiv@f1+2
  2779  0AE7  160A  118A  20D0   	fcall	___ftdiv
  2780  0AEA  1283               	bcf	3,5	;RP0=0, select bank0
  2781  0AEB  1303               	bcf	3,6	;RP1=0, select bank0
  2782  0AEC  0820               	movf	?___ftdiv,w
  2783  0AED  1683               	bsf	3,5	;RP0=1, select bank1
  2784  0AEE  1303               	bcf	3,6	;RP1=0, select bank1
  2785  0AEF  00A3               	movwf	?_exp^(0+128)
  2786  0AF0  1283               	bcf	3,5	;RP0=0, select bank0
  2787  0AF1  1303               	bcf	3,6	;RP1=0, select bank0
  2788  0AF2  0821               	movf	?___ftdiv+1,w
  2789  0AF3  1683               	bsf	3,5	;RP0=1, select bank1
  2790  0AF4  1303               	bcf	3,6	;RP1=0, select bank1
  2791  0AF5  00A4               	movwf	(?_exp+1)^(0+128)
  2792  0AF6  1283               	bcf	3,5	;RP0=0, select bank0
  2793  0AF7  1303               	bcf	3,6	;RP1=0, select bank0
  2794  0AF8  0822               	movf	?___ftdiv+2,w
  2795  0AF9  1683               	bsf	3,5	;RP0=1, select bank1
  2796  0AFA  1303               	bcf	3,6	;RP1=0, select bank1
  2797  0AFB  00A5               	movwf	(?_exp+2)^(0+128)
  2798  0AFC  0008               	return
  2799  0AFD                     __end_of_exp:	
  2800                           
  2801                           	psect	text4
  2802  1F67                     __ptext4:	
  2803 ;; *************** function _ldexp *****************
  2804 ;; Defined at:
  2805 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\frexp.c"
  2806 ;; Parameters:    Size  Location     Type
  2807 ;;  value           3   71[BANK0 ] unsigned char 
  2808 ;;  newexp          2   74[BANK0 ] int 
  2809 ;; Auto vars:     Size  Location     Type
  2810 ;;		None
  2811 ;; Return value:  Size  Location     Type
  2812 ;;                  3   71[BANK0 ] int 
  2813 ;; Registers used:
  2814 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2815 ;; Tracked objects:
  2816 ;;		On entry : 0/0
  2817 ;;		On exit  : 0/0
  2818 ;;		Unchanged: 0/0
  2819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2820 ;;      Params:         0       5       0       0       0
  2821 ;;      Locals:         0       0       3       0       0
  2822 ;;      Temps:          0       2       0       0       0
  2823 ;;      Totals:         0       7       3       0       0
  2824 ;;Total ram usage:       10 bytes
  2825 ;; Hardware stack levels used:    1
  2826 ;; Hardware stack levels required when called:    1
  2827 ;; This function calls:
  2828 ;;		___ftge
  2829 ;;		___ftneg
  2830 ;; This function is called by:
  2831 ;;		_exp
  2832 ;; This function uses a non-reentrant model
  2833 ;;
  2834                           
  2835                           
  2836                           ;psect for function _ldexp
  2837  1F67                     _ldexp:	
  2838                           
  2839                           ;incstack = 0
  2840                           ; Regs used in _ldexp: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2841  1F67  1283               	bcf	3,5	;RP0=0, select bank0
  2842  1F68  1303               	bcf	3,6	;RP1=0, select bank0
  2843  1F69  0869               	movf	ldexp@value+2,w
  2844  1F6A  0468               	iorwf	ldexp@value+1,w
  2845  1F6B  0467               	iorwf	ldexp@value,w
  2846  1F6C  1D03               	skipz
  2847  1F6D  2F75               	goto	l2887
  2848  1F6E  3000               	movlw	0
  2849  1F6F  00E7               	movwf	?_ldexp
  2850  1F70  3000               	movlw	0
  2851  1F71  00E8               	movwf	?_ldexp+1
  2852  1F72  3000               	movlw	0
  2853  1F73  00E9               	movwf	?_ldexp+2
  2854  1F74  0008               	return
  2855  1F75                     l2887:	
  2856  1F75  0869               	movf	ldexp@value+2,w
  2857  1F76  397F               	andlw	127
  2858  1F77  00EC               	movwf	??_ldexp
  2859  1F78  01ED               	clrf	??_ldexp+1
  2860  1F79  1003               	clrc
  2861  1F7A  0DEC               	rlf	??_ldexp,f
  2862  1F7B  0DED               	rlf	??_ldexp+1,f
  2863  1F7C  086C               	movf	??_ldexp,w
  2864  1F7D  07EA               	addwf	ldexp@newexp,f
  2865  1F7E  1803               	skipnc
  2866  1F7F  0AEB               	incf	ldexp@newexp+1,f
  2867  1F80  086D               	movf	??_ldexp+1,w
  2868  1F81  07EB               	addwf	ldexp@newexp+1,f
  2869  1F82  0D68               	rlf	ldexp@value+1,w
  2870  1F83  0D68               	rlf	ldexp@value+1,w
  2871  1F84  3901               	andlw	1
  2872  1F85  00EC               	movwf	??_ldexp
  2873  1F86  01ED               	clrf	??_ldexp+1
  2874  1F87  086C               	movf	??_ldexp,w
  2875  1F88  07EA               	addwf	ldexp@newexp,f
  2876  1F89  1803               	skipnc
  2877  1F8A  0AEB               	incf	ldexp@newexp+1,f
  2878  1F8B  086D               	movf	??_ldexp+1,w
  2879  1F8C  07EB               	addwf	ldexp@newexp+1,f
  2880  1F8D  1FEB               	btfss	ldexp@newexp+1,7
  2881  1F8E  2F9E               	goto	l2897
  2882  1F8F  3022               	movlw	34
  2883  1F90  1683               	bsf	3,5	;RP0=1, select bank1
  2884  1F91  1303               	bcf	3,6	;RP1=0, select bank1
  2885  1F92  00E3               	movwf	_errno^(0+128)
  2886  1F93  3000               	movlw	0
  2887  1F94  00E4               	movwf	(_errno^(0+128)+1)
  2888  1F95  3000               	movlw	0
  2889  1F96  1283               	bcf	3,5	;RP0=0, select bank0
  2890  1F97  1303               	bcf	3,6	;RP1=0, select bank0
  2891  1F98  00E7               	movwf	?_ldexp
  2892  1F99  3000               	movlw	0
  2893  1F9A  00E8               	movwf	?_ldexp+1
  2894  1F9B  3000               	movlw	0
  2895  1F9C  00E9               	movwf	?_ldexp+2
  2896  1F9D  0008               	return
  2897  1F9E                     l2897:	
  2898  1F9E  086B               	movf	ldexp@newexp+1,w
  2899  1F9F  3A80               	xorlw	128
  2900  1FA0  00FF               	movwf	127
  2901  1FA1  3081               	movlw	129
  2902  1FA2  027F               	subwf	127,w
  2903  1FA3  1D03               	skipz
  2904  1FA4  2FA7               	goto	u3965
  2905  1FA5  3000               	movlw	0
  2906  1FA6  026A               	subwf	ldexp@newexp,w
  2907  1FA7                     u3965:	
  2908  1FA7  1C03               	skipc
  2909  1FA8  2FE7               	goto	l2921
  2910  1FA9  3022               	movlw	34
  2911  1FAA  1683               	bsf	3,5	;RP0=1, select bank1
  2912  1FAB  1303               	bcf	3,6	;RP1=0, select bank1
  2913  1FAC  00E3               	movwf	_errno^(0+128)
  2914  1FAD  3000               	movlw	0
  2915  1FAE  00E4               	movwf	(_errno^(0+128)+1)
  2916  1FAF  1283               	bcf	3,5	;RP0=0, select bank0
  2917  1FB0  1303               	bcf	3,6	;RP1=0, select bank0
  2918  1FB1  0867               	movf	ldexp@value,w
  2919  1FB2  00F0               	movwf	___ftge@ff1
  2920  1FB3  0868               	movf	ldexp@value+1,w
  2921  1FB4  00F1               	movwf	___ftge@ff1+1
  2922  1FB5  0869               	movf	ldexp@value+2,w
  2923  1FB6  00F2               	movwf	___ftge@ff1+2
  2924  1FB7  3000               	movlw	0
  2925  1FB8  00F3               	movwf	___ftge@ff2
  2926  1FB9  3000               	movlw	0
  2927  1FBA  00F4               	movwf	___ftge@ff2+1
  2928  1FBB  3000               	movlw	0
  2929  1FBC  00F5               	movwf	___ftge@ff2+2
  2930  1FBD  160A  158A  232F  160A  158A  	fcall	___ftge
  2931  1FC2  1803               	btfsc	3,0
  2932  1FC3  2FDE               	goto	l2917
  2933  1FC4  30FF               	movlw	255
  2934  1FC5  1683               	bsf	3,5	;RP0=1, select bank1
  2935  1FC6  1303               	bcf	3,6	;RP1=0, select bank1
  2936  1FC7  00A0               	movwf	_ldexp$521^(0+128)
  2937  1FC8  307F               	movlw	127
  2938  1FC9  00A1               	movwf	(_ldexp$521+1)^(0+128)
  2939  1FCA  307F               	movlw	127
  2940  1FCB  00A2               	movwf	(_ldexp$521+2)^(0+128)
  2941  1FCC  0820               	movf	_ldexp$521^(0+128),w
  2942  1FCD  00F0               	movwf	___ftneg@f1
  2943  1FCE  0821               	movf	(_ldexp$521+1)^(0+128),w
  2944  1FCF  00F1               	movwf	___ftneg@f1+1
  2945  1FD0  0822               	movf	(_ldexp$521+2)^(0+128),w
  2946  1FD1  00F2               	movwf	___ftneg@f1+2
  2947  1FD2  120A  118A  2003   	fcall	___ftneg
  2948  1FD5  0870               	movf	?___ftneg,w
  2949  1FD6  1283               	bcf	3,5	;RP0=0, select bank0
  2950  1FD7  1303               	bcf	3,6	;RP1=0, select bank0
  2951  1FD8  00E7               	movwf	?_ldexp
  2952  1FD9  0871               	movf	?___ftneg+1,w
  2953  1FDA  00E8               	movwf	?_ldexp+1
  2954  1FDB  0872               	movf	?___ftneg+2,w
  2955  1FDC  00E9               	movwf	?_ldexp+2
  2956  1FDD  0008               	return
  2957  1FDE                     l2917:	
  2958  1FDE  30FF               	movlw	255
  2959  1FDF  1283               	bcf	3,5	;RP0=0, select bank0
  2960  1FE0  1303               	bcf	3,6	;RP1=0, select bank0
  2961  1FE1  00E7               	movwf	?_ldexp
  2962  1FE2  307F               	movlw	127
  2963  1FE3  00E8               	movwf	?_ldexp+1
  2964  1FE4  307F               	movlw	127
  2965  1FE5  00E9               	movwf	?_ldexp+2
  2966  1FE6  0008               	return
  2967  1FE7                     l2921:	
  2968  1FE7  1283               	bcf	3,5	;RP0=0, select bank0
  2969  1FE8  1303               	bcf	3,6	;RP1=0, select bank0
  2970  1FE9  086B               	movf	ldexp@newexp+1,w
  2971  1FEA  00ED               	movwf	??_ldexp+1
  2972  1FEB  086A               	movf	ldexp@newexp,w
  2973  1FEC  00EC               	movwf	??_ldexp
  2974  1FED  0D6D               	rlf	??_ldexp+1,w
  2975  1FEE  0CED               	rrf	??_ldexp+1,f
  2976  1FEF  0CEC               	rrf	??_ldexp,f
  2977  1FF0  0869               	movf	ldexp@value+2,w
  2978  1FF1  066C               	xorwf	??_ldexp,w
  2979  1FF2  3980               	andlw	-128
  2980  1FF3  066C               	xorwf	??_ldexp,w
  2981  1FF4  00E9               	movwf	ldexp@value+2
  2982  1FF5  086A               	movf	ldexp@newexp,w
  2983  1FF6  3901               	andlw	1
  2984  1FF7  00EC               	movwf	??_ldexp
  2985  1FF8  0CEC               	rrf	??_ldexp,f
  2986  1FF9  0CEC               	rrf	??_ldexp,f
  2987  1FFA  0868               	movf	ldexp@value+1,w
  2988  1FFB  066C               	xorwf	??_ldexp,w
  2989  1FFC  397F               	andlw	-129
  2990  1FFD  066C               	xorwf	??_ldexp,w
  2991  1FFE  00E8               	movwf	ldexp@value+1
  2992  1FFF  0008               	return
  2993  2000                     __end_of_ldexp:	
  2994                           
  2995                           	psect	text5
  2996  1ECE                     __ptext5:	
  2997 ;; *************** function _floor *****************
  2998 ;; Defined at:
  2999 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\floor.c"
  3000 ;; Parameters:    Size  Location     Type
  3001 ;;  x               3   63[BANK0 ] int 
  3002 ;; Auto vars:     Size  Location     Type
  3003 ;;  i               3   67[BANK0 ] int 
  3004 ;;  expon           2   70[BANK0 ] int 
  3005 ;; Return value:  Size  Location     Type
  3006 ;;                  3   63[BANK0 ] int 
  3007 ;; Registers used:
  3008 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3009 ;; Tracked objects:
  3010 ;;		On entry : 0/0
  3011 ;;		On exit  : 0/0
  3012 ;;		Unchanged: 0/0
  3013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3014 ;;      Params:         0       3       0       0       0
  3015 ;;      Locals:         0       5       0       0       0
  3016 ;;      Temps:          0       1       0       0       0
  3017 ;;      Totals:         0       9       0       0       0
  3018 ;;Total ram usage:        9 bytes
  3019 ;; Hardware stack levels used:    1
  3020 ;; Hardware stack levels required when called:    2
  3021 ;; This function calls:
  3022 ;;		___altoft
  3023 ;;		___ftadd
  3024 ;;		___ftge
  3025 ;;		___fttol
  3026 ;;		_frexp
  3027 ;; This function is called by:
  3028 ;;		_exp
  3029 ;; This function uses a non-reentrant model
  3030 ;;
  3031                           
  3032                           
  3033                           ;psect for function _floor
  3034  1ECE                     _floor:	
  3035                           
  3036                           ;incstack = 0
  3037                           ; Regs used in _floor: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3038  1ECE  1283               	bcf	3,5	;RP0=0, select bank0
  3039  1ECF  1303               	bcf	3,6	;RP1=0, select bank0
  3040  1ED0  085F               	movf	floor@x,w
  3041  1ED1  00F0               	movwf	frexp@value
  3042  1ED2  0860               	movf	floor@x+1,w
  3043  1ED3  00F1               	movwf	frexp@value+1
  3044  1ED4  0861               	movf	floor@x+2,w
  3045  1ED5  00F2               	movwf	frexp@value+2
  3046  1ED6  3066               	movlw	floor@expon& (0+255)
  3047  1ED7  00E2               	movwf	??_floor
  3048  1ED8  0862               	movf	??_floor,w
  3049  1ED9  00F3               	movwf	frexp@eptr
  3050  1EDA  160A  158A  2212  160A  158A  	fcall	_frexp
  3051  1EDF  1283               	bcf	3,5	;RP0=0, select bank0
  3052  1EE0  1303               	bcf	3,6	;RP1=0, select bank0
  3053  1EE1  1FE7               	btfss	floor@expon+1,7
  3054  1EE2  2F08               	goto	l2857
  3055  1EE3  085F               	movf	floor@x,w
  3056  1EE4  00F0               	movwf	___ftge@ff1
  3057  1EE5  0860               	movf	floor@x+1,w
  3058  1EE6  00F1               	movwf	___ftge@ff1+1
  3059  1EE7  0861               	movf	floor@x+2,w
  3060  1EE8  00F2               	movwf	___ftge@ff1+2
  3061  1EE9  3000               	movlw	0
  3062  1EEA  00F3               	movwf	___ftge@ff2
  3063  1EEB  3000               	movlw	0
  3064  1EEC  00F4               	movwf	___ftge@ff2+1
  3065  1EED  3000               	movlw	0
  3066  1EEE  00F5               	movwf	___ftge@ff2+2
  3067  1EEF  160A  158A  232F  160A  158A  	fcall	___ftge
  3068  1EF4  1803               	btfsc	3,0
  3069  1EF5  2EFF               	goto	l2853
  3070  1EF6  3000               	movlw	0
  3071  1EF7  1283               	bcf	3,5	;RP0=0, select bank0
  3072  1EF8  1303               	bcf	3,6	;RP1=0, select bank0
  3073  1EF9  00DF               	movwf	?_floor
  3074  1EFA  3080               	movlw	128
  3075  1EFB  00E0               	movwf	?_floor+1
  3076  1EFC  30BF               	movlw	191
  3077  1EFD  00E1               	movwf	?_floor+2
  3078  1EFE  0008               	return
  3079  1EFF                     l2853:	
  3080  1EFF  3000               	movlw	0
  3081  1F00  1283               	bcf	3,5	;RP0=0, select bank0
  3082  1F01  1303               	bcf	3,6	;RP1=0, select bank0
  3083  1F02  00DF               	movwf	?_floor
  3084  1F03  3000               	movlw	0
  3085  1F04  00E0               	movwf	?_floor+1
  3086  1F05  3000               	movlw	0
  3087  1F06  00E1               	movwf	?_floor+2
  3088  1F07  0008               	return
  3089  1F08                     l2857:	
  3090  1F08  3000               	movlw	0
  3091  1F09  0267               	subwf	floor@expon+1,w
  3092  1F0A  3015               	movlw	21
  3093  1F0B  1903               	skipnz
  3094  1F0C  0266               	subwf	floor@expon,w
  3095  1F0D  1803               	btfsc	3,0
  3096  1F0E  0008               	return
  3097  1F0F  085F               	movf	floor@x,w
  3098  1F10  00C9               	movwf	___fttol@f1
  3099  1F11  0860               	movf	floor@x+1,w
  3100  1F12  00CA               	movwf	___fttol@f1+1
  3101  1F13  0861               	movf	floor@x+2,w
  3102  1F14  00CB               	movwf	___fttol@f1+2
  3103  1F15  160A  158A  25AB  160A  158A  	fcall	___fttol
  3104  1F1A  1283               	bcf	3,5	;RP0=0, select bank0
  3105  1F1B  1303               	bcf	3,6	;RP1=0, select bank0
  3106  1F1C  084C               	movf	?___fttol+3,w
  3107  1F1D  00DA               	movwf	___altoft@c+3
  3108  1F1E  084B               	movf	?___fttol+2,w
  3109  1F1F  00D9               	movwf	___altoft@c+2
  3110  1F20  084A               	movf	?___fttol+1,w
  3111  1F21  00D8               	movwf	___altoft@c+1
  3112  1F22  0849               	movf	?___fttol,w
  3113  1F23  00D7               	movwf	___altoft@c
  3114  1F24  160A  158A  2252  160A  158A  	fcall	___altoft
  3115  1F29  1283               	bcf	3,5	;RP0=0, select bank0
  3116  1F2A  1303               	bcf	3,6	;RP1=0, select bank0
  3117  1F2B  0857               	movf	?___altoft,w
  3118  1F2C  00E3               	movwf	floor@i
  3119  1F2D  0858               	movf	?___altoft+1,w
  3120  1F2E  00E4               	movwf	floor@i+1
  3121  1F2F  0859               	movf	?___altoft+2,w
  3122  1F30  00E5               	movwf	floor@i+2
  3123  1F31  085F               	movf	floor@x,w
  3124  1F32  00F0               	movwf	___ftge@ff1
  3125  1F33  0860               	movf	floor@x+1,w
  3126  1F34  00F1               	movwf	___ftge@ff1+1
  3127  1F35  0861               	movf	floor@x+2,w
  3128  1F36  00F2               	movwf	___ftge@ff1+2
  3129  1F37  0863               	movf	floor@i,w
  3130  1F38  00F3               	movwf	___ftge@ff2
  3131  1F39  0864               	movf	floor@i+1,w
  3132  1F3A  00F4               	movwf	___ftge@ff2+1
  3133  1F3B  0865               	movf	floor@i+2,w
  3134  1F3C  00F5               	movwf	___ftge@ff2+2
  3135  1F3D  160A  158A  232F  160A  158A  	fcall	___ftge
  3136  1F42  1803               	btfsc	3,0
  3137  1F43  2F5E               	goto	l2867
  3138  1F44  3000               	movlw	0
  3139  1F45  1283               	bcf	3,5	;RP0=0, select bank0
  3140  1F46  1303               	bcf	3,6	;RP1=0, select bank0
  3141  1F47  00D0               	movwf	___ftadd@f1
  3142  1F48  3080               	movlw	128
  3143  1F49  00D1               	movwf	___ftadd@f1+1
  3144  1F4A  30BF               	movlw	191
  3145  1F4B  00D2               	movwf	___ftadd@f1+2
  3146  1F4C  0863               	movf	floor@i,w
  3147  1F4D  00D3               	movwf	___ftadd@f2
  3148  1F4E  0864               	movf	floor@i+1,w
  3149  1F4F  00D4               	movwf	___ftadd@f2+1
  3150  1F50  0865               	movf	floor@i+2,w
  3151  1F51  00D5               	movwf	___ftadd@f2+2
  3152  1F52  120A  158A  2028   	fcall	___ftadd
  3153  1F55  1283               	bcf	3,5	;RP0=0, select bank0
  3154  1F56  1303               	bcf	3,6	;RP1=0, select bank0
  3155  1F57  0850               	movf	?___ftadd,w
  3156  1F58  00DF               	movwf	?_floor
  3157  1F59  0851               	movf	?___ftadd+1,w
  3158  1F5A  00E0               	movwf	?_floor+1
  3159  1F5B  0852               	movf	?___ftadd+2,w
  3160  1F5C  00E1               	movwf	?_floor+2
  3161  1F5D  0008               	return
  3162  1F5E                     l2867:	
  3163  1F5E  1283               	bcf	3,5	;RP0=0, select bank0
  3164  1F5F  1303               	bcf	3,6	;RP1=0, select bank0
  3165  1F60  0863               	movf	floor@i,w
  3166  1F61  00DF               	movwf	?_floor
  3167  1F62  0864               	movf	floor@i+1,w
  3168  1F63  00E0               	movwf	?_floor+1
  3169  1F64  0865               	movf	floor@i+2,w
  3170  1F65  00E1               	movwf	?_floor+2
  3171  1F66  0008               	return
  3172  1F67                     __end_of_floor:	
  3173                           
  3174                           	psect	text6
  3175  1A12                     __ptext6:	
  3176 ;; *************** function _frexp *****************
  3177 ;; Defined at:
  3178 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\frexp.c"
  3179 ;; Parameters:    Size  Location     Type
  3180 ;;  value           3    0[COMMON] int 
  3181 ;;  eptr            1    3[COMMON] PTR int 
  3182 ;;		 -> log@exponent(2), floor@expon(2), 
  3183 ;; Auto vars:     Size  Location     Type
  3184 ;;		None
  3185 ;; Return value:  Size  Location     Type
  3186 ;;                  3    0[COMMON] PTR int 
  3187 ;; Registers used:
  3188 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  3189 ;; Tracked objects:
  3190 ;;		On entry : 0/0
  3191 ;;		On exit  : 0/0
  3192 ;;		Unchanged: 0/0
  3193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3194 ;;      Params:         4       0       0       0       0
  3195 ;;      Locals:         0       0       0       0       0
  3196 ;;      Temps:          2       0       0       0       0
  3197 ;;      Totals:         6       0       0       0       0
  3198 ;;Total ram usage:        6 bytes
  3199 ;; Hardware stack levels used:    1
  3200 ;; This function calls:
  3201 ;;		Nothing
  3202 ;; This function is called by:
  3203 ;;		_floor
  3204 ;;		_log
  3205 ;; This function uses a non-reentrant model
  3206 ;;
  3207                           
  3208                           
  3209                           ;psect for function _frexp
  3210  1A12                     _frexp:	
  3211                           
  3212                           ;incstack = 0
  3213                           ; Regs used in _frexp: [wreg-fsr0h+status,2+status,0+btemp+1]
  3214  1A12  0872               	movf	frexp@value+2,w
  3215  1A13  0471               	iorwf	frexp@value+1,w
  3216  1A14  0470               	iorwf	frexp@value,w
  3217  1A15  1D03               	skipz
  3218  1A16  2A24               	goto	l2503
  3219  1A17  0873               	movf	frexp@eptr,w
  3220  1A18  0084               	movwf	4
  3221  1A19  1383               	bcf	3,7	;select IRP bank0
  3222  1A1A  0180               	clrf	0
  3223  1A1B  0A84               	incf	4,f
  3224  1A1C  0180               	clrf	0
  3225  1A1D  3000               	movlw	0
  3226  1A1E  00F0               	movwf	?_frexp
  3227  1A1F  3000               	movlw	0
  3228  1A20  00F1               	movwf	?_frexp+1
  3229  1A21  3000               	movlw	0
  3230  1A22  00F2               	movwf	?_frexp+2
  3231  1A23  0008               	return
  3232  1A24                     l2503:	
  3233  1A24  0872               	movf	frexp@value+2,w
  3234  1A25  397F               	andlw	127
  3235  1A26  00F4               	movwf	??_frexp
  3236  1A27  01F5               	clrf	??_frexp+1
  3237  1A28  1003               	clrc
  3238  1A29  0DF4               	rlf	??_frexp,f
  3239  1A2A  0DF5               	rlf	??_frexp+1,f
  3240  1A2B  0873               	movf	frexp@eptr,w
  3241  1A2C  0084               	movwf	4
  3242  1A2D  0874               	movf	??_frexp,w
  3243  1A2E  1383               	bcf	3,7	;select IRP bank0
  3244  1A2F  0080               	movwf	0
  3245  1A30  0A84               	incf	4,f
  3246  1A31  0875               	movf	??_frexp+1,w
  3247  1A32  0080               	movwf	0
  3248  1A33  0D71               	rlf	frexp@value+1,w
  3249  1A34  0D71               	rlf	frexp@value+1,w
  3250  1A35  3901               	andlw	1
  3251  1A36  00F4               	movwf	??_frexp
  3252  1A37  01F5               	clrf	??_frexp+1
  3253  1A38  0873               	movf	frexp@eptr,w
  3254  1A39  0084               	movwf	4
  3255  1A3A  0874               	movf	??_frexp,w
  3256  1A3B  0480               	iorwf	0,f
  3257  1A3C  0A84               	incf	4,f
  3258  1A3D  0875               	movf	??_frexp+1,w
  3259  1A3E  0480               	iorwf	0,f
  3260  1A3F  0873               	movf	frexp@eptr,w
  3261  1A40  0084               	movwf	4
  3262  1A41  3082               	movlw	130
  3263  1A42  0780               	addwf	0,f
  3264  1A43  0F84               	incfsz	4,f
  3265  1A44  0800               	movf	0,w
  3266  1A45  1803               	skipnc
  3267  1A46  0A00               	incf	0,w
  3268  1A47  00FF               	movwf	127
  3269  1A48  30FF               	movlw	255
  3270  1A49  077F               	addwf	127,w
  3271  1A4A  0080               	movwf	0
  3272  1A4B  0384               	decf	4,f
  3273  1A4C  0872               	movf	frexp@value+2,w
  3274  1A4D  3980               	andlw	-128
  3275  1A4E  383F               	iorlw	63
  3276  1A4F  00F2               	movwf	frexp@value+2
  3277  1A50  13F1               	bcf	frexp@value+1,7
  3278  1A51  0008               	return
  3279  1A52                     __end_of_frexp:	
  3280                           
  3281                           	psect	text7
  3282  1A52                     __ptext7:	
  3283 ;; *************** function ___altoft *****************
  3284 ;; Defined at:
  3285 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\altoft.c"
  3286 ;; Parameters:    Size  Location     Type
  3287 ;;  c               4   55[BANK0 ] long 
  3288 ;; Auto vars:     Size  Location     Type
  3289 ;;  sign            1   62[BANK0 ] unsigned char 
  3290 ;;  exp             1   61[BANK0 ] unsigned char 
  3291 ;; Return value:  Size  Location     Type
  3292 ;;                  3   55[BANK0 ] float 
  3293 ;; Registers used:
  3294 ;;		wreg, status,2, status,0, pclath, cstack
  3295 ;; Tracked objects:
  3296 ;;		On entry : 0/0
  3297 ;;		On exit  : 0/0
  3298 ;;		Unchanged: 0/0
  3299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3300 ;;      Params:         0       4       0       0       0
  3301 ;;      Locals:         0       2       0       0       0
  3302 ;;      Temps:          0       2       0       0       0
  3303 ;;      Totals:         0       8       0       0       0
  3304 ;;Total ram usage:        8 bytes
  3305 ;; Hardware stack levels used:    1
  3306 ;; Hardware stack levels required when called:    1
  3307 ;; This function calls:
  3308 ;;		___ftpack
  3309 ;; This function is called by:
  3310 ;;		_floor
  3311 ;; This function uses a non-reentrant model
  3312 ;;
  3313                           
  3314                           
  3315                           ;psect for function ___altoft
  3316  1A52                     ___altoft:	
  3317                           
  3318                           ;incstack = 0
  3319                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
  3320  1A52  1283               	bcf	3,5	;RP0=0, select bank0
  3321  1A53  1303               	bcf	3,6	;RP1=0, select bank0
  3322  1A54  01DE               	clrf	___altoft@sign
  3323  1A55  308E               	movlw	142
  3324  1A56  00DB               	movwf	??___altoft
  3325  1A57  085B               	movf	??___altoft,w
  3326  1A58  00DD               	movwf	___altoft@exp
  3327  1A59  1FDA               	btfss	___altoft@c+3,7
  3328  1A5A  2A68               	goto	l2213
  3329  1A5B  09D7               	comf	___altoft@c,f
  3330  1A5C  09D8               	comf	___altoft@c+1,f
  3331  1A5D  09D9               	comf	___altoft@c+2,f
  3332  1A5E  09DA               	comf	___altoft@c+3,f
  3333  1A5F  0AD7               	incf	___altoft@c,f
  3334  1A60  1903               	skipnz
  3335  1A61  0AD8               	incf	___altoft@c+1,f
  3336  1A62  1903               	skipnz
  3337  1A63  0AD9               	incf	___altoft@c+2,f
  3338  1A64  1903               	skipnz
  3339  1A65  0ADA               	incf	___altoft@c+3,f
  3340  1A66  01DE               	clrf	___altoft@sign
  3341  1A67  0ADE               	incf	___altoft@sign,f
  3342  1A68                     l2213:	
  3343  1A68  30FF               	movlw	255
  3344  1A69  055A               	andwf	___altoft@c+3,w
  3345  1A6A  1903               	btfsc	3,2
  3346  1A6B  2A7A               	goto	l2215
  3347  1A6C  3001               	movlw	1
  3348  1A6D                     u2475:	
  3349  1A6D  1003               	clrc
  3350  1A6E  0CDA               	rrf	___altoft@c+3,f
  3351  1A6F  0CD9               	rrf	___altoft@c+2,f
  3352  1A70  0CD8               	rrf	___altoft@c+1,f
  3353  1A71  0CD7               	rrf	___altoft@c,f
  3354  1A72  3EFF               	addlw	-1
  3355  1A73  1D03               	skipz
  3356  1A74  2A6D               	goto	u2475
  3357  1A75  3001               	movlw	1
  3358  1A76  00DB               	movwf	??___altoft
  3359  1A77  085B               	movf	??___altoft,w
  3360  1A78  07DD               	addwf	___altoft@exp,f
  3361  1A79  2A68               	goto	l2213
  3362  1A7A                     l2215:	
  3363  1A7A  0857               	movf	___altoft@c,w
  3364  1A7B  00F0               	movwf	___ftpack@arg
  3365  1A7C  0858               	movf	___altoft@c+1,w
  3366  1A7D  00F1               	movwf	___ftpack@arg+1
  3367  1A7E  0859               	movf	___altoft@c+2,w
  3368  1A7F  00F2               	movwf	___ftpack@arg+2
  3369  1A80  085D               	movf	___altoft@exp,w
  3370  1A81  00DB               	movwf	??___altoft
  3371  1A82  085B               	movf	??___altoft,w
  3372  1A83  00F3               	movwf	___ftpack@exp
  3373  1A84  085E               	movf	___altoft@sign,w
  3374  1A85  00DC               	movwf	??___altoft+1
  3375  1A86  085C               	movf	??___altoft+1,w
  3376  1A87  00F4               	movwf	___ftpack@sign
  3377  1A88  160A  158A  2447   	fcall	___ftpack
  3378  1A8B  0870               	movf	?___ftpack,w
  3379  1A8C  1283               	bcf	3,5	;RP0=0, select bank0
  3380  1A8D  1303               	bcf	3,6	;RP1=0, select bank0
  3381  1A8E  00D7               	movwf	?___altoft
  3382  1A8F  0871               	movf	?___ftpack+1,w
  3383  1A90  00D8               	movwf	?___altoft+1
  3384  1A91  0872               	movf	?___ftpack+2,w
  3385  1A92  00D9               	movwf	?___altoft+2
  3386  1A93  0008               	return
  3387  1A94                     __end_of___altoft:	
  3388                           
  3389                           	psect	text8
  3390  1CAF                     __ptext8:	
  3391 ;; *************** function _eval_poly *****************
  3392 ;; Defined at:
  3393 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\evalpoly.c"
  3394 ;; Parameters:    Size  Location     Type
  3395 ;;  x               3   61[BANK0 ] float 
  3396 ;;  d               1   64[BANK0 ] PTR const 
  3397 ;;		 -> log@coeff(27), exp@coeff(30), 
  3398 ;;  n               2   65[BANK0 ] int 
  3399 ;; Auto vars:     Size  Location     Type
  3400 ;;  res             3   68[BANK0 ] int 
  3401 ;; Return value:  Size  Location     Type
  3402 ;;                  3   61[BANK0 ] int 
  3403 ;; Registers used:
  3404 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3405 ;; Tracked objects:
  3406 ;;		On entry : 0/0
  3407 ;;		On exit  : 0/0
  3408 ;;		Unchanged: 0/0
  3409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3410 ;;      Params:         0       6       0       0       0
  3411 ;;      Locals:         0       3       0       0       0
  3412 ;;      Temps:          0       1       0       0       0
  3413 ;;      Totals:         0      10       0       0       0
  3414 ;;Total ram usage:       10 bytes
  3415 ;; Hardware stack levels used:    1
  3416 ;; Hardware stack levels required when called:    2
  3417 ;; This function calls:
  3418 ;;		___bmul
  3419 ;;		___ftadd
  3420 ;;		___ftmul
  3421 ;; This function is called by:
  3422 ;;		_exp
  3423 ;;		_log
  3424 ;; This function uses a non-reentrant model
  3425 ;;
  3426                           
  3427                           
  3428                           ;psect for function _eval_poly
  3429  1CAF                     _eval_poly:	
  3430                           
  3431                           ;incstack = 0
  3432                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3433  1CAF  3003               	movlw	3
  3434  1CB0  1283               	bcf	3,5	;RP0=0, select bank0
  3435  1CB1  1303               	bcf	3,6	;RP1=0, select bank0
  3436  1CB2  00E3               	movwf	??_eval_poly
  3437  1CB3  0863               	movf	??_eval_poly,w
  3438  1CB4  00A4               	movwf	___bmul@multiplicand
  3439  1CB5  0861               	movf	eval_poly@n,w
  3440  1CB6  160A  118A  20BD  160A  158A  	fcall	___bmul
  3441  1CBB  1283               	bcf	3,5	;RP0=0, select bank0
  3442  1CBC  1303               	bcf	3,6	;RP1=0, select bank0
  3443  1CBD  0760               	addwf	eval_poly@d,w
  3444  1CBE  0084               	movwf	4
  3445  1CBF  160A  118A  2000  160A  158A  	fcall	stringdir
  3446  1CC4  00E4               	movwf	eval_poly@res
  3447  1CC5  160A  118A  2000  160A  158A  	fcall	stringdir
  3448  1CCA  00E5               	movwf	eval_poly@res+1
  3449  1CCB  160A  118A  2000  160A  158A  	fcall	stringdir
  3450  1CD0                     L2:	
  3451  1CD0  00E6               	movwf	eval_poly@res+2
  3452  1CD1  0862               	movf	eval_poly@n+1,w
  3453  1CD2  0461               	iorwf	eval_poly@n,w
  3454  1CD3  1903               	btfsc	3,2
  3455  1CD4  2D21               	goto	l2877
  3456  1CD5  3003               	movlw	3
  3457  1CD6  00E3               	movwf	??_eval_poly
  3458  1CD7  0863               	movf	??_eval_poly,w
  3459  1CD8  00A4               	movwf	___bmul@multiplicand
  3460  1CD9  30FF               	movlw	255
  3461  1CDA  07E1               	addwf	eval_poly@n,f
  3462  1CDB  1803               	skipnc
  3463  1CDC  0AE2               	incf	eval_poly@n+1,f
  3464  1CDD  30FF               	movlw	255
  3465  1CDE  07E2               	addwf	eval_poly@n+1,f
  3466  1CDF  0861               	movf	eval_poly@n,w
  3467  1CE0  160A  118A  20BD  160A  158A  	fcall	___bmul
  3468  1CE5  1283               	bcf	3,5	;RP0=0, select bank0
  3469  1CE6  1303               	bcf	3,6	;RP1=0, select bank0
  3470  1CE7  0760               	addwf	eval_poly@d,w
  3471  1CE8  0084               	movwf	4
  3472  1CE9  160A  118A  2000  160A  158A  	fcall	stringdir
  3473  1CEE  00D0               	movwf	___ftadd@f1
  3474  1CEF  160A  118A  2000  160A  158A  	fcall	stringdir
  3475  1CF4  00D1               	movwf	___ftadd@f1+1
  3476  1CF5  160A  118A  2000  160A  158A  	fcall	stringdir
  3477  1CFA  00D2               	movwf	___ftadd@f1+2
  3478  1CFB  0864               	movf	eval_poly@res,w
  3479  1CFC  00B0               	movwf	___ftmul@f1
  3480  1CFD  0865               	movf	eval_poly@res+1,w
  3481  1CFE  00B1               	movwf	___ftmul@f1+1
  3482  1CFF  0866               	movf	eval_poly@res+2,w
  3483  1D00  00B2               	movwf	___ftmul@f1+2
  3484  1D01  085D               	movf	eval_poly@x,w
  3485  1D02  00B3               	movwf	___ftmul@f2
  3486  1D03  085E               	movf	eval_poly@x+1,w
  3487  1D04  00B4               	movwf	___ftmul@f2+1
  3488  1D05  085F               	movf	eval_poly@x+2,w
  3489  1D06  00B5               	movwf	___ftmul@f2+2
  3490  1D07  160A  118A  231B  160A  158A  	fcall	___ftmul
  3491  1D0C  1283               	bcf	3,5	;RP0=0, select bank0
  3492  1D0D  1303               	bcf	3,6	;RP1=0, select bank0
  3493  1D0E  0830               	movf	?___ftmul,w
  3494  1D0F  00D3               	movwf	___ftadd@f2
  3495  1D10  0831               	movf	?___ftmul+1,w
  3496  1D11  00D4               	movwf	___ftadd@f2+1
  3497  1D12  0832               	movf	?___ftmul+2,w
  3498  1D13  00D5               	movwf	___ftadd@f2+2
  3499  1D14  120A  158A  2028  160A  158A  	fcall	___ftadd
  3500  1D19  1283               	bcf	3,5	;RP0=0, select bank0
  3501  1D1A  1303               	bcf	3,6	;RP1=0, select bank0
  3502  1D1B  0850               	movf	?___ftadd,w
  3503  1D1C  00E4               	movwf	eval_poly@res
  3504  1D1D  0851               	movf	?___ftadd+1,w
  3505  1D1E  00E5               	movwf	eval_poly@res+1
  3506  1D1F  0852               	movf	?___ftadd+2,w
  3507  1D20  2CD0               	goto	L2
  3508  1D21                     l2877:	
  3509  1D21  0864               	movf	eval_poly@res,w
  3510  1D22  00DD               	movwf	?_eval_poly
  3511  1D23  0865               	movf	eval_poly@res+1,w
  3512  1D24  00DE               	movwf	?_eval_poly+1
  3513  1D25  0866               	movf	eval_poly@res+2,w
  3514  1D26  00DF               	movwf	?_eval_poly+2
  3515  1D27  0008               	return
  3516  1D28                     __end_of_eval_poly:	
  3517                           
  3518                           	psect	text9
  3519  10D0                     __ptext9:	
  3520 ;; *************** function ___ftdiv *****************
  3521 ;; Defined at:
  3522 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic\ftdiv.c"
  3523 ;; Parameters:    Size  Location     Type
  3524 ;;  f2              3    0[BANK0 ] float 
  3525 ;;  f1              3    3[BANK0 ] float 
  3526 ;; Auto vars:     Size  Location     Type
  3527 ;;  f3              3   11[BANK0 ] float 
  3528 ;;  sign            1   15[BANK0 ] unsigned char 
  3529 ;;  exp             1   14[BANK0 ] unsigned char 
  3530 ;;  cntr            1   10[BANK0 ] unsigned char 
  3531 ;; Return value:  Size  Location     Type
  3532 ;;                  3    0[BANK0 ] float 
  3533 ;; Registers used:
  3534 ;;		wreg, status,2, status,0, pclath, cstack
  3535 ;; Tracked objects:
  3536 ;;		On entry : 0/0
  3537 ;;		On exit  : 0/0
  3538 ;;		Unchanged: 0/0
  3539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3540 ;;      Params:         0       6       0       0       0
  3541 ;;      Locals:         0       6       0       0       0
  3542 ;;      Temps:          0       4       0       0       0
  3543 ;;      Totals:         0      16       0       0       0
  3544 ;;Total ram usage:       16 bytes
  3545 ;; Hardware stack levels used:    1
  3546 ;; Hardware stack levels required when called:    1
  3547 ;; This function calls:
  3548 ;;		___ftpack
  3549 ;; This function is called by:
  3550 ;;		_main
  3551 ;;		_exp
  3552 ;; This function uses a non-reentrant model
  3553 ;;
  3554                           
  3555                           
  3556                           ;psect for function ___ftdiv
  3557  10D0                     ___ftdiv:	
  3558                           
  3559                           ;incstack = 0
  3560                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  3561  10D0  1283               	bcf	3,5	;RP0=0, select bank0
  3562  10D1  1303               	bcf	3,6	;RP1=0, select bank0
  3563  10D2  0823               	movf	___ftdiv@f1,w
  3564  10D3  00A6               	movwf	??___ftdiv
  3565  10D4  0824               	movf	___ftdiv@f1+1,w
  3566  10D5  00A7               	movwf	??___ftdiv+1
  3567  10D6  0825               	movf	___ftdiv@f1+2,w
  3568  10D7  00A8               	movwf	??___ftdiv+2
  3569  10D8  1003               	clrc
  3570  10D9  0D27               	rlf	??___ftdiv+1,w
  3571  10DA  0D28               	rlf	??___ftdiv+2,w
  3572  10DB  00A9               	movwf	??___ftdiv+3
  3573  10DC  0829               	movf	??___ftdiv+3,w
  3574  10DD  00AE               	movwf	___ftdiv@exp
  3575  10DE  08AE               	movf	___ftdiv@exp,f
  3576  10DF  1D03               	skipz
  3577  10E0  28E8               	goto	l2747
  3578  10E1  3000               	movlw	0
  3579  10E2  00A0               	movwf	?___ftdiv
  3580  10E3  3000               	movlw	0
  3581  10E4  00A1               	movwf	?___ftdiv+1
  3582  10E5  3000               	movlw	0
  3583  10E6  00A2               	movwf	?___ftdiv+2
  3584  10E7  0008               	return
  3585  10E8                     l2747:	
  3586  10E8  0820               	movf	___ftdiv@f2,w
  3587  10E9  00A6               	movwf	??___ftdiv
  3588  10EA  0821               	movf	___ftdiv@f2+1,w
  3589  10EB  00A7               	movwf	??___ftdiv+1
  3590  10EC  0822               	movf	___ftdiv@f2+2,w
  3591  10ED  00A8               	movwf	??___ftdiv+2
  3592  10EE  1003               	clrc
  3593  10EF  0D27               	rlf	??___ftdiv+1,w
  3594  10F0  0D28               	rlf	??___ftdiv+2,w
  3595  10F1  00A9               	movwf	??___ftdiv+3
  3596  10F2  0829               	movf	??___ftdiv+3,w
  3597  10F3  00AF               	movwf	___ftdiv@sign
  3598  10F4  08AF               	movf	___ftdiv@sign,f
  3599  10F5  1D03               	skipz
  3600  10F6  28FE               	goto	l2753
  3601  10F7  3000               	movlw	0
  3602  10F8  00A0               	movwf	?___ftdiv
  3603  10F9  3000               	movlw	0
  3604  10FA  00A1               	movwf	?___ftdiv+1
  3605  10FB  3000               	movlw	0
  3606  10FC  00A2               	movwf	?___ftdiv+2
  3607  10FD  0008               	return
  3608  10FE                     l2753:	
  3609  10FE  3000               	movlw	0
  3610  10FF  00AB               	movwf	___ftdiv@f3
  3611  1100  3000               	movlw	0
  3612  1101  00AC               	movwf	___ftdiv@f3+1
  3613  1102  3000               	movlw	0
  3614  1103  00AD               	movwf	___ftdiv@f3+2
  3615  1104  3089               	movlw	137
  3616  1105  072F               	addwf	___ftdiv@sign,w
  3617  1106  00A6               	movwf	??___ftdiv
  3618  1107  0826               	movf	??___ftdiv,w
  3619  1108  02AE               	subwf	___ftdiv@exp,f
  3620  1109  0823               	movf	___ftdiv@f1,w
  3621  110A  00A6               	movwf	??___ftdiv
  3622  110B  0824               	movf	___ftdiv@f1+1,w
  3623  110C  00A7               	movwf	??___ftdiv+1
  3624  110D  0825               	movf	___ftdiv@f1+2,w
  3625  110E  00A8               	movwf	??___ftdiv+2
  3626  110F  3010               	movlw	16
  3627  1110                     u3685:	
  3628  1110  1003               	clrc
  3629  1111  0CA8               	rrf	??___ftdiv+2,f
  3630  1112  0CA7               	rrf	??___ftdiv+1,f
  3631  1113  0CA6               	rrf	??___ftdiv,f
  3632  1114  3EFF               	addlw	-1
  3633  1115  1D03               	skipz
  3634  1116  2910               	goto	u3685
  3635  1117  0826               	movf	??___ftdiv,w
  3636  1118  00A9               	movwf	??___ftdiv+3
  3637  1119  0829               	movf	??___ftdiv+3,w
  3638  111A  00AF               	movwf	___ftdiv@sign
  3639  111B  0820               	movf	___ftdiv@f2,w
  3640  111C  00A6               	movwf	??___ftdiv
  3641  111D  0821               	movf	___ftdiv@f2+1,w
  3642  111E  00A7               	movwf	??___ftdiv+1
  3643  111F  0822               	movf	___ftdiv@f2+2,w
  3644  1120  00A8               	movwf	??___ftdiv+2
  3645  1121  3010               	movlw	16
  3646  1122                     u3695:	
  3647  1122  1003               	clrc
  3648  1123  0CA8               	rrf	??___ftdiv+2,f
  3649  1124  0CA7               	rrf	??___ftdiv+1,f
  3650  1125  0CA6               	rrf	??___ftdiv,f
  3651  1126  3EFF               	addlw	-1
  3652  1127  1D03               	skipz
  3653  1128  2922               	goto	u3695
  3654  1129  0826               	movf	??___ftdiv,w
  3655  112A  00A9               	movwf	??___ftdiv+3
  3656  112B  0829               	movf	??___ftdiv+3,w
  3657  112C  06AF               	xorwf	___ftdiv@sign,f
  3658  112D  3080               	movlw	128
  3659  112E  00A6               	movwf	??___ftdiv
  3660  112F  0826               	movf	??___ftdiv,w
  3661  1130  05AF               	andwf	___ftdiv@sign,f
  3662  1131  17A4               	bsf	___ftdiv@f1+1,7
  3663  1132  30FF               	movlw	255
  3664  1133  05A3               	andwf	___ftdiv@f1,f
  3665  1134  30FF               	movlw	255
  3666  1135  05A4               	andwf	___ftdiv@f1+1,f
  3667  1136  3000               	movlw	0
  3668  1137  05A5               	andwf	___ftdiv@f1+2,f
  3669  1138  17A1               	bsf	___ftdiv@f2+1,7
  3670  1139  30FF               	movlw	255
  3671  113A  05A0               	andwf	___ftdiv@f2,f
  3672  113B  30FF               	movlw	255
  3673  113C  05A1               	andwf	___ftdiv@f2+1,f
  3674  113D  3000               	movlw	0
  3675  113E  05A2               	andwf	___ftdiv@f2+2,f
  3676  113F  3018               	movlw	24
  3677  1140  00A6               	movwf	??___ftdiv
  3678  1141  0826               	movf	??___ftdiv,w
  3679  1142  00AA               	movwf	___ftdiv@cntr
  3680  1143                     l2767:	
  3681  1143  3001               	movlw	1
  3682  1144                     u3705:	
  3683  1144  1003               	clrc
  3684  1145  0DAB               	rlf	___ftdiv@f3,f
  3685  1146  0DAC               	rlf	___ftdiv@f3+1,f
  3686  1147  0DAD               	rlf	___ftdiv@f3+2,f
  3687  1148  3EFF               	addlw	-1
  3688  1149  1D03               	skipz
  3689  114A  2944               	goto	u3705
  3690  114B  0822               	movf	___ftdiv@f2+2,w
  3691  114C  0225               	subwf	___ftdiv@f1+2,w
  3692  114D  1D03               	skipz
  3693  114E  2955               	goto	u3715
  3694  114F  0821               	movf	___ftdiv@f2+1,w
  3695  1150  0224               	subwf	___ftdiv@f1+1,w
  3696  1151  1D03               	skipz
  3697  1152  2955               	goto	u3715
  3698  1153  0820               	movf	___ftdiv@f2,w
  3699  1154  0223               	subwf	___ftdiv@f1,w
  3700  1155                     u3715:	
  3701  1155  1C03               	skipc
  3702  1156  2962               	goto	l2775
  3703  1157  0820               	movf	___ftdiv@f2,w
  3704  1158  02A3               	subwf	___ftdiv@f1,f
  3705  1159  0821               	movf	___ftdiv@f2+1,w
  3706  115A  1C03               	skipc
  3707  115B  0F21               	incfsz	___ftdiv@f2+1,w
  3708  115C  02A4               	subwf	___ftdiv@f1+1,f
  3709  115D  0822               	movf	___ftdiv@f2+2,w
  3710  115E  1C03               	skipc
  3711  115F  0A22               	incf	___ftdiv@f2+2,w
  3712  1160  02A5               	subwf	___ftdiv@f1+2,f
  3713  1161  142B               	bsf	___ftdiv@f3,0
  3714  1162                     l2775:	
  3715  1162  3001               	movlw	1
  3716  1163                     u3725:	
  3717  1163  1003               	clrc
  3718  1164  0DA3               	rlf	___ftdiv@f1,f
  3719  1165  0DA4               	rlf	___ftdiv@f1+1,f
  3720  1166  0DA5               	rlf	___ftdiv@f1+2,f
  3721  1167  3EFF               	addlw	-1
  3722  1168  1D03               	skipz
  3723  1169  2963               	goto	u3725
  3724  116A  3001               	movlw	1
  3725  116B  02AA               	subwf	___ftdiv@cntr,f
  3726  116C  1D03               	btfss	3,2
  3727  116D  2943               	goto	l2767
  3728  116E  082B               	movf	___ftdiv@f3,w
  3729  116F  00F0               	movwf	___ftpack@arg
  3730  1170  082C               	movf	___ftdiv@f3+1,w
  3731  1171  00F1               	movwf	___ftpack@arg+1
  3732  1172  082D               	movf	___ftdiv@f3+2,w
  3733  1173  00F2               	movwf	___ftpack@arg+2
  3734  1174  082E               	movf	___ftdiv@exp,w
  3735  1175  00A6               	movwf	??___ftdiv
  3736  1176  0826               	movf	??___ftdiv,w
  3737  1177  00F3               	movwf	___ftpack@exp
  3738  1178  082F               	movf	___ftdiv@sign,w
  3739  1179  00A7               	movwf	??___ftdiv+1
  3740  117A  0827               	movf	??___ftdiv+1,w
  3741  117B  00F4               	movwf	___ftpack@sign
  3742  117C  160A  158A  2447   	fcall	___ftpack
  3743  117F  0870               	movf	?___ftpack,w
  3744  1180  1283               	bcf	3,5	;RP0=0, select bank0
  3745  1181  1303               	bcf	3,6	;RP1=0, select bank0
  3746  1182  00A0               	movwf	?___ftdiv
  3747  1183  0871               	movf	?___ftpack+1,w
  3748  1184  00A1               	movwf	?___ftdiv+1
  3749  1185  0872               	movf	?___ftpack+2,w
  3750  1186  00A2               	movwf	?___ftdiv+2
  3751  1187  0008               	return
  3752  1188                     __end_of___ftdiv:	
  3753                           
  3754                           	psect	text10
  3755  19A8                     __ptext10:	
  3756 ;; *************** function ___awtoft *****************
  3757 ;; Defined at:
  3758 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awtoft.c"
  3759 ;; Parameters:    Size  Location     Type
  3760 ;;  c               2    8[COMMON] int 
  3761 ;; Auto vars:     Size  Location     Type
  3762 ;;  sign            1   13[COMMON] unsigned char 
  3763 ;; Return value:  Size  Location     Type
  3764 ;;                  3    8[COMMON] float 
  3765 ;; Registers used:
  3766 ;;		wreg, status,2, status,0, pclath, cstack
  3767 ;; Tracked objects:
  3768 ;;		On entry : 0/0
  3769 ;;		On exit  : 0/0
  3770 ;;		Unchanged: 0/0
  3771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3772 ;;      Params:         3       0       0       0       0
  3773 ;;      Locals:         1       0       0       0       0
  3774 ;;      Temps:          2       0       0       0       0
  3775 ;;      Totals:         6       0       0       0       0
  3776 ;;Total ram usage:        6 bytes
  3777 ;; Hardware stack levels used:    1
  3778 ;; Hardware stack levels required when called:    1
  3779 ;; This function calls:
  3780 ;;		___ftpack
  3781 ;; This function is called by:
  3782 ;;		_main
  3783 ;;		_exp
  3784 ;;		_log
  3785 ;; This function uses a non-reentrant model
  3786 ;;
  3787                           
  3788                           
  3789                           ;psect for function ___awtoft
  3790  19A8                     ___awtoft:	
  3791                           
  3792                           ;incstack = 0
  3793                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  3794  19A8  01FD               	clrf	___awtoft@sign
  3795  19A9  1FF9               	btfss	___awtoft@c+1,7
  3796  19AA  29B2               	goto	l2737
  3797  19AB  09F8               	comf	___awtoft@c,f
  3798  19AC  09F9               	comf	___awtoft@c+1,f
  3799  19AD  0AF8               	incf	___awtoft@c,f
  3800  19AE  1903               	skipnz
  3801  19AF  0AF9               	incf	___awtoft@c+1,f
  3802  19B0  01FD               	clrf	___awtoft@sign
  3803  19B1  0AFD               	incf	___awtoft@sign,f
  3804  19B2                     l2737:	
  3805  19B2  0878               	movf	___awtoft@c,w
  3806  19B3  00F0               	movwf	___ftpack@arg
  3807  19B4  0879               	movf	___awtoft@c+1,w
  3808  19B5  00F1               	movwf	___ftpack@arg+1
  3809  19B6  01F2               	clrf	___ftpack@arg+2
  3810  19B7  308E               	movlw	142
  3811  19B8  00FB               	movwf	??___awtoft
  3812  19B9  087B               	movf	??___awtoft,w
  3813  19BA  00F3               	movwf	___ftpack@exp
  3814  19BB  087D               	movf	___awtoft@sign,w
  3815  19BC  00FC               	movwf	??___awtoft+1
  3816  19BD  087C               	movf	??___awtoft+1,w
  3817  19BE  00F4               	movwf	___ftpack@sign
  3818  19BF  160A  158A  2447   	fcall	___ftpack
  3819  19C2  0870               	movf	?___ftpack,w
  3820  19C3  00F8               	movwf	?___awtoft
  3821  19C4  0871               	movf	?___ftpack+1,w
  3822  19C5  00F9               	movwf	?___awtoft+1
  3823  19C6  0872               	movf	?___ftpack+2,w
  3824  19C7  00FA               	movwf	?___awtoft+2
  3825  19C8  0008               	return
  3826  19C9                     __end_of___awtoft:	
  3827                           
  3828                           	psect	text11
  3829  1925                     __ptext11:	
  3830 ;; *************** function _init_I2C_Master *****************
  3831 ;; Defined at:
  3832 ;;		line 186 in file "D:\From old laptop\Subjects\Uni\3rd Year M\2nd sem\Embedded Systems\Practical Activities\Practical
      + Activity #7\To Submit\LE7-3.c"
  3833 ;; Parameters:    Size  Location     Type
  3834 ;;		None
  3835 ;; Auto vars:     Size  Location     Type
  3836 ;;		None
  3837 ;; Return value:  Size  Location     Type
  3838 ;;		None               void
  3839 ;; Registers used:
  3840 ;;		wreg, status,2
  3841 ;; Tracked objects:
  3842 ;;		On entry : 0/0
  3843 ;;		On exit  : 0/0
  3844 ;;		Unchanged: 0/0
  3845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3846 ;;      Params:         0       0       0       0       0
  3847 ;;      Locals:         0       0       0       0       0
  3848 ;;      Temps:          0       0       0       0       0
  3849 ;;      Totals:         0       0       0       0       0
  3850 ;;Total ram usage:        0 bytes
  3851 ;; Hardware stack levels used:    1
  3852 ;; This function calls:
  3853 ;;		Nothing
  3854 ;; This function is called by:
  3855 ;;		_main
  3856 ;; This function uses a non-reentrant model
  3857 ;;
  3858                           
  3859                           
  3860                           ;psect for function _init_I2C_Master
  3861  1925                     _init_I2C_Master:	
  3862                           
  3863                           ;LE7-3.c: 187: TRISC3 = 1;
  3864                           
  3865                           ;incstack = 0
  3866                           ; Regs used in _init_I2C_Master: [wreg+status,2]
  3867  1925  1683               	bsf	3,5	;RP0=1, select bank1
  3868  1926  1303               	bcf	3,6	;RP1=0, select bank1
  3869  1927  1587               	bsf	7,3	;volatile
  3870                           
  3871                           ;LE7-3.c: 188: TRISC4 = 1;
  3872  1928  1607               	bsf	7,4	;volatile
  3873                           
  3874                           ;LE7-3.c: 189: SSPCON = 0x28;
  3875  1929  3028               	movlw	40
  3876  192A  1283               	bcf	3,5	;RP0=0, select bank0
  3877  192B  1303               	bcf	3,6	;RP1=0, select bank0
  3878  192C  0094               	movwf	20	;volatile
  3879                           
  3880                           ;LE7-3.c: 190: SSPCON2 = 0x00;
  3881  192D  1683               	bsf	3,5	;RP0=1, select bank1
  3882  192E  1303               	bcf	3,6	;RP1=0, select bank1
  3883  192F  0191               	clrf	17	;volatile
  3884                           
  3885                           ;LE7-3.c: 192: SSPSTAT = 0x00;
  3886  1930  0194               	clrf	20	;volatile
  3887                           
  3888                           ;LE7-3.c: 193: SSPADD = 0x09;
  3889  1931  3009               	movlw	9
  3890  1932  0093               	movwf	19	;volatile
  3891  1933  0008               	return
  3892  1934                     __end_of_init_I2C_Master:	
  3893                           
  3894                           	psect	text12
  3895  1988                     __ptext12:	
  3896 ;; *************** function _initLCD *****************
  3897 ;; Defined at:
  3898 ;;		line 118 in file "D:\From old laptop\Subjects\Uni\3rd Year M\2nd sem\Embedded Systems\Practical Activities\Practical
      + Activity #7\To Submit\LE7-3.c"
  3899 ;; Parameters:    Size  Location     Type
  3900 ;;		None
  3901 ;; Auto vars:     Size  Location     Type
  3902 ;;		None
  3903 ;; Return value:  Size  Location     Type
  3904 ;;		None               void
  3905 ;; Registers used:
  3906 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3907 ;; Tracked objects:
  3908 ;;		On entry : 0/0
  3909 ;;		On exit  : 0/0
  3910 ;;		Unchanged: 0/0
  3911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3912 ;;      Params:         0       0       0       0       0
  3913 ;;      Locals:         0       0       0       0       0
  3914 ;;      Temps:          0       0       0       0       0
  3915 ;;      Totals:         0       0       0       0       0
  3916 ;;Total ram usage:        0 bytes
  3917 ;; Hardware stack levels used:    1
  3918 ;; Hardware stack levels required when called:    2
  3919 ;; This function calls:
  3920 ;;		_delay_ms
  3921 ;;		_instCtrl
  3922 ;; This function is called by:
  3923 ;;		_main
  3924 ;; This function uses a non-reentrant model
  3925 ;;
  3926                           
  3927                           
  3928                           ;psect for function _initLCD
  3929  1988                     _initLCD:	
  3930                           
  3931                           ;LE7-3.c: 119: delay_ms(1);
  3932                           
  3933                           ;incstack = 0
  3934                           ; Regs used in _initLCD: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3935  1988  3001               	movlw	1
  3936  1989  00F0               	movwf	delay_ms@cnt
  3937  198A  3000               	movlw	0
  3938  198B  00F1               	movwf	delay_ms@cnt+1
  3939  198C  120A  158A  2000  160A  158A  	fcall	_delay_ms
  3940                           
  3941                           ;LE7-3.c: 120: instCtrl(0x38);
  3942  1991  3038               	movlw	56
  3943  1992  160A  158A  2146  160A  158A  	fcall	_instCtrl
  3944                           
  3945                           ;LE7-3.c: 121: instCtrl(0x01);
  3946  1997  3001               	movlw	1
  3947  1998  160A  158A  2146  160A  158A  	fcall	_instCtrl
  3948                           
  3949                           ;LE7-3.c: 122: instCtrl(0x06);
  3950  199D  3006               	movlw	6
  3951  199E  160A  158A  2146  160A  158A  	fcall	_instCtrl
  3952                           
  3953                           ;LE7-3.c: 123: instCtrl(0x0E);
  3954  19A3  300E               	movlw	14
  3955  19A4  160A  158A  2146   	fcall	_instCtrl
  3956  19A7  0008               	return
  3957  19A8                     __end_of_initLCD:	
  3958                           
  3959                           	psect	text13
  3960  1E39                     __ptext13:	
  3961 ;; *************** function _dispT *****************
  3962 ;; Defined at:
  3963 ;;		line 159 in file "D:\From old laptop\Subjects\Uni\3rd Year M\2nd sem\Embedded Systems\Practical Activities\Practical
      + Activity #7\To Submit\LE7-3.c"
  3964 ;; Parameters:    Size  Location     Type
  3965 ;;		None
  3966 ;; Auto vars:     Size  Location     Type
  3967 ;;  i               2   42[BANK1 ] int 
  3968 ;;  val             8   34[BANK1 ] unsigned char [8]
  3969 ;; Return value:  Size  Location     Type
  3970 ;;		None               void
  3971 ;; Registers used:
  3972 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3973 ;; Tracked objects:
  3974 ;;		On entry : 0/0
  3975 ;;		On exit  : 0/0
  3976 ;;		Unchanged: 0/0
  3977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3978 ;;      Params:         0       0       0       0       0
  3979 ;;      Locals:         0       0      10       0       0
  3980 ;;      Temps:          0       1       0       0       0
  3981 ;;      Totals:         0       1      10       0       0
  3982 ;;Total ram usage:       11 bytes
  3983 ;; Hardware stack levels used:    1
  3984 ;; Hardware stack levels required when called:    4
  3985 ;; This function calls:
  3986 ;;		_dataCtrl
  3987 ;;		_instCtrl
  3988 ;;		_sprintf
  3989 ;; This function is called by:
  3990 ;;		_main
  3991 ;; This function uses a non-reentrant model
  3992 ;;
  3993                           
  3994                           
  3995                           ;psect for function _dispT
  3996  1E39                     _dispT:	
  3997                           
  3998                           ;LE7-3.c: 160: instCtrl(0xC0);
  3999                           
  4000                           ;incstack = 0
  4001                           ; Regs used in _dispT: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4002  1E39  30C0               	movlw	192
  4003  1E3A  160A  158A  2146  160A  158A  	fcall	_instCtrl
  4004                           
  4005                           ;LE7-3.c: 162: dataCtrl('T');
  4006  1E3F  3054               	movlw	84
  4007  1E40  160A  158A  2134  160A  158A  	fcall	_dataCtrl
  4008                           
  4009                           ;LE7-3.c: 163: dataCtrl('e');
  4010  1E45  3065               	movlw	101
  4011  1E46  160A  158A  2134  160A  158A  	fcall	_dataCtrl
  4012                           
  4013                           ;LE7-3.c: 164: dataCtrl('m');
  4014  1E4B  306D               	movlw	109
  4015  1E4C  160A  158A  2134  160A  158A  	fcall	_dataCtrl
  4016                           
  4017                           ;LE7-3.c: 165: dataCtrl('p');
  4018  1E51  3070               	movlw	112
  4019  1E52  160A  158A  2134  160A  158A  	fcall	_dataCtrl
  4020                           
  4021                           ;LE7-3.c: 166: dataCtrl('e');
  4022  1E57  3065               	movlw	101
  4023  1E58  160A  158A  2134  160A  158A  	fcall	_dataCtrl
  4024                           
  4025                           ;LE7-3.c: 167: dataCtrl('r');
  4026  1E5D  3072               	movlw	114
  4027  1E5E  160A  158A  2134  160A  158A  	fcall	_dataCtrl
  4028                           
  4029                           ;LE7-3.c: 168: dataCtrl('a');
  4030  1E63  3061               	movlw	97
  4031  1E64  160A  158A  2134  160A  158A  	fcall	_dataCtrl
  4032                           
  4033                           ;LE7-3.c: 169: dataCtrl('t');
  4034  1E69  3074               	movlw	116
  4035  1E6A  160A  158A  2134  160A  158A  	fcall	_dataCtrl
  4036                           
  4037                           ;LE7-3.c: 170: dataCtrl('u');
  4038  1E6F  3075               	movlw	117
  4039  1E70  160A  158A  2134  160A  158A  	fcall	_dataCtrl
  4040                           
  4041                           ;LE7-3.c: 171: dataCtrl('r');
  4042  1E75  3072               	movlw	114
  4043  1E76  160A  158A  2134  160A  158A  	fcall	_dataCtrl
  4044                           
  4045                           ;LE7-3.c: 172: dataCtrl('e');
  4046  1E7B  3065               	movlw	101
  4047  1E7C  160A  158A  2134  160A  158A  	fcall	_dataCtrl
  4048                           
  4049                           ;LE7-3.c: 173: dataCtrl(':');
  4050  1E81  303A               	movlw	58
  4051  1E82  160A  158A  2134  160A  158A  	fcall	_dataCtrl
  4052                           
  4053                           ;LE7-3.c: 175: char val[8];
  4054                           ;LE7-3.c: 176: sprintf(val, "%.1f", T);
  4055  1E87  30B0               	movlw	(STR_2-__stringbase)& (0+255)
  4056  1E88  1283               	bcf	3,5	;RP0=0, select bank0
  4057  1E89  1303               	bcf	3,6	;RP1=0, select bank0
  4058  1E8A  00ED               	movwf	??_dispT
  4059  1E8B  086D               	movf	??_dispT,w
  4060  1E8C  00E3               	movwf	sprintf@f
  4061  1E8D  1683               	bsf	3,5	;RP0=1, select bank1
  4062  1E8E  1303               	bcf	3,6	;RP1=0, select bank1
  4063  1E8F  085E               	movf	_T^(0+128),w
  4064  1E90  1283               	bcf	3,5	;RP0=0, select bank0
  4065  1E91  1303               	bcf	3,6	;RP1=0, select bank0
  4066  1E92  00E4               	movwf	?_sprintf+1
  4067  1E93  1683               	bsf	3,5	;RP0=1, select bank1
  4068  1E94  1303               	bcf	3,6	;RP1=0, select bank1
  4069  1E95  085F               	movf	(_T+1)^(0+128),w
  4070  1E96  1283               	bcf	3,5	;RP0=0, select bank0
  4071  1E97  1303               	bcf	3,6	;RP1=0, select bank0
  4072  1E98  00E5               	movwf	?_sprintf+2
  4073  1E99  1683               	bsf	3,5	;RP0=1, select bank1
  4074  1E9A  1303               	bcf	3,6	;RP1=0, select bank1
  4075  1E9B  0860               	movf	(_T+2)^(0+128),w
  4076  1E9C  1283               	bcf	3,5	;RP0=0, select bank0
  4077  1E9D  1303               	bcf	3,6	;RP1=0, select bank0
  4078  1E9E  00E6               	movwf	?_sprintf+3
  4079  1E9F  30C2               	movlw	dispT@val& (0+255)
  4080  1EA0  120A  118A  2036  160A  158A  	fcall	_sprintf
  4081                           
  4082                           ;LE7-3.c: 178: for (int i = 0; val[i] != '\0'; i++) {
  4083  1EA5  1683               	bsf	3,5	;RP0=1, select bank1
  4084  1EA6  1303               	bcf	3,6	;RP1=0, select bank1
  4085  1EA7  01CA               	clrf	dispT@i^(0+128)
  4086  1EA8  01CB               	clrf	(dispT@i+1)^(0+128)
  4087  1EA9                     l3365:	
  4088  1EA9  084A               	movf	dispT@i^(0+128),w
  4089  1EAA  3EC2               	addlw	dispT@val& (0+255)
  4090  1EAB  0084               	movwf	4
  4091  1EAC  1383               	bcf	3,7	;select IRP bank1
  4092  1EAD  0880               	movf	0,f
  4093  1EAE  1903               	btfsc	3,2
  4094  1EAF  2EC3               	goto	l3367
  4095                           
  4096                           ;LE7-3.c: 179: dataCtrl(val[i]);
  4097  1EB0  084A               	movf	dispT@i^(0+128),w
  4098  1EB1  3EC2               	addlw	dispT@val& (0+255)
  4099  1EB2  0084               	movwf	4
  4100  1EB3  1383               	bcf	3,7	;select IRP bank1
  4101  1EB4  0800               	movf	0,w
  4102  1EB5  160A  158A  2134  160A  158A  	fcall	_dataCtrl
  4103  1EBA  3001               	movlw	1
  4104  1EBB  1683               	bsf	3,5	;RP0=1, select bank1
  4105  1EBC  1303               	bcf	3,6	;RP1=0, select bank1
  4106  1EBD  07CA               	addwf	dispT@i^(0+128),f
  4107  1EBE  1803               	skipnc
  4108  1EBF  0ACB               	incf	(dispT@i+1)^(0+128),f
  4109  1EC0  3000               	movlw	0
  4110  1EC1  07CB               	addwf	(dispT@i+1)^(0+128),f
  4111  1EC2  2EA9               	goto	l3365
  4112  1EC3                     l3367:	
  4113                           
  4114                           ;LE7-3.c: 180: }
  4115                           ;LE7-3.c: 181: dataCtrl(' ');
  4116  1EC3  3020               	movlw	32
  4117  1EC4  160A  158A  2134  160A  158A  	fcall	_dataCtrl
  4118                           
  4119                           ;LE7-3.c: 182: dataCtrl('C');
  4120  1EC9  3043               	movlw	67
  4121  1ECA  160A  158A  2134   	fcall	_dataCtrl
  4122  1ECD  0008               	return
  4123  1ECE                     __end_of_dispT:	
  4124                           
  4125                           	psect	text14
  4126  1D28                     __ptext14:	
  4127 ;; *************** function _dispRH *****************
  4128 ;; Defined at:
  4129 ;;		line 135 in file "D:\From old laptop\Subjects\Uni\3rd Year M\2nd sem\Embedded Systems\Practical Activities\Practical
      + Activity #7\To Submit\LE7-3.c"
  4130 ;; Parameters:    Size  Location     Type
  4131 ;;		None
  4132 ;; Auto vars:     Size  Location     Type
  4133 ;;  val             4   34[BANK1 ] unsigned char [4]
  4134 ;; Return value:  Size  Location     Type
  4135 ;;		None               void
  4136 ;; Registers used:
  4137 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4138 ;; Tracked objects:
  4139 ;;		On entry : 0/0
  4140 ;;		On exit  : 0/0
  4141 ;;		Unchanged: 0/0
  4142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4143 ;;      Params:         0       0       0       0       0
  4144 ;;      Locals:         0       0       4       0       0
  4145 ;;      Temps:          0       1       0       0       0
  4146 ;;      Totals:         0       1       4       0       0
  4147 ;;Total ram usage:        5 bytes
  4148 ;; Hardware stack levels used:    1
  4149 ;; Hardware stack levels required when called:    4
  4150 ;; This function calls:
  4151 ;;		_dataCtrl
  4152 ;;		_instCtrl
  4153 ;;		_sprintf
  4154 ;; This function is called by:
  4155 ;;		_main
  4156 ;; This function uses a non-reentrant model
  4157 ;;
  4158                           
  4159                           
  4160                           ;psect for function _dispRH
  4161  1D28                     _dispRH:	
  4162                           
  4163                           ;LE7-3.c: 136: instCtrl(0x80);
  4164                           
  4165                           ;incstack = 0
  4166                           ; Regs used in _dispRH: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4167  1D28  3080               	movlw	128
  4168  1D29  160A  158A  2146  160A  158A  	fcall	_instCtrl
  4169                           
  4170                           ;LE7-3.c: 138: dataCtrl('H');
  4171  1D2E  3048               	movlw	72
  4172  1D2F  160A  158A  2134  160A  158A  	fcall	_dataCtrl
  4173                           
  4174                           ;LE7-3.c: 139: dataCtrl('u');
  4175  1D34  3075               	movlw	117
  4176  1D35  160A  158A  2134  160A  158A  	fcall	_dataCtrl
  4177                           
  4178                           ;LE7-3.c: 140: dataCtrl('m');
  4179  1D3A  306D               	movlw	109
  4180  1D3B  160A  158A  2134  160A  158A  	fcall	_dataCtrl
  4181                           
  4182                           ;LE7-3.c: 141: dataCtrl('i');
  4183  1D40  3069               	movlw	105
  4184  1D41  160A  158A  2134  160A  158A  	fcall	_dataCtrl
  4185                           
  4186                           ;LE7-3.c: 142: dataCtrl('d');
  4187  1D46  3064               	movlw	100
  4188  1D47  160A  158A  2134  160A  158A  	fcall	_dataCtrl
  4189                           
  4190                           ;LE7-3.c: 143: dataCtrl('i');
  4191  1D4C  3069               	movlw	105
  4192  1D4D  160A  158A  2134  160A  158A  	fcall	_dataCtrl
  4193                           
  4194                           ;LE7-3.c: 144: dataCtrl('t');
  4195  1D52  3074               	movlw	116
  4196  1D53  160A  158A  2134  160A  158A  	fcall	_dataCtrl
  4197                           
  4198                           ;LE7-3.c: 145: dataCtrl('y');
  4199  1D58  3079               	movlw	121
  4200  1D59  160A  158A  2134  160A  158A  	fcall	_dataCtrl
  4201                           
  4202                           ;LE7-3.c: 146: dataCtrl(':');
  4203  1D5E  303A               	movlw	58
  4204  1D5F  160A  158A  2134  160A  158A  	fcall	_dataCtrl
  4205                           
  4206                           ;LE7-3.c: 148: char val[4];
  4207                           ;LE7-3.c: 149: val[2] = ' ';
  4208  1D64  3020               	movlw	32
  4209  1D65  1283               	bcf	3,5	;RP0=0, select bank0
  4210  1D66  1303               	bcf	3,6	;RP1=0, select bank0
  4211  1D67  00ED               	movwf	??_dispRH
  4212  1D68  086D               	movf	??_dispRH,w
  4213  1D69  1683               	bsf	3,5	;RP0=1, select bank1
  4214  1D6A  1303               	bcf	3,6	;RP1=0, select bank1
  4215  1D6B  00C4               	movwf	(dispRH@val^(0+128)+2)
  4216                           
  4217                           ;LE7-3.c: 150: val[3] = ' ';
  4218  1D6C  3020               	movlw	32
  4219  1D6D  1283               	bcf	3,5	;RP0=0, select bank0
  4220  1D6E  1303               	bcf	3,6	;RP1=0, select bank0
  4221  1D6F  00ED               	movwf	??_dispRH
  4222  1D70  086D               	movf	??_dispRH,w
  4223  1D71  1683               	bsf	3,5	;RP0=1, select bank1
  4224  1D72  1303               	bcf	3,6	;RP1=0, select bank1
  4225  1D73  00C5               	movwf	(dispRH@val^(0+128)+3)
  4226                           
  4227                           ;LE7-3.c: 151: sprintf(val, "%d", RH);
  4228  1D74  30B5               	movlw	(STR_1-__stringbase)& (0+255)
  4229  1D75  1283               	bcf	3,5	;RP0=0, select bank0
  4230  1D76  1303               	bcf	3,6	;RP1=0, select bank0
  4231  1D77  00ED               	movwf	??_dispRH
  4232  1D78  086D               	movf	??_dispRH,w
  4233  1D79  00E3               	movwf	sprintf@f
  4234  1D7A  1683               	bsf	3,5	;RP0=1, select bank1
  4235  1D7B  1303               	bcf	3,6	;RP1=0, select bank1
  4236  1D7C  0862               	movf	(_RH+1)^(0+128),w
  4237  1D7D  1283               	bcf	3,5	;RP0=0, select bank0
  4238  1D7E  1303               	bcf	3,6	;RP1=0, select bank0
  4239  1D7F  01E5               	clrf	?_sprintf+2
  4240  1D80  07E5               	addwf	?_sprintf+2,f
  4241  1D81  1683               	bsf	3,5	;RP0=1, select bank1
  4242  1D82  1303               	bcf	3,6	;RP1=0, select bank1
  4243  1D83  0861               	movf	_RH^(0+128),w
  4244  1D84  1283               	bcf	3,5	;RP0=0, select bank0
  4245  1D85  1303               	bcf	3,6	;RP1=0, select bank0
  4246  1D86  01E4               	clrf	?_sprintf+1
  4247  1D87  07E4               	addwf	?_sprintf+1,f
  4248  1D88  30C2               	movlw	dispRH@val& (0+255)
  4249  1D89  120A  118A  2036  160A  158A  	fcall	_sprintf
  4250                           
  4251                           ;LE7-3.c: 153: dataCtrl(val[0]);
  4252  1D8E  1683               	bsf	3,5	;RP0=1, select bank1
  4253  1D8F  1303               	bcf	3,6	;RP1=0, select bank1
  4254  1D90  0842               	movf	dispRH@val^(0+128),w
  4255  1D91  160A  158A  2134  160A  158A  	fcall	_dataCtrl
  4256                           
  4257                           ;LE7-3.c: 154: dataCtrl(val[1]);
  4258  1D96  1683               	bsf	3,5	;RP0=1, select bank1
  4259  1D97  1303               	bcf	3,6	;RP1=0, select bank1
  4260  1D98  0843               	movf	(dispRH@val^(0+128)+1),w
  4261  1D99  160A  158A  2134  160A  158A  	fcall	_dataCtrl
  4262                           
  4263                           ;LE7-3.c: 155: dataCtrl(val[2]);
  4264  1D9E  1683               	bsf	3,5	;RP0=1, select bank1
  4265  1D9F  1303               	bcf	3,6	;RP1=0, select bank1
  4266  1DA0  0844               	movf	(dispRH@val^(0+128)+2),w
  4267  1DA1  160A  158A  2134  160A  158A  	fcall	_dataCtrl
  4268                           
  4269                           ;LE7-3.c: 156: dataCtrl('%');
  4270  1DA6  3025               	movlw	37
  4271  1DA7  160A  158A  2134   	fcall	_dataCtrl
  4272  1DAA  0008               	return
  4273  1DAB                     __end_of_dispRH:	
  4274                           
  4275                           	psect	text15
  4276  0036                     __ptext15:	
  4277 ;; *************** function _sprintf *****************
  4278 ;; Defined at:
  4279 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  4280 ;; Parameters:    Size  Location     Type
  4281 ;;  sp              1    wreg     PTR unsigned char 
  4282 ;;		 -> dispT@val(8), dispRH@val(4), 
  4283 ;;  f               1   67[BANK0 ] PTR const unsigned char 
  4284 ;;		 -> STR_2(5), STR_1(3), 
  4285 ;; Auto vars:     Size  Location     Type
  4286 ;;  sp              1   27[BANK1 ] PTR unsigned char 
  4287 ;;		 -> dispT@val(8), dispRH@val(4), 
  4288 ;;  vd              4    7[BANK1 ] unsigned long 
  4289 ;;  vd              4   11[BANK1 ] unsigned long 
  4290 ;;  _val            4   23[BANK1 ] struct .
  4291 ;;  fval            3   30[BANK1 ] struct .
  4292 ;;  integ           3   18[BANK1 ] struct .
  4293 ;;  ival            3    0        struct .
  4294 ;;  prec            2   28[BANK1 ] int 
  4295 ;;  exp             2   21[BANK1 ] int 
  4296 ;;  flag            2   16[BANK1 ] unsigned short 
  4297 ;;  width           2    0        int 
  4298 ;;  c               1   33[BANK1 ] char 
  4299 ;;  ap              1   15[BANK1 ] PTR void [1]
  4300 ;;		 -> ?_sprintf(2), 
  4301 ;;  d               1    0        unsigned char 
  4302 ;; Return value:  Size  Location     Type
  4303 ;;                  2   67[BANK0 ] int 
  4304 ;; Registers used:
  4305 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4306 ;; Tracked objects:
  4307 ;;		On entry : 0/0
  4308 ;;		On exit  : 0/0
  4309 ;;		Unchanged: 0/0
  4310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4311 ;;      Params:         0       4       0       0       0
  4312 ;;      Locals:         0       0      34       0       0
  4313 ;;      Temps:          0       6       0       0       0
  4314 ;;      Totals:         0      10      34       0       0
  4315 ;;Total ram usage:       44 bytes
  4316 ;; Hardware stack levels used:    1
  4317 ;; Hardware stack levels required when called:    3
  4318 ;; This function calls:
  4319 ;;		___awdiv
  4320 ;;		___ftadd
  4321 ;;		___ftge
  4322 ;;		___ftmul
  4323 ;;		___ftneg
  4324 ;;		___ftsub
  4325 ;;		___fttol
  4326 ;;		___lldiv
  4327 ;;		___llmod
  4328 ;;		___lltoft
  4329 ;;		___wmul
  4330 ;;		__div_to_l_
  4331 ;;		__tdiv_to_l_
  4332 ;;		_fround
  4333 ;;		_isdigit
  4334 ;;		_scale
  4335 ;; This function is called by:
  4336 ;;		_dispRH
  4337 ;;		_dispT
  4338 ;; This function uses a non-reentrant model
  4339 ;;
  4340                           
  4341                           
  4342                           ;psect for function _sprintf
  4343  0036                     _sprintf:	
  4344                           
  4345                           ;incstack = 0
  4346                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4347                           ;sprintf@sp stored from wreg
  4348  0036  1683               	bsf	3,5	;RP0=1, select bank1
  4349  0037  1303               	bcf	3,6	;RP1=0, select bank1
  4350  0038  00BB               	movwf	sprintf@sp^(0+128)
  4351                           
  4352                           ;doprnt.c: 494: va_list ap;
  4353                           ;doprnt.c: 499: signed char c;
  4354                           ;doprnt.c: 501: int width;
  4355                           ;doprnt.c: 504: int prec;
  4356                           ;doprnt.c: 508: unsigned short flag;
  4357                           ;doprnt.c: 515: char d;
  4358                           ;doprnt.c: 516: double fval, integ;
  4359                           ;doprnt.c: 517: int exp;
  4360                           ;doprnt.c: 518: double ival;
  4361                           ;doprnt.c: 519: union {
  4362                           ;doprnt.c: 520: unsigned long _val;
  4363                           ;doprnt.c: 521: struct {
  4364                           ;doprnt.c: 522: const char * _cp;
  4365                           ;doprnt.c: 523: unsigned _len;
  4366                           ;doprnt.c: 524: } _str;
  4367                           ;doprnt.c: 525: } _val;
  4368                           ;doprnt.c: 542: *ap = __va_start();
  4369  0039  3064               	movlw	(?_sprintf+1)& (0+255)
  4370  003A  1283               	bcf	3,5	;RP0=0, select bank0
  4371  003B  1303               	bcf	3,6	;RP1=0, select bank0
  4372  003C  00E7               	movwf	??_sprintf
  4373  003D  0867               	movf	??_sprintf,w
  4374  003E  1683               	bsf	3,5	;RP0=1, select bank1
  4375  003F  1303               	bcf	3,6	;RP1=0, select bank1
  4376  0040  00AF               	movwf	sprintf@ap^(0+128)
  4377  0041                     l3171:	
  4378                           ;doprnt.c: 545: while(c = *f++) {
  4379                           
  4380  0041  3001               	movlw	1
  4381  0042  1283               	bcf	3,5	;RP0=0, select bank0
  4382  0043  1303               	bcf	3,6	;RP1=0, select bank0
  4383  0044  07E3               	addwf	sprintf@f,f
  4384  0045  30FF               	movlw	-1
  4385  0046  0763               	addwf	sprintf@f,w
  4386  0047  0084               	movwf	4
  4387  0048  160A  118A  2000  120A  118A  	fcall	stringdir
  4388  004D  00E7               	movwf	??_sprintf
  4389  004E  0867               	movf	??_sprintf,w
  4390  004F  1683               	bsf	3,5	;RP0=1, select bank1
  4391  0050  1303               	bcf	3,6	;RP1=0, select bank1
  4392  0051  00C1               	movwf	sprintf@c^(0+128)
  4393  0052  08C1               	movf	sprintf@c^(0+128),f
  4394  0053  1903               	btfsc	3,2
  4395  0054  2FEE               	goto	l3173
  4396                           
  4397                           ;doprnt.c: 547: if(c != '%')
  4398  0055  0841               	movf	sprintf@c^(0+128),w
  4399  0056  3A25               	xorlw	37
  4400  0057  1903               	skipnz
  4401  0058  286D               	goto	l2955
  4402                           
  4403                           ;doprnt.c: 549: {
  4404                           ;doprnt.c: 550: ((*sp++ = (c)));
  4405  0059  0841               	movf	sprintf@c^(0+128),w
  4406  005A  1283               	bcf	3,5	;RP0=0, select bank0
  4407  005B  1303               	bcf	3,6	;RP1=0, select bank0
  4408  005C  00E7               	movwf	??_sprintf
  4409  005D  1683               	bsf	3,5	;RP0=1, select bank1
  4410  005E  1303               	bcf	3,6	;RP1=0, select bank1
  4411  005F  083B               	movf	sprintf@sp^(0+128),w
  4412  0060  0084               	movwf	4
  4413  0061  1283               	bcf	3,5	;RP0=0, select bank0
  4414  0062  1303               	bcf	3,6	;RP1=0, select bank0
  4415  0063  0867               	movf	??_sprintf,w
  4416  0064  1383               	bcf	3,7	;select IRP bank0
  4417  0065  0080               	movwf	0
  4418  0066  3001               	movlw	1
  4419  0067  00E7               	movwf	??_sprintf
  4420  0068  0867               	movf	??_sprintf,w
  4421  0069  1683               	bsf	3,5	;RP0=1, select bank1
  4422  006A  1303               	bcf	3,6	;RP1=0, select bank1
  4423  006B  07BB               	addwf	sprintf@sp^(0+128),f
  4424                           
  4425                           ;doprnt.c: 551: continue;
  4426  006C  2841               	goto	l3171
  4427  006D                     l2955:	
  4428                           
  4429                           ;doprnt.c: 552: }
  4430                           ;doprnt.c: 557: flag = 0;
  4431  006D  01B0               	clrf	sprintf@flag^(0+128)
  4432  006E  01B1               	clrf	(sprintf@flag+1)^(0+128)
  4433                           
  4434                           ;doprnt.c: 620: if(*f == '.') {
  4435  006F  1283               	bcf	3,5	;RP0=0, select bank0
  4436  0070  1303               	bcf	3,6	;RP1=0, select bank0
  4437  0071  0863               	movf	sprintf@f,w
  4438  0072  0084               	movwf	4
  4439  0073  160A  118A  2000  120A  118A  	fcall	stringdir
  4440  0078  3A2E               	xorlw	46
  4441  0079  1D03               	skipz
  4442  007A  28CD               	goto	l2971
  4443                           
  4444                           ;doprnt.c: 621: flag |= 0x4000;
  4445  007B  1683               	bsf	3,5	;RP0=1, select bank1
  4446  007C  1303               	bcf	3,6	;RP1=0, select bank1
  4447  007D  1731               	bsf	(sprintf@flag^(0+128)+1),6
  4448                           
  4449                           ;doprnt.c: 622: f++;
  4450  007E  3001               	movlw	1
  4451  007F  1283               	bcf	3,5	;RP0=0, select bank0
  4452  0080  1303               	bcf	3,6	;RP1=0, select bank0
  4453  0081  00E7               	movwf	??_sprintf
  4454  0082  0867               	movf	??_sprintf,w
  4455  0083  07E3               	addwf	sprintf@f,f
  4456                           
  4457                           ;doprnt.c: 629: {
  4458                           ;doprnt.c: 630: prec = 0;
  4459  0084  1683               	bsf	3,5	;RP0=1, select bank1
  4460  0085  1303               	bcf	3,6	;RP1=0, select bank1
  4461  0086  01BC               	clrf	sprintf@prec^(0+128)
  4462  0087  01BD               	clrf	(sprintf@prec+1)^(0+128)
  4463  0088                     l2969:	
  4464                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
  4465                           
  4466  0088  1283               	bcf	3,5	;RP0=0, select bank0
  4467  0089  0863               	movf	sprintf@f,w
  4468  008A  0084               	movwf	4
  4469  008B  160A  118A  2000  120A  118A  	fcall	stringdir
  4470  0090  160A  158A  2117  120A  118A  	fcall	_isdigit
  4471  0095  1C03               	btfss	3,0
  4472  0096  28D5               	goto	l2977
  4473                           
  4474                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
  4475  0097  1683               	bsf	3,5	;RP0=1, select bank1
  4476  0098  1303               	bcf	3,6	;RP1=0, select bank1
  4477  0099  083D               	movf	(sprintf@prec+1)^(0+128),w
  4478  009A  01F1               	clrf	___wmul@multiplier+1
  4479  009B  07F1               	addwf	___wmul@multiplier+1,f
  4480  009C  083C               	movf	sprintf@prec^(0+128),w
  4481  009D  01F0               	clrf	___wmul@multiplier
  4482  009E  07F0               	addwf	___wmul@multiplier,f
  4483  009F  300A               	movlw	10
  4484  00A0  00F2               	movwf	___wmul@multiplicand
  4485  00A1  3000               	movlw	0
  4486  00A2  00F3               	movwf	___wmul@multiplicand+1
  4487  00A3  160A  158A  21C9  120A  118A  	fcall	___wmul
  4488  00A8  1283               	bcf	3,5	;RP0=0, select bank0
  4489  00A9  1303               	bcf	3,6	;RP1=0, select bank0
  4490  00AA  0863               	movf	sprintf@f,w
  4491  00AB  0084               	movwf	4
  4492  00AC  160A  118A  2000  120A  118A  	fcall	stringdir
  4493  00B1  0770               	addwf	?___wmul,w
  4494  00B2  00E7               	movwf	??_sprintf
  4495  00B3  3000               	movlw	0
  4496  00B4  1803               	skipnc
  4497  00B5  3001               	movlw	1
  4498  00B6  0771               	addwf	?___wmul+1,w
  4499  00B7  00E8               	movwf	??_sprintf+1
  4500  00B8  0867               	movf	??_sprintf,w
  4501  00B9  3ED0               	addlw	208
  4502  00BA  1683               	bsf	3,5	;RP0=1, select bank1
  4503  00BB  1303               	bcf	3,6	;RP1=0, select bank1
  4504  00BC  00BC               	movwf	sprintf@prec^(0+128)
  4505  00BD  1283               	bcf	3,5	;RP0=0, select bank0
  4506  00BE  1303               	bcf	3,6	;RP1=0, select bank0
  4507  00BF  0868               	movf	??_sprintf+1,w
  4508  00C0  1803               	skipnc
  4509  00C1  3E01               	addlw	1
  4510  00C2  3EFF               	addlw	255
  4511  00C3  1683               	bsf	3,5	;RP0=1, select bank1
  4512  00C4  1303               	bcf	3,6	;RP1=0, select bank1
  4513  00C5  00BD               	movwf	(sprintf@prec+1)^(0+128)
  4514  00C6  3001               	movlw	1
  4515  00C7  1283               	bcf	3,5	;RP0=0, select bank0
  4516  00C8  1303               	bcf	3,6	;RP1=0, select bank0
  4517  00C9  00E7               	movwf	??_sprintf
  4518  00CA  0867               	movf	??_sprintf,w
  4519  00CB  07E3               	addwf	sprintf@f,f
  4520  00CC  2888               	goto	l2969
  4521  00CD                     l2971:	
  4522                           ;doprnt.c: 633: }
  4523                           ;doprnt.c: 634: } else {
  4524                           
  4525                           
  4526                           ;doprnt.c: 635: prec = 0;
  4527  00CD  1683               	bsf	3,5	;RP0=1, select bank1
  4528  00CE  1303               	bcf	3,6	;RP1=0, select bank1
  4529  00CF  01BC               	clrf	sprintf@prec^(0+128)
  4530  00D0  01BD               	clrf	(sprintf@prec+1)^(0+128)
  4531                           
  4532                           ;doprnt.c: 637: flag |= 0x1000;
  4533  00D1  1631               	bsf	(sprintf@flag^(0+128)+1),4
  4534                           
  4535                           ;doprnt.c: 639: }
  4536                           ;doprnt.c: 644: switch(c = *f++) {
  4537  00D2  28D5               	goto	l2977
  4538  00D3                     l166:	
  4539                           ;doprnt.c: 671: case 'f':
  4540                           
  4541                           ;doprnt.c: 647: goto alldone;
  4542                           
  4543                           ;doprnt.c: 646: case 0:
  4544                           
  4545                           
  4546                           ;doprnt.c: 672: flag |= 0x400;
  4547  00D3  1531               	bsf	(sprintf@flag^(0+128)+1),2
  4548                           
  4549                           ;doprnt.c: 707: case 'i':
  4550                           ;doprnt.c: 708: break;
  4551                           
  4552                           ;doprnt.c: 706: case 'd':
  4553                           
  4554                           ;doprnt.c: 673: break;
  4555  00D4  28F1               	goto	l2979
  4556  00D5                     l2977:	
  4557                           ;doprnt.c: 831: }
  4558                           
  4559                           ;doprnt.c: 822: continue;
  4560                           
  4561                           ;doprnt.c: 811: default:
  4562                           
  4563  00D5  3001               	movlw	1
  4564  00D6  1283               	bcf	3,5	;RP0=0, select bank0
  4565  00D7  1303               	bcf	3,6	;RP1=0, select bank0
  4566  00D8  07E3               	addwf	sprintf@f,f
  4567  00D9  30FF               	movlw	-1
  4568  00DA  0763               	addwf	sprintf@f,w
  4569  00DB  0084               	movwf	4
  4570  00DC  160A  118A  2000  120A  118A  	fcall	stringdir
  4571  00E1  1683               	bsf	3,5	;RP0=1, select bank1
  4572  00E2  1303               	bcf	3,6	;RP1=0, select bank1
  4573  00E3  00C1               	movwf	sprintf@c^(0+128)
  4574                           
  4575                           ; Switch size 1, requested type "space"
  4576                           ; Number of cases is 4, Range of values is 0 to 105
  4577                           ; switch strategies available:
  4578                           ; Name         Instructions Cycles
  4579                           ; simple_byte           13     7 (average)
  4580                           ; jumptable            260     6 (fixed)
  4581                           ;	Chosen strategy is simple_byte
  4582  00E4  3A00               	xorlw	0	; case 0
  4583  00E5  1903               	skipnz
  4584  00E6  2FEE               	goto	l3173
  4585  00E7  3A64               	xorlw	100	; case 100
  4586  00E8  1903               	skipnz
  4587  00E9  28F1               	goto	l2979
  4588  00EA  3A02               	xorlw	2	; case 102
  4589  00EB  1903               	skipnz
  4590  00EC  28D3               	goto	l166
  4591  00ED  3A0F               	xorlw	15	; case 105
  4592  00EE  1903               	skipnz
  4593  00EF  28F1               	goto	l2979
  4594  00F0  2841               	goto	l3171
  4595  00F1                     l2979:	
  4596                           
  4597                           ;doprnt.c: 834: if(flag & (0x700)) {
  4598  00F1  3000               	movlw	0
  4599  00F2  0530               	andwf	sprintf@flag^(0+128),w
  4600  00F3  1283               	bcf	3,5	;RP0=0, select bank0
  4601  00F4  1303               	bcf	3,6	;RP1=0, select bank0
  4602  00F5  00E7               	movwf	??_sprintf
  4603  00F6  3007               	movlw	7
  4604  00F7  1683               	bsf	3,5	;RP0=1, select bank1
  4605  00F8  1303               	bcf	3,6	;RP1=0, select bank1
  4606  00F9  0531               	andwf	(sprintf@flag+1)^(0+128),w
  4607  00FA  1283               	bcf	3,5	;RP0=0, select bank0
  4608  00FB  1303               	bcf	3,6	;RP1=0, select bank0
  4609  00FC  00E8               	movwf	??_sprintf+1
  4610  00FD  0868               	movf	??_sprintf+1,w
  4611  00FE  0467               	iorwf	??_sprintf,w
  4612  00FF  1903               	skipnz
  4613  0100  2E7C               	goto	l3121
  4614                           
  4615                           ;doprnt.c: 836: if(flag & 0x1000)
  4616  0101  1683               	bsf	3,5	;RP0=1, select bank1
  4617  0102  1303               	bcf	3,6	;RP1=0, select bank1
  4618  0103  1E31               	btfss	(sprintf@flag+1)^(0+128),4
  4619  0104  2909               	goto	l2985
  4620                           
  4621                           ;doprnt.c: 838: prec = 6;
  4622  0105  3006               	movlw	6
  4623  0106  00BC               	movwf	sprintf@prec^(0+128)
  4624  0107  3000               	movlw	0
  4625  0108  00BD               	movwf	(sprintf@prec^(0+128)+1)
  4626  0109                     l2985:	
  4627                           
  4628                           ;doprnt.c: 839: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  4629  0109  082F               	movf	sprintf@ap^(0+128),w
  4630  010A  0084               	movwf	4
  4631  010B  1383               	bcf	3,7	;select IRP bank0
  4632  010C  0800               	movf	0,w
  4633  010D  00BE               	movwf	sprintf@fval^(0+128)
  4634  010E  0A84               	incf	4,f
  4635  010F  0800               	movf	0,w
  4636  0110  00BF               	movwf	(sprintf@fval+1)^(0+128)
  4637  0111  0A84               	incf	4,f
  4638  0112  0800               	movf	0,w
  4639  0113  00C0               	movwf	(sprintf@fval+2)^(0+128)
  4640  0114  3003               	movlw	3
  4641  0115  1283               	bcf	3,5	;RP0=0, select bank0
  4642  0116  1303               	bcf	3,6	;RP1=0, select bank0
  4643  0117  00E7               	movwf	??_sprintf
  4644  0118  0867               	movf	??_sprintf,w
  4645  0119  1683               	bsf	3,5	;RP0=1, select bank1
  4646  011A  1303               	bcf	3,6	;RP1=0, select bank1
  4647  011B  07AF               	addwf	sprintf@ap^(0+128),f
  4648                           
  4649                           ;doprnt.c: 840: if(fval < 0.0) {
  4650  011C  083E               	movf	sprintf@fval^(0+128),w
  4651  011D  00F0               	movwf	___ftge@ff1
  4652  011E  083F               	movf	(sprintf@fval+1)^(0+128),w
  4653  011F  00F1               	movwf	___ftge@ff1+1
  4654  0120  0840               	movf	(sprintf@fval+2)^(0+128),w
  4655  0121  00F2               	movwf	___ftge@ff1+2
  4656  0122  3000               	movlw	0
  4657  0123  00F3               	movwf	___ftge@ff2
  4658  0124  3000               	movlw	0
  4659  0125  00F4               	movwf	___ftge@ff2+1
  4660  0126  3000               	movlw	0
  4661  0127  00F5               	movwf	___ftge@ff2+2
  4662  0128  160A  158A  232F  120A  118A  	fcall	___ftge
  4663  012D  1803               	btfsc	3,0
  4664  012E  2948               	goto	l2995
  4665                           
  4666                           ;doprnt.c: 841: fval = -fval;
  4667  012F  1683               	bsf	3,5	;RP0=1, select bank1
  4668  0130  1303               	bcf	3,6	;RP1=0, select bank1
  4669  0131  083E               	movf	sprintf@fval^(0+128),w
  4670  0132  00F0               	movwf	___ftneg@f1
  4671  0133  083F               	movf	(sprintf@fval+1)^(0+128),w
  4672  0134  00F1               	movwf	___ftneg@f1+1
  4673  0135  0840               	movf	(sprintf@fval+2)^(0+128),w
  4674  0136  00F2               	movwf	___ftneg@f1+2
  4675  0137  120A  118A  2003  120A  118A  	fcall	___ftneg
  4676  013C  0870               	movf	?___ftneg,w
  4677  013D  1683               	bsf	3,5	;RP0=1, select bank1
  4678  013E  1303               	bcf	3,6	;RP1=0, select bank1
  4679  013F  00BE               	movwf	sprintf@fval^(0+128)
  4680  0140  0871               	movf	?___ftneg+1,w
  4681  0141  00BF               	movwf	(sprintf@fval+1)^(0+128)
  4682  0142  0872               	movf	?___ftneg+2,w
  4683  0143  00C0               	movwf	(sprintf@fval+2)^(0+128)
  4684                           
  4685                           ;doprnt.c: 842: flag |= 0x03;
  4686  0144  3003               	movlw	3
  4687  0145  04B0               	iorwf	sprintf@flag^(0+128),f
  4688  0146  3000               	movlw	0
  4689  0147  04B1               	iorwf	(sprintf@flag+1)^(0+128),f
  4690  0148                     l2995:	
  4691                           
  4692                           ;doprnt.c: 843: }
  4693                           ;doprnt.c: 844: exp = 0;
  4694  0148  1683               	bsf	3,5	;RP0=1, select bank1
  4695  0149  1303               	bcf	3,6	;RP1=0, select bank1
  4696  014A  01B5               	clrf	sprintf@exp^(0+128)
  4697  014B  01B6               	clrf	(sprintf@exp+1)^(0+128)
  4698                           
  4699                           ;doprnt.c: 845: if( fval!=0) {
  4700  014C  0840               	movf	(sprintf@fval+2)^(0+128),w
  4701  014D  043F               	iorwf	(sprintf@fval+1)^(0+128),w
  4702  014E  043E               	iorwf	sprintf@fval^(0+128),w
  4703  014F  1903               	skipnz
  4704  0150  2A44               	goto	l3023
  4705                           
  4706                           ;doprnt.c: 846: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  4707  0151  30BE               	movlw	low sprintf@fval
  4708  0152  0084               	movwf	4
  4709  0153  1383               	bcf	3,7	;select IRP bank1
  4710  0154  0800               	movf	0,w
  4711  0155  1283               	bcf	3,5	;RP0=0, select bank0
  4712  0156  1303               	bcf	3,6	;RP1=0, select bank0
  4713  0157  00E7               	movwf	??_sprintf
  4714  0158  0A84               	incf	4,f
  4715  0159  0800               	movf	0,w
  4716  015A  00E8               	movwf	??_sprintf+1
  4717  015B  0A84               	incf	4,f
  4718  015C  0800               	movf	0,w
  4719  015D  00E9               	movwf	??_sprintf+2
  4720  015E  0A84               	incf	4,f
  4721  015F  0800               	movf	0,w
  4722  0160  00EA               	movwf	??_sprintf+3
  4723  0161  300F               	movlw	15
  4724  0162                     u4055:	
  4725  0162  1003               	clrc
  4726  0163  0CEA               	rrf	??_sprintf+3,f
  4727  0164  0CE9               	rrf	??_sprintf+2,f
  4728  0165  0CE8               	rrf	??_sprintf+1,f
  4729  0166  0CE7               	rrf	??_sprintf,f
  4730  0167  3EFF               	addlw	-1
  4731  0168  1D03               	skipz
  4732  0169  2962               	goto	u4055
  4733  016A  30FF               	movlw	255
  4734  016B  0567               	andwf	??_sprintf,w
  4735  016C  00EB               	movwf	??_sprintf+4
  4736  016D  3000               	movlw	0
  4737  016E  0568               	andwf	??_sprintf+1,w
  4738  016F  00EC               	movwf	??_sprintf+5
  4739  0170  086B               	movf	??_sprintf+4,w
  4740  0171  3E82               	addlw	130
  4741  0172  1683               	bsf	3,5	;RP0=1, select bank1
  4742  0173  1303               	bcf	3,6	;RP1=0, select bank1
  4743  0174  00B5               	movwf	sprintf@exp^(0+128)
  4744  0175  1283               	bcf	3,5	;RP0=0, select bank0
  4745  0176  1303               	bcf	3,6	;RP1=0, select bank0
  4746  0177  086C               	movf	??_sprintf+5,w
  4747  0178  1803               	skipnc
  4748  0179  3E01               	addlw	1
  4749  017A  3EFF               	addlw	255
  4750  017B  1683               	bsf	3,5	;RP0=1, select bank1
  4751  017C  1303               	bcf	3,6	;RP1=0, select bank1
  4752  017D  00B6               	movwf	(sprintf@exp+1)^(0+128)
  4753                           
  4754                           ;doprnt.c: 847: exp--;
  4755  017E  30FF               	movlw	255
  4756  017F  07B5               	addwf	sprintf@exp^(0+128),f
  4757  0180  1803               	skipnc
  4758  0181  0AB6               	incf	(sprintf@exp+1)^(0+128),f
  4759  0182  30FF               	movlw	255
  4760  0183  07B6               	addwf	(sprintf@exp+1)^(0+128),f
  4761                           
  4762                           ;doprnt.c: 848: exp *= 3;
  4763  0184  3003               	movlw	3
  4764  0185  00F0               	movwf	___wmul@multiplier
  4765  0186  3000               	movlw	0
  4766  0187  00F1               	movwf	___wmul@multiplier+1
  4767  0188  0836               	movf	(sprintf@exp+1)^(0+128),w
  4768  0189  01F3               	clrf	___wmul@multiplicand+1
  4769  018A  07F3               	addwf	___wmul@multiplicand+1,f
  4770  018B  0835               	movf	sprintf@exp^(0+128),w
  4771  018C  01F2               	clrf	___wmul@multiplicand
  4772  018D  07F2               	addwf	___wmul@multiplicand,f
  4773  018E  160A  158A  21C9  120A  118A  	fcall	___wmul
  4774  0193  0871               	movf	?___wmul+1,w
  4775  0194  1683               	bsf	3,5	;RP0=1, select bank1
  4776  0195  1303               	bcf	3,6	;RP1=0, select bank1
  4777  0196  01B6               	clrf	(sprintf@exp+1)^(0+128)
  4778  0197  07B6               	addwf	(sprintf@exp+1)^(0+128),f
  4779  0198  0870               	movf	?___wmul,w
  4780  0199  01B5               	clrf	sprintf@exp^(0+128)
  4781  019A  07B5               	addwf	sprintf@exp^(0+128),f
  4782                           
  4783                           ;doprnt.c: 849: exp /= 10;
  4784  019B  300A               	movlw	10
  4785  019C  00F7               	movwf	___awdiv@divisor
  4786  019D  3000               	movlw	0
  4787  019E  00F8               	movwf	___awdiv@divisor+1
  4788  019F  0836               	movf	(sprintf@exp+1)^(0+128),w
  4789  01A0  01FA               	clrf	___awdiv@dividend+1
  4790  01A1  07FA               	addwf	___awdiv@dividend+1,f
  4791  01A2  0835               	movf	sprintf@exp^(0+128),w
  4792  01A3  01F9               	clrf	___awdiv@dividend
  4793  01A4  07F9               	addwf	___awdiv@dividend,f
  4794  01A5  160A  158A  238C  120A  118A  	fcall	___awdiv
  4795  01AA  0878               	movf	?___awdiv+1,w
  4796  01AB  1683               	bsf	3,5	;RP0=1, select bank1
  4797  01AC  1303               	bcf	3,6	;RP1=0, select bank1
  4798  01AD  01B6               	clrf	(sprintf@exp+1)^(0+128)
  4799  01AE  07B6               	addwf	(sprintf@exp+1)^(0+128),f
  4800  01AF  0877               	movf	?___awdiv,w
  4801  01B0  01B5               	clrf	sprintf@exp^(0+128)
  4802  01B1  07B5               	addwf	sprintf@exp^(0+128),f
  4803                           
  4804                           ;doprnt.c: 850: if(exp < 0)
  4805  01B2  1FB6               	btfss	(sprintf@exp+1)^(0+128),7
  4806  01B3  29BA               	goto	l3011
  4807                           
  4808                           ;doprnt.c: 851: exp--;
  4809  01B4  30FF               	movlw	255
  4810  01B5  07B5               	addwf	sprintf@exp^(0+128),f
  4811  01B6  1803               	skipnc
  4812  01B7  0AB6               	incf	(sprintf@exp+1)^(0+128),f
  4813  01B8  30FF               	movlw	255
  4814  01B9  07B6               	addwf	(sprintf@exp+1)^(0+128),f
  4815  01BA                     l3011:	
  4816                           
  4817                           ;doprnt.c: 855: integ = scale(-exp);
  4818  01BA  0335               	decf	sprintf@exp^(0+128),w
  4819  01BB  3AFF               	xorlw	255
  4820  01BC  120A  158A  2561  120A  118A  	fcall	_scale
  4821  01C1  1283               	bcf	3,5	;RP0=0, select bank0
  4822  01C2  1303               	bcf	3,6	;RP1=0, select bank0
  4823  01C3  0840               	movf	?_scale,w
  4824  01C4  1683               	bsf	3,5	;RP0=1, select bank1
  4825  01C5  1303               	bcf	3,6	;RP1=0, select bank1
  4826  01C6  00B2               	movwf	sprintf@integ^(0+128)
  4827  01C7  1283               	bcf	3,5	;RP0=0, select bank0
  4828  01C8  1303               	bcf	3,6	;RP1=0, select bank0
  4829  01C9  0841               	movf	?_scale+1,w
  4830  01CA  1683               	bsf	3,5	;RP0=1, select bank1
  4831  01CB  1303               	bcf	3,6	;RP1=0, select bank1
  4832  01CC  00B3               	movwf	(sprintf@integ+1)^(0+128)
  4833  01CD  1283               	bcf	3,5	;RP0=0, select bank0
  4834  01CE  1303               	bcf	3,6	;RP1=0, select bank0
  4835  01CF  0842               	movf	?_scale+2,w
  4836  01D0  1683               	bsf	3,5	;RP0=1, select bank1
  4837  01D1  1303               	bcf	3,6	;RP1=0, select bank1
  4838  01D2  00B4               	movwf	(sprintf@integ+2)^(0+128)
  4839                           
  4840                           ;doprnt.c: 856: integ *= fval;
  4841  01D3  083E               	movf	sprintf@fval^(0+128),w
  4842  01D4  1283               	bcf	3,5	;RP0=0, select bank0
  4843  01D5  1303               	bcf	3,6	;RP1=0, select bank0
  4844  01D6  00B0               	movwf	___ftmul@f1
  4845  01D7  1683               	bsf	3,5	;RP0=1, select bank1
  4846  01D8  1303               	bcf	3,6	;RP1=0, select bank1
  4847  01D9  083F               	movf	(sprintf@fval+1)^(0+128),w
  4848  01DA  1283               	bcf	3,5	;RP0=0, select bank0
  4849  01DB  1303               	bcf	3,6	;RP1=0, select bank0
  4850  01DC  00B1               	movwf	___ftmul@f1+1
  4851  01DD  1683               	bsf	3,5	;RP0=1, select bank1
  4852  01DE  1303               	bcf	3,6	;RP1=0, select bank1
  4853  01DF  0840               	movf	(sprintf@fval+2)^(0+128),w
  4854  01E0  1283               	bcf	3,5	;RP0=0, select bank0
  4855  01E1  1303               	bcf	3,6	;RP1=0, select bank0
  4856  01E2  00B2               	movwf	___ftmul@f1+2
  4857  01E3  1683               	bsf	3,5	;RP0=1, select bank1
  4858  01E4  1303               	bcf	3,6	;RP1=0, select bank1
  4859  01E5  0832               	movf	sprintf@integ^(0+128),w
  4860  01E6  1283               	bcf	3,5	;RP0=0, select bank0
  4861  01E7  1303               	bcf	3,6	;RP1=0, select bank0
  4862  01E8  00B3               	movwf	___ftmul@f2
  4863  01E9  1683               	bsf	3,5	;RP0=1, select bank1
  4864  01EA  1303               	bcf	3,6	;RP1=0, select bank1
  4865  01EB  0833               	movf	(sprintf@integ+1)^(0+128),w
  4866  01EC  1283               	bcf	3,5	;RP0=0, select bank0
  4867  01ED  1303               	bcf	3,6	;RP1=0, select bank0
  4868  01EE  00B4               	movwf	___ftmul@f2+1
  4869  01EF  1683               	bsf	3,5	;RP0=1, select bank1
  4870  01F0  1303               	bcf	3,6	;RP1=0, select bank1
  4871  01F1  0834               	movf	(sprintf@integ+2)^(0+128),w
  4872  01F2  1283               	bcf	3,5	;RP0=0, select bank0
  4873  01F3  1303               	bcf	3,6	;RP1=0, select bank0
  4874  01F4  00B5               	movwf	___ftmul@f2+2
  4875  01F5  160A  118A  231B  120A  118A  	fcall	___ftmul
  4876  01FA  1283               	bcf	3,5	;RP0=0, select bank0
  4877  01FB  1303               	bcf	3,6	;RP1=0, select bank0
  4878  01FC  0830               	movf	?___ftmul,w
  4879  01FD  1683               	bsf	3,5	;RP0=1, select bank1
  4880  01FE  1303               	bcf	3,6	;RP1=0, select bank1
  4881  01FF  00B2               	movwf	sprintf@integ^(0+128)
  4882  0200  1283               	bcf	3,5	;RP0=0, select bank0
  4883  0201  1303               	bcf	3,6	;RP1=0, select bank0
  4884  0202  0831               	movf	?___ftmul+1,w
  4885  0203  1683               	bsf	3,5	;RP0=1, select bank1
  4886  0204  1303               	bcf	3,6	;RP1=0, select bank1
  4887  0205  00B3               	movwf	(sprintf@integ+1)^(0+128)
  4888  0206  1283               	bcf	3,5	;RP0=0, select bank0
  4889  0207  1303               	bcf	3,6	;RP1=0, select bank0
  4890  0208  0832               	movf	?___ftmul+2,w
  4891  0209  1683               	bsf	3,5	;RP0=1, select bank1
  4892  020A  1303               	bcf	3,6	;RP1=0, select bank1
  4893  020B  00B4               	movwf	(sprintf@integ+2)^(0+128)
  4894                           
  4895                           ;doprnt.c: 857: if(integ < 1.0)
  4896  020C  0832               	movf	sprintf@integ^(0+128),w
  4897  020D  00F0               	movwf	___ftge@ff1
  4898  020E  0833               	movf	(sprintf@integ+1)^(0+128),w
  4899  020F  00F1               	movwf	___ftge@ff1+1
  4900  0210  0834               	movf	(sprintf@integ+2)^(0+128),w
  4901  0211  00F2               	movwf	___ftge@ff1+2
  4902  0212  3000               	movlw	0
  4903  0213  00F3               	movwf	___ftge@ff2
  4904  0214  3080               	movlw	128
  4905  0215  00F4               	movwf	___ftge@ff2+1
  4906  0216  303F               	movlw	63
  4907  0217  00F5               	movwf	___ftge@ff2+2
  4908  0218  160A  158A  232F  120A  118A  	fcall	___ftge
  4909  021D  1803               	btfsc	3,0
  4910  021E  2A27               	goto	l3019
  4911                           
  4912                           ;doprnt.c: 858: exp--;
  4913  021F  30FF               	movlw	255
  4914  0220  1683               	bsf	3,5	;RP0=1, select bank1
  4915  0221  1303               	bcf	3,6	;RP1=0, select bank1
  4916  0222  07B5               	addwf	sprintf@exp^(0+128),f
  4917  0223  1803               	skipnc
  4918  0224  0AB6               	incf	(sprintf@exp+1)^(0+128),f
  4919  0225  30FF               	movlw	255
  4920  0226  2A43               	goto	L3
  4921  0227                     l3019:	
  4922                           
  4923                           ;doprnt.c: 859: else if(integ >= 10.0)
  4924  0227  1683               	bsf	3,5	;RP0=1, select bank1
  4925  0228  1303               	bcf	3,6	;RP1=0, select bank1
  4926  0229  0832               	movf	sprintf@integ^(0+128),w
  4927  022A  00F0               	movwf	___ftge@ff1
  4928  022B  0833               	movf	(sprintf@integ+1)^(0+128),w
  4929  022C  00F1               	movwf	___ftge@ff1+1
  4930  022D  0834               	movf	(sprintf@integ+2)^(0+128),w
  4931  022E  00F2               	movwf	___ftge@ff1+2
  4932  022F  3000               	movlw	0
  4933  0230  00F3               	movwf	___ftge@ff2
  4934  0231  3020               	movlw	32
  4935  0232  00F4               	movwf	___ftge@ff2+1
  4936  0233  3041               	movlw	65
  4937  0234  00F5               	movwf	___ftge@ff2+2
  4938  0235  160A  158A  232F  120A  118A  	fcall	___ftge
  4939  023A  1C03               	btfss	3,0
  4940  023B  2A44               	goto	l3023
  4941                           
  4942                           ;doprnt.c: 860: exp++;
  4943  023C  3001               	movlw	1
  4944  023D  1683               	bsf	3,5	;RP0=1, select bank1
  4945  023E  1303               	bcf	3,6	;RP1=0, select bank1
  4946  023F  07B5               	addwf	sprintf@exp^(0+128),f
  4947  0240  1803               	skipnc
  4948  0241  0AB6               	incf	(sprintf@exp+1)^(0+128),f
  4949  0242  3000               	movlw	0
  4950  0243                     L3:	
  4951  0243  07B6               	addwf	(sprintf@exp+1)^(0+128),f
  4952  0244                     l3023:	
  4953                           
  4954                           ;doprnt.c: 861: }
  4955                           ;doprnt.c: 1121: if(prec <= 12)
  4956  0244  1683               	bsf	3,5	;RP0=1, select bank1
  4957  0245  1303               	bcf	3,6	;RP1=0, select bank1
  4958  0246  083D               	movf	(sprintf@prec+1)^(0+128),w
  4959  0247  3A80               	xorlw	128
  4960  0248  00FF               	movwf	127
  4961  0249  3080               	movlw	128
  4962  024A  027F               	subwf	127,w
  4963  024B  1D03               	skipz
  4964  024C  2A4F               	goto	u4095
  4965  024D  300D               	movlw	13
  4966  024E  023C               	subwf	sprintf@prec^(0+128),w
  4967  024F                     u4095:	
  4968  024F  1803               	skipnc
  4969  0250  2A8A               	goto	l3027
  4970                           
  4971                           ;doprnt.c: 1122: fval += fround(prec);
  4972  0251  1683               	bsf	3,5	;RP0=1, select bank1
  4973  0252  1303               	bcf	3,6	;RP1=0, select bank1
  4974  0253  083C               	movf	sprintf@prec^(0+128),w
  4975  0254  160A  118A  2664  120A  118A  	fcall	_fround
  4976  0259  1283               	bcf	3,5	;RP0=0, select bank0
  4977  025A  1303               	bcf	3,6	;RP1=0, select bank0
  4978  025B  0840               	movf	?_fround,w
  4979  025C  00D0               	movwf	___ftadd@f1
  4980  025D  0841               	movf	?_fround+1,w
  4981  025E  00D1               	movwf	___ftadd@f1+1
  4982  025F  0842               	movf	?_fround+2,w
  4983  0260  00D2               	movwf	___ftadd@f1+2
  4984  0261  1683               	bsf	3,5	;RP0=1, select bank1
  4985  0262  1303               	bcf	3,6	;RP1=0, select bank1
  4986  0263  083E               	movf	sprintf@fval^(0+128),w
  4987  0264  1283               	bcf	3,5	;RP0=0, select bank0
  4988  0265  1303               	bcf	3,6	;RP1=0, select bank0
  4989  0266  00D3               	movwf	___ftadd@f2
  4990  0267  1683               	bsf	3,5	;RP0=1, select bank1
  4991  0268  1303               	bcf	3,6	;RP1=0, select bank1
  4992  0269  083F               	movf	(sprintf@fval+1)^(0+128),w
  4993  026A  1283               	bcf	3,5	;RP0=0, select bank0
  4994  026B  1303               	bcf	3,6	;RP1=0, select bank0
  4995  026C  00D4               	movwf	___ftadd@f2+1
  4996  026D  1683               	bsf	3,5	;RP0=1, select bank1
  4997  026E  1303               	bcf	3,6	;RP1=0, select bank1
  4998  026F  0840               	movf	(sprintf@fval+2)^(0+128),w
  4999  0270  1283               	bcf	3,5	;RP0=0, select bank0
  5000  0271  1303               	bcf	3,6	;RP1=0, select bank0
  5001  0272  00D5               	movwf	___ftadd@f2+2
  5002  0273  120A  158A  2028  120A  118A  	fcall	___ftadd
  5003  0278  1283               	bcf	3,5	;RP0=0, select bank0
  5004  0279  1303               	bcf	3,6	;RP1=0, select bank0
  5005  027A  0850               	movf	?___ftadd,w
  5006  027B  1683               	bsf	3,5	;RP0=1, select bank1
  5007  027C  1303               	bcf	3,6	;RP1=0, select bank1
  5008  027D  00BE               	movwf	sprintf@fval^(0+128)
  5009  027E  1283               	bcf	3,5	;RP0=0, select bank0
  5010  027F  1303               	bcf	3,6	;RP1=0, select bank0
  5011  0280  0851               	movf	?___ftadd+1,w
  5012  0281  1683               	bsf	3,5	;RP0=1, select bank1
  5013  0282  1303               	bcf	3,6	;RP1=0, select bank1
  5014  0283  00BF               	movwf	(sprintf@fval+1)^(0+128)
  5015  0284  1283               	bcf	3,5	;RP0=0, select bank0
  5016  0285  1303               	bcf	3,6	;RP1=0, select bank0
  5017  0286  0852               	movf	?___ftadd+2,w
  5018  0287  1683               	bsf	3,5	;RP0=1, select bank1
  5019  0288  1303               	bcf	3,6	;RP1=0, select bank1
  5020  0289  00C0               	movwf	(sprintf@fval+2)^(0+128)
  5021  028A                     l3027:	
  5022                           
  5023                           ;doprnt.c: 1125: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  5024  028A  1683               	bsf	3,5	;RP0=1, select bank1
  5025  028B  1303               	bcf	3,6	;RP1=0, select bank1
  5026  028C  0836               	movf	(sprintf@exp+1)^(0+128),w
  5027  028D  3A80               	xorlw	128
  5028  028E  00FF               	movwf	127
  5029  028F  3080               	movlw	128
  5030  0290  027F               	subwf	127,w
  5031  0291  1D03               	skipz
  5032  0292  2A95               	goto	u4105
  5033  0293  300A               	movlw	10
  5034  0294  0235               	subwf	sprintf@exp^(0+128),w
  5035  0295                     u4105:	
  5036  0295  1803               	skipnc
  5037  0296  2AC8               	goto	l3035
  5038  0297  1683               	bsf	3,5	;RP0=1, select bank1
  5039  0298  1303               	bcf	3,6	;RP1=0, select bank1
  5040  0299  0840               	movf	(sprintf@fval+2)^(0+128),w
  5041  029A  043F               	iorwf	(sprintf@fval+1)^(0+128),w
  5042  029B  043E               	iorwf	sprintf@fval^(0+128),w
  5043  029C  1903               	skipnz
  5044  029D  2B29               	goto	l3051
  5045  029E  083E               	movf	sprintf@fval^(0+128),w
  5046  029F  1283               	bcf	3,5	;RP0=0, select bank0
  5047  02A0  1303               	bcf	3,6	;RP1=0, select bank0
  5048  02A1  00C9               	movwf	___fttol@f1
  5049  02A2  1683               	bsf	3,5	;RP0=1, select bank1
  5050  02A3  1303               	bcf	3,6	;RP1=0, select bank1
  5051  02A4  083F               	movf	(sprintf@fval+1)^(0+128),w
  5052  02A5  1283               	bcf	3,5	;RP0=0, select bank0
  5053  02A6  1303               	bcf	3,6	;RP1=0, select bank0
  5054  02A7  00CA               	movwf	___fttol@f1+1
  5055  02A8  1683               	bsf	3,5	;RP0=1, select bank1
  5056  02A9  1303               	bcf	3,6	;RP1=0, select bank1
  5057  02AA  0840               	movf	(sprintf@fval+2)^(0+128),w
  5058  02AB  1283               	bcf	3,5	;RP0=0, select bank0
  5059  02AC  1303               	bcf	3,6	;RP1=0, select bank0
  5060  02AD  00CB               	movwf	___fttol@f1+2
  5061  02AE  160A  158A  25AB  120A  118A  	fcall	___fttol
  5062  02B3  1283               	bcf	3,5	;RP0=0, select bank0
  5063  02B4  1303               	bcf	3,6	;RP1=0, select bank0
  5064  02B5  084C               	movf	?___fttol+3,w
  5065  02B6  044B               	iorwf	?___fttol+2,w
  5066  02B7  044A               	iorwf	?___fttol+1,w
  5067  02B8  0449               	iorwf	?___fttol,w
  5068  02B9  1D03               	skipz
  5069  02BA  2B29               	goto	l3051
  5070  02BB  1683               	bsf	3,5	;RP0=1, select bank1
  5071  02BC  1303               	bcf	3,6	;RP1=0, select bank1
  5072  02BD  0836               	movf	(sprintf@exp+1)^(0+128),w
  5073  02BE  3A80               	xorlw	128
  5074  02BF  00FF               	movwf	127
  5075  02C0  3080               	movlw	128
  5076  02C1  027F               	subwf	127,w
  5077  02C2  1D03               	skipz
  5078  02C3  2AC6               	goto	u4135
  5079  02C4  3002               	movlw	2
  5080  02C5  0235               	subwf	sprintf@exp^(0+128),w
  5081  02C6                     u4135:	
  5082  02C6  1C03               	skipc
  5083  02C7  2B29               	goto	l3051
  5084  02C8                     l3035:	
  5085                           
  5086                           ;doprnt.c: 1129: if(integ < 4.294967296){
  5087  02C8  1683               	bsf	3,5	;RP0=1, select bank1
  5088  02C9  1303               	bcf	3,6	;RP1=0, select bank1
  5089  02CA  0832               	movf	sprintf@integ^(0+128),w
  5090  02CB  00F0               	movwf	___ftge@ff1
  5091  02CC  0833               	movf	(sprintf@integ+1)^(0+128),w
  5092  02CD  00F1               	movwf	___ftge@ff1+1
  5093  02CE  0834               	movf	(sprintf@integ+2)^(0+128),w
  5094  02CF  00F2               	movwf	___ftge@ff1+2
  5095  02D0  3070               	movlw	112
  5096  02D1  00F3               	movwf	___ftge@ff2
  5097  02D2  3089               	movlw	137
  5098  02D3  00F4               	movwf	___ftge@ff2+1
  5099  02D4  3040               	movlw	64
  5100  02D5  00F5               	movwf	___ftge@ff2+2
  5101  02D6  160A  158A  232F  120A  118A  	fcall	___ftge
  5102  02DB  1803               	btfsc	3,0
  5103  02DC  2ADF               	goto	l3039
  5104                           
  5105                           ;doprnt.c: 1130: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  5106  02DD  30F7               	movlw	247
  5107  02DE  2AE0               	goto	L4
  5108  02DF                     l3039:	
  5109                           ;doprnt.c: 1131: }else{
  5110                           
  5111                           
  5112                           ;doprnt.c: 1132: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  5113  02DF  30F8               	movlw	248
  5114  02E0                     L4:	
  5115  02E0  1683               	bsf	3,5	;RP0=1, select bank1
  5116  02E1  1303               	bcf	3,6	;RP1=0, select bank1
  5117  02E2  07B5               	addwf	sprintf@exp^(0+128),f
  5118  02E3  1803               	skipnc
  5119  02E4  0AB6               	incf	(sprintf@exp+1)^(0+128),f
  5120  02E5  30FF               	movlw	255
  5121  02E6  07B6               	addwf	(sprintf@exp+1)^(0+128),f
  5122                           
  5123                           ;doprnt.c: 1133: }
  5124                           ;doprnt.c: 1134: integ = scale(exp);
  5125  02E7  0835               	movf	sprintf@exp^(0+128),w
  5126  02E8  120A  158A  2561  120A  118A  	fcall	_scale
  5127  02ED  1283               	bcf	3,5	;RP0=0, select bank0
  5128  02EE  1303               	bcf	3,6	;RP1=0, select bank0
  5129  02EF  0840               	movf	?_scale,w
  5130  02F0  1683               	bsf	3,5	;RP0=1, select bank1
  5131  02F1  1303               	bcf	3,6	;RP1=0, select bank1
  5132  02F2  00B2               	movwf	sprintf@integ^(0+128)
  5133  02F3  1283               	bcf	3,5	;RP0=0, select bank0
  5134  02F4  1303               	bcf	3,6	;RP1=0, select bank0
  5135  02F5  0841               	movf	?_scale+1,w
  5136  02F6  1683               	bsf	3,5	;RP0=1, select bank1
  5137  02F7  1303               	bcf	3,6	;RP1=0, select bank1
  5138  02F8  00B3               	movwf	(sprintf@integ+1)^(0+128)
  5139  02F9  1283               	bcf	3,5	;RP0=0, select bank0
  5140  02FA  1303               	bcf	3,6	;RP1=0, select bank0
  5141  02FB  0842               	movf	?_scale+2,w
  5142  02FC  1683               	bsf	3,5	;RP0=1, select bank1
  5143  02FD  1303               	bcf	3,6	;RP1=0, select bank1
  5144  02FE  00B4               	movwf	(sprintf@integ+2)^(0+128)
  5145                           
  5146                           ;doprnt.c: 1135: _val._val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,integ) : _div_to_l
      +                          _(fval,integ));
  5147  02FF  083E               	movf	sprintf@fval^(0+128),w
  5148  0300  00F0               	movwf	__tdiv_to_l_@f1
  5149  0301  083F               	movf	(sprintf@fval+1)^(0+128),w
  5150  0302  00F1               	movwf	__tdiv_to_l_@f1+1
  5151  0303  0840               	movf	(sprintf@fval+2)^(0+128),w
  5152  0304  00F2               	movwf	__tdiv_to_l_@f1+2
  5153  0305  0832               	movf	sprintf@integ^(0+128),w
  5154  0306  00F3               	movwf	__tdiv_to_l_@f2
  5155  0307  0833               	movf	(sprintf@integ+1)^(0+128),w
  5156  0308  00F4               	movwf	__tdiv_to_l_@f2+1
  5157  0309  0834               	movf	(sprintf@integ+2)^(0+128),w
  5158  030A  00F5               	movwf	__tdiv_to_l_@f2+2
  5159  030B  160A  118A  2188  120A  118A  	fcall	__tdiv_to_l_
  5160  0310  0873               	movf	?__tdiv_to_l_+3,w
  5161  0311  1683               	bsf	3,5	;RP0=1, select bank1
  5162  0312  1303               	bcf	3,6	;RP1=0, select bank1
  5163  0313  00A6               	movwf	(_sprintf$190+3)^(0+128)
  5164  0314  0872               	movf	?__tdiv_to_l_+2,w
  5165  0315  00A5               	movwf	(_sprintf$190+2)^(0+128)
  5166  0316  0871               	movf	?__tdiv_to_l_+1,w
  5167  0317  00A4               	movwf	(_sprintf$190+1)^(0+128)
  5168  0318  0870               	movf	?__tdiv_to_l_,w
  5169  0319  00A3               	movwf	_sprintf$190^(0+128)
  5170  031A  0826               	movf	(_sprintf$190+3)^(0+128),w
  5171  031B  00BA               	movwf	(sprintf@_val+3)^(0+128)
  5172  031C  0825               	movf	(_sprintf$190+2)^(0+128),w
  5173  031D  00B9               	movwf	(sprintf@_val+2)^(0+128)
  5174  031E  0824               	movf	(_sprintf$190+1)^(0+128),w
  5175  031F  00B8               	movwf	(sprintf@_val+1)^(0+128)
  5176  0320  0823               	movf	_sprintf$190^(0+128),w
  5177  0321  00B7               	movwf	sprintf@_val^(0+128)
  5178                           
  5179                           ;doprnt.c: 1138: fval = 0.0;
  5180  0322  3000               	movlw	0
  5181  0323  00BE               	movwf	sprintf@fval^(0+128)
  5182  0324  3000               	movlw	0
  5183  0325  00BF               	movwf	(sprintf@fval+1)^(0+128)
  5184  0326  3000               	movlw	0
  5185  0327  00C0               	movwf	(sprintf@fval+2)^(0+128)
  5186                           
  5187                           ;doprnt.c: 1139: } else {
  5188  0328  2B98               	goto	l3055
  5189  0329                     l3051:	
  5190                           
  5191                           ;doprnt.c: 1140: _val._val = (unsigned long)fval;
  5192  0329  1683               	bsf	3,5	;RP0=1, select bank1
  5193  032A  1303               	bcf	3,6	;RP1=0, select bank1
  5194  032B  083E               	movf	sprintf@fval^(0+128),w
  5195  032C  1283               	bcf	3,5	;RP0=0, select bank0
  5196  032D  1303               	bcf	3,6	;RP1=0, select bank0
  5197  032E  00C9               	movwf	___fttol@f1
  5198  032F  1683               	bsf	3,5	;RP0=1, select bank1
  5199  0330  1303               	bcf	3,6	;RP1=0, select bank1
  5200  0331  083F               	movf	(sprintf@fval+1)^(0+128),w
  5201  0332  1283               	bcf	3,5	;RP0=0, select bank0
  5202  0333  1303               	bcf	3,6	;RP1=0, select bank0
  5203  0334  00CA               	movwf	___fttol@f1+1
  5204  0335  1683               	bsf	3,5	;RP0=1, select bank1
  5205  0336  1303               	bcf	3,6	;RP1=0, select bank1
  5206  0337  0840               	movf	(sprintf@fval+2)^(0+128),w
  5207  0338  1283               	bcf	3,5	;RP0=0, select bank0
  5208  0339  1303               	bcf	3,6	;RP1=0, select bank0
  5209  033A  00CB               	movwf	___fttol@f1+2
  5210  033B  160A  158A  25AB  120A  118A  	fcall	___fttol
  5211  0340  1283               	bcf	3,5	;RP0=0, select bank0
  5212  0341  1303               	bcf	3,6	;RP1=0, select bank0
  5213  0342  084C               	movf	?___fttol+3,w
  5214  0343  1683               	bsf	3,5	;RP0=1, select bank1
  5215  0344  1303               	bcf	3,6	;RP1=0, select bank1
  5216  0345  00BA               	movwf	(sprintf@_val+3)^(0+128)
  5217  0346  1283               	bcf	3,5	;RP0=0, select bank0
  5218  0347  1303               	bcf	3,6	;RP1=0, select bank0
  5219  0348  084B               	movf	?___fttol+2,w
  5220  0349  1683               	bsf	3,5	;RP0=1, select bank1
  5221  034A  1303               	bcf	3,6	;RP1=0, select bank1
  5222  034B  00B9               	movwf	(sprintf@_val+2)^(0+128)
  5223  034C  1283               	bcf	3,5	;RP0=0, select bank0
  5224  034D  1303               	bcf	3,6	;RP1=0, select bank0
  5225  034E  084A               	movf	?___fttol+1,w
  5226  034F  1683               	bsf	3,5	;RP0=1, select bank1
  5227  0350  1303               	bcf	3,6	;RP1=0, select bank1
  5228  0351  00B8               	movwf	(sprintf@_val+1)^(0+128)
  5229  0352  1283               	bcf	3,5	;RP0=0, select bank0
  5230  0353  1303               	bcf	3,6	;RP1=0, select bank0
  5231  0354  0849               	movf	?___fttol,w
  5232  0355  1683               	bsf	3,5	;RP0=1, select bank1
  5233  0356  1303               	bcf	3,6	;RP1=0, select bank1
  5234  0357  00B7               	movwf	sprintf@_val^(0+128)
  5235                           
  5236                           ;doprnt.c: 1141: fval -= (double)_val._val;
  5237  0358  083A               	movf	(sprintf@_val+3)^(0+128),w
  5238  0359  00FB               	movwf	___lltoft@c+3
  5239  035A  0839               	movf	(sprintf@_val+2)^(0+128),w
  5240  035B  00FA               	movwf	___lltoft@c+2
  5241  035C  0838               	movf	(sprintf@_val+1)^(0+128),w
  5242  035D  00F9               	movwf	___lltoft@c+1
  5243  035E  0837               	movf	sprintf@_val^(0+128),w
  5244  035F  00F8               	movwf	___lltoft@c
  5245  0360  120A  118A  200B  120A  118A  	fcall	___lltoft
  5246  0365  0878               	movf	?___lltoft,w
  5247  0366  1283               	bcf	3,5	;RP0=0, select bank0
  5248  0367  1303               	bcf	3,6	;RP1=0, select bank0
  5249  0368  00DD               	movwf	___ftsub@f2
  5250  0369  0879               	movf	?___lltoft+1,w
  5251  036A  00DE               	movwf	___ftsub@f2+1
  5252  036B  087A               	movf	?___lltoft+2,w
  5253  036C  00DF               	movwf	___ftsub@f2+2
  5254  036D  1683               	bsf	3,5	;RP0=1, select bank1
  5255  036E  1303               	bcf	3,6	;RP1=0, select bank1
  5256  036F  083E               	movf	sprintf@fval^(0+128),w
  5257  0370  1283               	bcf	3,5	;RP0=0, select bank0
  5258  0371  1303               	bcf	3,6	;RP1=0, select bank0
  5259  0372  00E0               	movwf	___ftsub@f1
  5260  0373  1683               	bsf	3,5	;RP0=1, select bank1
  5261  0374  1303               	bcf	3,6	;RP1=0, select bank1
  5262  0375  083F               	movf	(sprintf@fval+1)^(0+128),w
  5263  0376  1283               	bcf	3,5	;RP0=0, select bank0
  5264  0377  1303               	bcf	3,6	;RP1=0, select bank0
  5265  0378  00E1               	movwf	___ftsub@f1+1
  5266  0379  1683               	bsf	3,5	;RP0=1, select bank1
  5267  037A  1303               	bcf	3,6	;RP1=0, select bank1
  5268  037B  0840               	movf	(sprintf@fval+2)^(0+128),w
  5269  037C  1283               	bcf	3,5	;RP0=0, select bank0
  5270  037D  1303               	bcf	3,6	;RP1=0, select bank0
  5271  037E  00E2               	movwf	___ftsub@f1+2
  5272  037F  160A  158A  216C  120A  118A  	fcall	___ftsub
  5273  0384  1283               	bcf	3,5	;RP0=0, select bank0
  5274  0385  1303               	bcf	3,6	;RP1=0, select bank0
  5275  0386  085D               	movf	?___ftsub,w
  5276  0387  1683               	bsf	3,5	;RP0=1, select bank1
  5277  0388  1303               	bcf	3,6	;RP1=0, select bank1
  5278  0389  00BE               	movwf	sprintf@fval^(0+128)
  5279  038A  1283               	bcf	3,5	;RP0=0, select bank0
  5280  038B  1303               	bcf	3,6	;RP1=0, select bank0
  5281  038C  085E               	movf	?___ftsub+1,w
  5282  038D  1683               	bsf	3,5	;RP0=1, select bank1
  5283  038E  1303               	bcf	3,6	;RP1=0, select bank1
  5284  038F  00BF               	movwf	(sprintf@fval+1)^(0+128)
  5285  0390  1283               	bcf	3,5	;RP0=0, select bank0
  5286  0391  1303               	bcf	3,6	;RP1=0, select bank0
  5287  0392  085F               	movf	?___ftsub+2,w
  5288  0393  1683               	bsf	3,5	;RP0=1, select bank1
  5289  0394  1303               	bcf	3,6	;RP1=0, select bank1
  5290  0395  00C0               	movwf	(sprintf@fval+2)^(0+128)
  5291                           
  5292                           ;doprnt.c: 1142: exp = 0;
  5293  0396  01B5               	clrf	sprintf@exp^(0+128)
  5294  0397  01B6               	clrf	(sprintf@exp+1)^(0+128)
  5295  0398                     l3055:	
  5296                           
  5297                           ;doprnt.c: 1143: }
  5298                           ;doprnt.c: 1145: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  5299  0398  01C1               	clrf	sprintf@c^(0+128)
  5300  0399  0AC1               	incf	sprintf@c^(0+128),f
  5301  039A  0841               	movf	sprintf@c^(0+128),w
  5302  039B  3A0A               	xorlw	10
  5303  039C  1903               	btfsc	3,2
  5304  039D  2BEE               	goto	l3069
  5305  039E                     l3061:	
  5306                           
  5307                           ;doprnt.c: 1146: if(_val._val < dpowers[c])
  5308  039E  0841               	movf	sprintf@c^(0+128),w
  5309  039F  1283               	bcf	3,5	;RP0=0, select bank0
  5310  03A0  1303               	bcf	3,6	;RP1=0, select bank0
  5311  03A1  00E7               	movwf	??_sprintf
  5312  03A2  3001               	movlw	1
  5313  03A3                     u4165:	
  5314  03A3  1003               	clrc
  5315  03A4  0DE7               	rlf	??_sprintf,f
  5316  03A5  3EFF               	addlw	-1
  5317  03A6  1D03               	skipz
  5318  03A7  2BA3               	goto	u4165
  5319  03A8  1003               	clrc
  5320  03A9  0D67               	rlf	??_sprintf,w
  5321  03AA  3E01               	addlw	low (_dpowers-__stringbase)
  5322  03AB  0084               	movwf	4
  5323  03AC  160A  118A  2000  120A  118A  	fcall	stringdir
  5324  03B1  00E8               	movwf	??_sprintf+1
  5325  03B2  160A  118A  2000  120A  118A  	fcall	stringdir
  5326  03B7  00E9               	movwf	??_sprintf+2
  5327  03B8  160A  118A  2000  120A  118A  	fcall	stringdir
  5328  03BD  00EA               	movwf	??_sprintf+3
  5329  03BE  160A  118A  2000  120A  118A  	fcall	stringdir
  5330  03C3  00EB               	movwf	??_sprintf+4
  5331  03C4  086B               	movf	??_sprintf+4,w
  5332  03C5  1683               	bsf	3,5	;RP0=1, select bank1
  5333  03C6  1303               	bcf	3,6	;RP1=0, select bank1
  5334  03C7  023A               	subwf	(sprintf@_val+3)^(0+128),w
  5335  03C8  1D03               	skipz
  5336  03C9  2BE0               	goto	u4175
  5337  03CA  1283               	bcf	3,5	;RP0=0, select bank0
  5338  03CB  1303               	bcf	3,6	;RP1=0, select bank0
  5339  03CC  086A               	movf	??_sprintf+3,w
  5340  03CD  1683               	bsf	3,5	;RP0=1, select bank1
  5341  03CE  1303               	bcf	3,6	;RP1=0, select bank1
  5342  03CF  0239               	subwf	(sprintf@_val+2)^(0+128),w
  5343  03D0  1D03               	skipz
  5344  03D1  2BE0               	goto	u4175
  5345  03D2  1283               	bcf	3,5	;RP0=0, select bank0
  5346  03D3  1303               	bcf	3,6	;RP1=0, select bank0
  5347  03D4  0869               	movf	??_sprintf+2,w
  5348  03D5  1683               	bsf	3,5	;RP0=1, select bank1
  5349  03D6  1303               	bcf	3,6	;RP1=0, select bank1
  5350  03D7  0238               	subwf	(sprintf@_val+1)^(0+128),w
  5351  03D8  1D03               	skipz
  5352  03D9  2BE0               	goto	u4175
  5353  03DA  1283               	bcf	3,5	;RP0=0, select bank0
  5354  03DB  1303               	bcf	3,6	;RP1=0, select bank0
  5355  03DC  0868               	movf	??_sprintf+1,w
  5356  03DD  1683               	bsf	3,5	;RP0=1, select bank1
  5357  03DE  1303               	bcf	3,6	;RP1=0, select bank1
  5358  03DF  0237               	subwf	sprintf@_val^(0+128),w
  5359  03E0                     u4175:	
  5360  03E0  1C03               	btfss	3,0
  5361  03E1  2BEE               	goto	l3069
  5362                           
  5363                           ;doprnt.c: 1147: break;
  5364  03E2  3001               	movlw	1
  5365  03E3  1283               	bcf	3,5	;RP0=0, select bank0
  5366  03E4  1303               	bcf	3,6	;RP1=0, select bank0
  5367  03E5  00E7               	movwf	??_sprintf
  5368  03E6  0867               	movf	??_sprintf,w
  5369  03E7  1683               	bsf	3,5	;RP0=1, select bank1
  5370  03E8  1303               	bcf	3,6	;RP1=0, select bank1
  5371  03E9  07C1               	addwf	sprintf@c^(0+128),f
  5372  03EA  0841               	movf	sprintf@c^(0+128),w
  5373  03EB  3A0A               	xorlw	10
  5374  03EC  1D03               	skipz
  5375  03ED  2B9E               	goto	l3061
  5376  03EE                     l3069:	
  5377                           
  5378                           ;doprnt.c: 1184: {
  5379                           ;doprnt.c: 1197: if(flag & 0x03)
  5380  03EE  3003               	movlw	3
  5381  03EF  0530               	andwf	sprintf@flag^(0+128),w
  5382  03F0  1283               	bcf	3,5	;RP0=0, select bank0
  5383  03F1  1303               	bcf	3,6	;RP1=0, select bank0
  5384  03F2  00E7               	movwf	??_sprintf
  5385  03F3  3000               	movlw	0
  5386  03F4  1683               	bsf	3,5	;RP0=1, select bank1
  5387  03F5  1303               	bcf	3,6	;RP1=0, select bank1
  5388  03F6  0531               	andwf	(sprintf@flag+1)^(0+128),w
  5389  03F7  1283               	bcf	3,5	;RP0=0, select bank0
  5390  03F8  1303               	bcf	3,6	;RP1=0, select bank0
  5391  03F9  00E8               	movwf	??_sprintf+1
  5392  03FA  0868               	movf	??_sprintf+1,w
  5393  03FB  0467               	iorwf	??_sprintf,w
  5394  03FC  1903               	skipnz
  5395  03FD  2C0F               	goto	l194
  5396                           
  5397                           ;doprnt.c: 1199: ((*sp++ = ('-')));
  5398  03FE  302D               	movlw	45
  5399  03FF                     L5:	
  5400  03FF  00E7               	movwf	??_sprintf
  5401  0400  1683               	bsf	3,5	;RP0=1, select bank1
  5402  0401  1303               	bcf	3,6	;RP1=0, select bank1
  5403  0402  083B               	movf	sprintf@sp^(0+128),w
  5404  0403  0084               	movwf	4
  5405  0404  1283               	bcf	3,5	;RP0=0, select bank0
  5406  0405  1303               	bcf	3,6	;RP1=0, select bank0
  5407  0406  0867               	movf	??_sprintf,w
  5408  0407  1383               	bcf	3,7	;select IRP bank0
  5409  0408  0080               	movwf	0
  5410  0409  3001               	movlw	1
  5411  040A  00E7               	movwf	??_sprintf
  5412  040B  0867               	movf	??_sprintf,w
  5413  040C  1683               	bsf	3,5	;RP0=1, select bank1
  5414  040D  1303               	bcf	3,6	;RP1=0, select bank1
  5415  040E  07BB               	addwf	sprintf@sp^(0+128),f
  5416  040F                     l194:	
  5417  040F  30FF               	movlw	-1
  5418  0410  1283               	bcf	3,5	;RP0=0, select bank0
  5419  0411  00E7               	movwf	??_sprintf
  5420  0412  0867               	movf	??_sprintf,w
  5421  0413  1683               	bsf	3,5	;RP0=1, select bank1
  5422  0414  1303               	bcf	3,6	;RP1=0, select bank1
  5423  0415  07C1               	addwf	sprintf@c^(0+128),f
  5424  0416  0841               	movf	sprintf@c^(0+128),w
  5425  0417  3AFF               	xorlw	-1
  5426  0418  1903               	btfsc	3,2
  5427  0419  2CB6               	goto	l3087
  5428                           
  5429                           ;doprnt.c: 1209: {
  5430                           ;doprnt.c: 1210: unsigned long vd = _val._val/dpowers[c];
  5431                           
  5432                           ;doprnt.c: 1204: }
  5433                           ;doprnt.c: 1205: while(c--) {
  5434  041A  0841               	movf	sprintf@c^(0+128),w
  5435  041B  1283               	bcf	3,5	;RP0=0, select bank0
  5436  041C  1303               	bcf	3,6	;RP1=0, select bank0
  5437  041D  00E7               	movwf	??_sprintf
  5438  041E  3001               	movlw	1
  5439  041F                     u4205:	
  5440  041F  1003               	clrc
  5441  0420  0DE7               	rlf	??_sprintf,f
  5442  0421  3EFF               	addlw	-1
  5443  0422  1D03               	skipz
  5444  0423  2C1F               	goto	u4205
  5445  0424  1003               	clrc
  5446  0425  0D67               	rlf	??_sprintf,w
  5447  0426  3E01               	addlw	low (_dpowers-__stringbase)
  5448  0427  0084               	movwf	4
  5449  0428  160A  118A  2000  120A  118A  	fcall	stringdir
  5450  042D  00F0               	movwf	___lldiv@divisor
  5451  042E  160A  118A  2000  120A  118A  	fcall	stringdir
  5452  0433  00F1               	movwf	___lldiv@divisor+1
  5453  0434  160A  118A  2000  120A  118A  	fcall	stringdir
  5454  0439  00F2               	movwf	___lldiv@divisor+2
  5455  043A  160A  118A  2000  120A  118A  	fcall	stringdir
  5456  043F  00F3               	movwf	___lldiv@divisor+3
  5457  0440  1683               	bsf	3,5	;RP0=1, select bank1
  5458  0441  1303               	bcf	3,6	;RP1=0, select bank1
  5459  0442  083A               	movf	(sprintf@_val+3)^(0+128),w
  5460  0443  00F7               	movwf	___lldiv@dividend+3
  5461  0444  0839               	movf	(sprintf@_val+2)^(0+128),w
  5462  0445  00F6               	movwf	___lldiv@dividend+2
  5463  0446  0838               	movf	(sprintf@_val+1)^(0+128),w
  5464  0447  00F5               	movwf	___lldiv@dividend+1
  5465  0448  0837               	movf	sprintf@_val^(0+128),w
  5466  0449  00F4               	movwf	___lldiv@dividend
  5467  044A  160A  158A  23E9  120A  118A  	fcall	___lldiv
  5468  044F  0873               	movf	?___lldiv+3,w
  5469  0450  1683               	bsf	3,5	;RP0=1, select bank1
  5470  0451  1303               	bcf	3,6	;RP1=0, select bank1
  5471  0452  00AA               	movwf	(sprintf@vd+3)^(0+128)
  5472  0453  0872               	movf	?___lldiv+2,w
  5473  0454  00A9               	movwf	(sprintf@vd+2)^(0+128)
  5474  0455  0871               	movf	?___lldiv+1,w
  5475  0456  00A8               	movwf	(sprintf@vd+1)^(0+128)
  5476  0457  0870               	movf	?___lldiv,w
  5477  0458  00A7               	movwf	sprintf@vd^(0+128)
  5478                           
  5479                           ;doprnt.c: 1211: vd %= 10;
  5480  0459  3000               	movlw	0
  5481  045A  1283               	bcf	3,5	;RP0=0, select bank0
  5482  045B  1303               	bcf	3,6	;RP1=0, select bank0
  5483  045C  00A3               	movwf	___llmod@divisor+3
  5484  045D  3000               	movlw	0
  5485  045E  00A2               	movwf	___llmod@divisor+2
  5486  045F  3000               	movlw	0
  5487  0460  00A1               	movwf	___llmod@divisor+1
  5488  0461  300A               	movlw	10
  5489  0462  00A0               	movwf	___llmod@divisor
  5490  0463  1683               	bsf	3,5	;RP0=1, select bank1
  5491  0464  1303               	bcf	3,6	;RP1=0, select bank1
  5492  0465  082A               	movf	(sprintf@vd+3)^(0+128),w
  5493  0466  1283               	bcf	3,5	;RP0=0, select bank0
  5494  0467  1303               	bcf	3,6	;RP1=0, select bank0
  5495  0468  00A7               	movwf	___llmod@dividend+3
  5496  0469  1683               	bsf	3,5	;RP0=1, select bank1
  5497  046A  1303               	bcf	3,6	;RP1=0, select bank1
  5498  046B  0829               	movf	(sprintf@vd+2)^(0+128),w
  5499  046C  1283               	bcf	3,5	;RP0=0, select bank0
  5500  046D  1303               	bcf	3,6	;RP1=0, select bank0
  5501  046E  00A6               	movwf	___llmod@dividend+2
  5502  046F  1683               	bsf	3,5	;RP0=1, select bank1
  5503  0470  1303               	bcf	3,6	;RP1=0, select bank1
  5504  0471  0828               	movf	(sprintf@vd+1)^(0+128),w
  5505  0472  1283               	bcf	3,5	;RP0=0, select bank0
  5506  0473  1303               	bcf	3,6	;RP1=0, select bank0
  5507  0474  00A5               	movwf	___llmod@dividend+1
  5508  0475  1683               	bsf	3,5	;RP0=1, select bank1
  5509  0476  1303               	bcf	3,6	;RP1=0, select bank1
  5510  0477  0827               	movf	sprintf@vd^(0+128),w
  5511  0478  1283               	bcf	3,5	;RP0=0, select bank0
  5512  0479  1303               	bcf	3,6	;RP1=0, select bank0
  5513  047A  00A4               	movwf	___llmod@dividend
  5514  047B  160A  158A  22E1  120A  118A  	fcall	___llmod
  5515  0480  1283               	bcf	3,5	;RP0=0, select bank0
  5516  0481  1303               	bcf	3,6	;RP1=0, select bank0
  5517  0482  0823               	movf	?___llmod+3,w
  5518  0483  1683               	bsf	3,5	;RP0=1, select bank1
  5519  0484  1303               	bcf	3,6	;RP1=0, select bank1
  5520  0485  00AA               	movwf	(sprintf@vd+3)^(0+128)
  5521  0486  1283               	bcf	3,5	;RP0=0, select bank0
  5522  0487  1303               	bcf	3,6	;RP1=0, select bank0
  5523  0488  0822               	movf	?___llmod+2,w
  5524  0489  1683               	bsf	3,5	;RP0=1, select bank1
  5525  048A  1303               	bcf	3,6	;RP1=0, select bank1
  5526  048B  00A9               	movwf	(sprintf@vd+2)^(0+128)
  5527  048C  1283               	bcf	3,5	;RP0=0, select bank0
  5528  048D  1303               	bcf	3,6	;RP1=0, select bank0
  5529  048E  0821               	movf	?___llmod+1,w
  5530  048F  1683               	bsf	3,5	;RP0=1, select bank1
  5531  0490  1303               	bcf	3,6	;RP1=0, select bank1
  5532  0491  00A8               	movwf	(sprintf@vd+1)^(0+128)
  5533  0492  1283               	bcf	3,5	;RP0=0, select bank0
  5534  0493  1303               	bcf	3,6	;RP1=0, select bank0
  5535  0494  0820               	movf	?___llmod,w
  5536  0495  1683               	bsf	3,5	;RP0=1, select bank1
  5537  0496  1303               	bcf	3,6	;RP1=0, select bank1
  5538  0497  00A7               	movwf	sprintf@vd^(0+128)
  5539                           
  5540                           ;doprnt.c: 1212: ((*sp++ = ('0' + vd)));
  5541  0498  0827               	movf	sprintf@vd^(0+128),w
  5542  0499  3E30               	addlw	48
  5543  049A  1283               	bcf	3,5	;RP0=0, select bank0
  5544  049B  1303               	bcf	3,6	;RP1=0, select bank0
  5545  049C  2BFF               	goto	L5
  5546  049D                     l3081:	
  5547                           ;doprnt.c: 1213: }
  5548                           ;doprnt.c: 1215: }
  5549                           ;doprnt.c: 1216: while(exp > 0) {
  5550                           
  5551                           
  5552                           ;doprnt.c: 1217: ((*sp++ = ('0')));
  5553  049D  3030               	movlw	48
  5554  049E  1283               	bcf	3,5	;RP0=0, select bank0
  5555  049F  1303               	bcf	3,6	;RP1=0, select bank0
  5556  04A0  00E7               	movwf	??_sprintf
  5557  04A1  1683               	bsf	3,5	;RP0=1, select bank1
  5558  04A2  1303               	bcf	3,6	;RP1=0, select bank1
  5559  04A3  083B               	movf	sprintf@sp^(0+128),w
  5560  04A4  0084               	movwf	4
  5561  04A5  1283               	bcf	3,5	;RP0=0, select bank0
  5562  04A6  1303               	bcf	3,6	;RP1=0, select bank0
  5563  04A7  0867               	movf	??_sprintf,w
  5564  04A8  1383               	bcf	3,7	;select IRP bank0
  5565  04A9  0080               	movwf	0
  5566  04AA  3001               	movlw	1
  5567  04AB  00E7               	movwf	??_sprintf
  5568  04AC  0867               	movf	??_sprintf,w
  5569  04AD  1683               	bsf	3,5	;RP0=1, select bank1
  5570  04AE  1303               	bcf	3,6	;RP1=0, select bank1
  5571  04AF  07BB               	addwf	sprintf@sp^(0+128),f
  5572                           
  5573                           ;doprnt.c: 1218: exp--;
  5574  04B0  30FF               	movlw	255
  5575  04B1  07B5               	addwf	sprintf@exp^(0+128),f
  5576  04B2  1803               	skipnc
  5577  04B3  0AB6               	incf	(sprintf@exp+1)^(0+128),f
  5578  04B4  30FF               	movlw	255
  5579  04B5  07B6               	addwf	(sprintf@exp+1)^(0+128),f
  5580  04B6                     l3087:	
  5581  04B6  0836               	movf	(sprintf@exp+1)^(0+128),w
  5582  04B7  3A80               	xorlw	128
  5583  04B8  00FF               	movwf	127
  5584  04B9  3080               	movlw	128
  5585  04BA  027F               	subwf	127,w
  5586  04BB  1D03               	skipz
  5587  04BC  2CBF               	goto	u4225
  5588  04BD  3001               	movlw	1
  5589  04BE  0235               	subwf	sprintf@exp^(0+128),w
  5590  04BF                     u4225:	
  5591  04BF  1803               	skipnc
  5592  04C0  2C9D               	goto	l3081
  5593                           
  5594                           ;doprnt.c: 1219: }
  5595                           ;doprnt.c: 1220: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  5596  04C1  1683               	bsf	3,5	;RP0=1, select bank1
  5597  04C2  1303               	bcf	3,6	;RP1=0, select bank1
  5598  04C3  083D               	movf	(sprintf@prec+1)^(0+128),w
  5599  04C4  3A80               	xorlw	128
  5600  04C5  00FF               	movwf	127
  5601  04C6  3080               	movlw	128
  5602  04C7  027F               	subwf	127,w
  5603  04C8  1D03               	skipz
  5604  04C9  2CCC               	goto	u4235
  5605  04CA  3009               	movlw	9
  5606  04CB  023C               	subwf	sprintf@prec^(0+128),w
  5607  04CC                     u4235:	
  5608  04CC  1C03               	skipc
  5609  04CD  2CD0               	goto	l3093
  5610                           
  5611                           ;doprnt.c: 1221: c = (sizeof dpowers/sizeof dpowers[0])-2;
  5612  04CE  3008               	movlw	8
  5613  04CF  2CD3               	goto	L6
  5614  04D0                     l3093:	
  5615                           
  5616                           ;doprnt.c: 1222: else
  5617                           ;doprnt.c: 1223: c = prec;
  5618  04D0  1683               	bsf	3,5	;RP0=1, select bank1
  5619  04D1  1303               	bcf	3,6	;RP1=0, select bank1
  5620  04D2  083C               	movf	sprintf@prec^(0+128),w
  5621  04D3                     L6:	
  5622  04D3  1283               	bcf	3,5	;RP0=0, select bank0
  5623  04D4  1303               	bcf	3,6	;RP1=0, select bank0
  5624  04D5  00E7               	movwf	??_sprintf
  5625  04D6  0867               	movf	??_sprintf,w
  5626  04D7  1683               	bsf	3,5	;RP0=1, select bank1
  5627  04D8  1303               	bcf	3,6	;RP1=0, select bank1
  5628  04D9  00C1               	movwf	sprintf@c^(0+128)
  5629                           
  5630                           ;doprnt.c: 1224: prec -= c;
  5631  04DA  0841               	movf	sprintf@c^(0+128),w
  5632  04DB  1283               	bcf	3,5	;RP0=0, select bank0
  5633  04DC  1303               	bcf	3,6	;RP1=0, select bank0
  5634  04DD  00E7               	movwf	??_sprintf
  5635  04DE  01E8               	clrf	??_sprintf+1
  5636  04DF  1BE7               	btfsc	??_sprintf,7
  5637  04E0  03E8               	decf	??_sprintf+1,f
  5638  04E1  0867               	movf	??_sprintf,w
  5639  04E2  1683               	bsf	3,5	;RP0=1, select bank1
  5640  04E3  1303               	bcf	3,6	;RP1=0, select bank1
  5641  04E4  02BC               	subwf	sprintf@prec^(0+128),f
  5642  04E5  1283               	bcf	3,5	;RP0=0, select bank0
  5643  04E6  1303               	bcf	3,6	;RP1=0, select bank0
  5644  04E7  0868               	movf	??_sprintf+1,w
  5645  04E8  1683               	bsf	3,5	;RP0=1, select bank1
  5646  04E9  1303               	bcf	3,6	;RP1=0, select bank1
  5647  04EA  1C03               	skipc
  5648  04EB  03BD               	decf	(sprintf@prec+1)^(0+128),f
  5649  04EC  02BD               	subwf	(sprintf@prec+1)^(0+128),f
  5650                           
  5651                           ;doprnt.c: 1228: if(c)
  5652  04ED  0841               	movf	sprintf@c^(0+128),w
  5653  04EE  1903               	btfsc	3,2
  5654  04EF  2D03               	goto	l3099
  5655                           
  5656                           ;doprnt.c: 1230: ((*sp++ = ('.')));
  5657  04F0  302E               	movlw	46
  5658  04F1  1283               	bcf	3,5	;RP0=0, select bank0
  5659  04F2  1303               	bcf	3,6	;RP1=0, select bank0
  5660  04F3  00E7               	movwf	??_sprintf
  5661  04F4  1683               	bsf	3,5	;RP0=1, select bank1
  5662  04F5  1303               	bcf	3,6	;RP1=0, select bank1
  5663  04F6  083B               	movf	sprintf@sp^(0+128),w
  5664  04F7  0084               	movwf	4
  5665  04F8  1283               	bcf	3,5	;RP0=0, select bank0
  5666  04F9  1303               	bcf	3,6	;RP1=0, select bank0
  5667  04FA  0867               	movf	??_sprintf,w
  5668  04FB  1383               	bcf	3,7	;select IRP bank0
  5669  04FC  0080               	movwf	0
  5670  04FD  3001               	movlw	1
  5671  04FE  00E7               	movwf	??_sprintf
  5672  04FF  0867               	movf	??_sprintf,w
  5673  0500  1683               	bsf	3,5	;RP0=1, select bank1
  5674  0501  1303               	bcf	3,6	;RP1=0, select bank1
  5675  0502  07BB               	addwf	sprintf@sp^(0+128),f
  5676  0503                     l3099:	
  5677                           
  5678                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  5679  0503  0841               	movf	sprintf@c^(0+128),w
  5680  0504  120A  158A  2561  120A  118A  	fcall	_scale
  5681  0509  1283               	bcf	3,5	;RP0=0, select bank0
  5682  050A  1303               	bcf	3,6	;RP1=0, select bank0
  5683  050B  0840               	movf	?_scale,w
  5684  050C  1683               	bsf	3,5	;RP0=1, select bank1
  5685  050D  1303               	bcf	3,6	;RP1=0, select bank1
  5686  050E  00A0               	movwf	_sprintf$700^(0+128)
  5687  050F  1283               	bcf	3,5	;RP0=0, select bank0
  5688  0510  1303               	bcf	3,6	;RP1=0, select bank0
  5689  0511  0841               	movf	?_scale+1,w
  5690  0512  1683               	bsf	3,5	;RP0=1, select bank1
  5691  0513  1303               	bcf	3,6	;RP1=0, select bank1
  5692  0514  00A1               	movwf	(_sprintf$700+1)^(0+128)
  5693  0515  1283               	bcf	3,5	;RP0=0, select bank0
  5694  0516  1303               	bcf	3,6	;RP1=0, select bank0
  5695  0517  0842               	movf	?_scale+2,w
  5696  0518  1683               	bsf	3,5	;RP0=1, select bank1
  5697  0519  1303               	bcf	3,6	;RP1=0, select bank1
  5698  051A  00A2               	movwf	(_sprintf$700+2)^(0+128)
  5699                           
  5700                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  5701  051B  0820               	movf	_sprintf$700^(0+128),w
  5702  051C  1283               	bcf	3,5	;RP0=0, select bank0
  5703  051D  1303               	bcf	3,6	;RP1=0, select bank0
  5704  051E  00B3               	movwf	___ftmul@f2
  5705  051F  1683               	bsf	3,5	;RP0=1, select bank1
  5706  0520  1303               	bcf	3,6	;RP1=0, select bank1
  5707  0521  0821               	movf	(_sprintf$700+1)^(0+128),w
  5708  0522  1283               	bcf	3,5	;RP0=0, select bank0
  5709  0523  1303               	bcf	3,6	;RP1=0, select bank0
  5710  0524  00B4               	movwf	___ftmul@f2+1
  5711  0525  1683               	bsf	3,5	;RP0=1, select bank1
  5712  0526  1303               	bcf	3,6	;RP1=0, select bank1
  5713  0527  0822               	movf	(_sprintf$700+2)^(0+128),w
  5714  0528  1283               	bcf	3,5	;RP0=0, select bank0
  5715  0529  1303               	bcf	3,6	;RP1=0, select bank0
  5716  052A  00B5               	movwf	___ftmul@f2+2
  5717  052B  1683               	bsf	3,5	;RP0=1, select bank1
  5718  052C  1303               	bcf	3,6	;RP1=0, select bank1
  5719  052D  083E               	movf	sprintf@fval^(0+128),w
  5720  052E  1283               	bcf	3,5	;RP0=0, select bank0
  5721  052F  1303               	bcf	3,6	;RP1=0, select bank0
  5722  0530  00B0               	movwf	___ftmul@f1
  5723  0531  1683               	bsf	3,5	;RP0=1, select bank1
  5724  0532  1303               	bcf	3,6	;RP1=0, select bank1
  5725  0533  083F               	movf	(sprintf@fval+1)^(0+128),w
  5726  0534  1283               	bcf	3,5	;RP0=0, select bank0
  5727  0535  1303               	bcf	3,6	;RP1=0, select bank0
  5728  0536  00B1               	movwf	___ftmul@f1+1
  5729  0537  1683               	bsf	3,5	;RP0=1, select bank1
  5730  0538  1303               	bcf	3,6	;RP1=0, select bank1
  5731  0539  0840               	movf	(sprintf@fval+2)^(0+128),w
  5732  053A  1283               	bcf	3,5	;RP0=0, select bank0
  5733  053B  1303               	bcf	3,6	;RP1=0, select bank0
  5734  053C  00B2               	movwf	___ftmul@f1+2
  5735  053D  160A  118A  231B  120A  118A  	fcall	___ftmul
  5736  0542  1283               	bcf	3,5	;RP0=0, select bank0
  5737  0543  1303               	bcf	3,6	;RP1=0, select bank0
  5738  0544  0830               	movf	?___ftmul,w
  5739  0545  00C9               	movwf	___fttol@f1
  5740  0546  0831               	movf	?___ftmul+1,w
  5741  0547  00CA               	movwf	___fttol@f1+1
  5742  0548  0832               	movf	?___ftmul+2,w
  5743  0549  00CB               	movwf	___fttol@f1+2
  5744  054A  160A  158A  25AB  120A  118A  	fcall	___fttol
  5745  054F  1283               	bcf	3,5	;RP0=0, select bank0
  5746  0550  1303               	bcf	3,6	;RP1=0, select bank0
  5747  0551  084C               	movf	?___fttol+3,w
  5748  0552  1683               	bsf	3,5	;RP0=1, select bank1
  5749  0553  1303               	bcf	3,6	;RP1=0, select bank1
  5750  0554  00BA               	movwf	(sprintf@_val+3)^(0+128)
  5751  0555  1283               	bcf	3,5	;RP0=0, select bank0
  5752  0556  1303               	bcf	3,6	;RP1=0, select bank0
  5753  0557  084B               	movf	?___fttol+2,w
  5754  0558  1683               	bsf	3,5	;RP0=1, select bank1
  5755  0559  1303               	bcf	3,6	;RP1=0, select bank1
  5756  055A  00B9               	movwf	(sprintf@_val+2)^(0+128)
  5757  055B  1283               	bcf	3,5	;RP0=0, select bank0
  5758  055C  1303               	bcf	3,6	;RP1=0, select bank0
  5759  055D  084A               	movf	?___fttol+1,w
  5760  055E  1683               	bsf	3,5	;RP0=1, select bank1
  5761  055F  1303               	bcf	3,6	;RP1=0, select bank1
  5762  0560  00B8               	movwf	(sprintf@_val+1)^(0+128)
  5763  0561  1283               	bcf	3,5	;RP0=0, select bank0
  5764  0562  1303               	bcf	3,6	;RP1=0, select bank0
  5765  0563  0849               	movf	?___fttol,w
  5766  0564                     L7:	
  5767  0564  1683               	bsf	3,5	;RP0=1, select bank1
  5768  0565  1303               	bcf	3,6	;RP1=0, select bank1
  5769  0566  00B7               	movwf	sprintf@_val^(0+128)
  5770  0567  30FF               	movlw	-1
  5771  0568  1283               	bcf	3,5	;RP0=0, select bank0
  5772  0569  1303               	bcf	3,6	;RP1=0, select bank0
  5773  056A  00E7               	movwf	??_sprintf
  5774  056B  0867               	movf	??_sprintf,w
  5775  056C  1683               	bsf	3,5	;RP0=1, select bank1
  5776  056D  1303               	bcf	3,6	;RP1=0, select bank1
  5777  056E  07C1               	addwf	sprintf@c^(0+128),f
  5778  056F  0841               	movf	sprintf@c^(0+128),w
  5779  0570  3AFF               	xorlw	-1
  5780  0571  1903               	btfsc	3,2
  5781  0572  2E77               	goto	l3119
  5782                           
  5783                           ;doprnt.c: 1238: unsigned long vd = _val._val/dpowers[c];
  5784                           
  5785                           ;doprnt.c: 1237: while(c--) {
  5786  0573  0841               	movf	sprintf@c^(0+128),w
  5787  0574  1283               	bcf	3,5	;RP0=0, select bank0
  5788  0575  1303               	bcf	3,6	;RP1=0, select bank0
  5789  0576  00E7               	movwf	??_sprintf
  5790  0577  3001               	movlw	1
  5791  0578                     u4255:	
  5792  0578  1003               	clrc
  5793  0579  0DE7               	rlf	??_sprintf,f
  5794  057A  3EFF               	addlw	-1
  5795  057B  1D03               	skipz
  5796  057C  2D78               	goto	u4255
  5797  057D  1003               	clrc
  5798  057E  0D67               	rlf	??_sprintf,w
  5799  057F  3E01               	addlw	low (_dpowers-__stringbase)
  5800  0580  0084               	movwf	4
  5801  0581  160A  118A  2000  120A  118A  	fcall	stringdir
  5802  0586  00F0               	movwf	___lldiv@divisor
  5803  0587  160A  118A  2000  120A  118A  	fcall	stringdir
  5804  058C  00F1               	movwf	___lldiv@divisor+1
  5805  058D  160A  118A  2000  120A  118A  	fcall	stringdir
  5806  0592  00F2               	movwf	___lldiv@divisor+2
  5807  0593  160A  118A  2000  120A  118A  	fcall	stringdir
  5808  0598  00F3               	movwf	___lldiv@divisor+3
  5809  0599  1683               	bsf	3,5	;RP0=1, select bank1
  5810  059A  1303               	bcf	3,6	;RP1=0, select bank1
  5811  059B  083A               	movf	(sprintf@_val+3)^(0+128),w
  5812  059C  00F7               	movwf	___lldiv@dividend+3
  5813  059D  0839               	movf	(sprintf@_val+2)^(0+128),w
  5814  059E  00F6               	movwf	___lldiv@dividend+2
  5815  059F  0838               	movf	(sprintf@_val+1)^(0+128),w
  5816  05A0  00F5               	movwf	___lldiv@dividend+1
  5817  05A1  0837               	movf	sprintf@_val^(0+128),w
  5818  05A2  00F4               	movwf	___lldiv@dividend
  5819  05A3  160A  158A  23E9  120A  118A  	fcall	___lldiv
  5820  05A8  0873               	movf	?___lldiv+3,w
  5821  05A9  1683               	bsf	3,5	;RP0=1, select bank1
  5822  05AA  1303               	bcf	3,6	;RP1=0, select bank1
  5823  05AB  00AE               	movwf	(sprintf@vd_192+3)^(0+128)
  5824  05AC  0872               	movf	?___lldiv+2,w
  5825  05AD  00AD               	movwf	(sprintf@vd_192+2)^(0+128)
  5826  05AE  0871               	movf	?___lldiv+1,w
  5827  05AF  00AC               	movwf	(sprintf@vd_192+1)^(0+128)
  5828  05B0  0870               	movf	?___lldiv,w
  5829  05B1  00AB               	movwf	sprintf@vd_192^(0+128)
  5830                           
  5831                           ;doprnt.c: 1239: vd %= 10;
  5832  05B2  3000               	movlw	0
  5833  05B3  1283               	bcf	3,5	;RP0=0, select bank0
  5834  05B4  1303               	bcf	3,6	;RP1=0, select bank0
  5835  05B5  00A3               	movwf	___llmod@divisor+3
  5836  05B6  3000               	movlw	0
  5837  05B7  00A2               	movwf	___llmod@divisor+2
  5838  05B8  3000               	movlw	0
  5839  05B9  00A1               	movwf	___llmod@divisor+1
  5840  05BA  300A               	movlw	10
  5841  05BB  00A0               	movwf	___llmod@divisor
  5842  05BC  1683               	bsf	3,5	;RP0=1, select bank1
  5843  05BD  1303               	bcf	3,6	;RP1=0, select bank1
  5844  05BE  082E               	movf	(sprintf@vd_192+3)^(0+128),w
  5845  05BF  1283               	bcf	3,5	;RP0=0, select bank0
  5846  05C0  1303               	bcf	3,6	;RP1=0, select bank0
  5847  05C1  00A7               	movwf	___llmod@dividend+3
  5848  05C2  1683               	bsf	3,5	;RP0=1, select bank1
  5849  05C3  1303               	bcf	3,6	;RP1=0, select bank1
  5850  05C4  082D               	movf	(sprintf@vd_192+2)^(0+128),w
  5851  05C5  1283               	bcf	3,5	;RP0=0, select bank0
  5852  05C6  1303               	bcf	3,6	;RP1=0, select bank0
  5853  05C7  00A6               	movwf	___llmod@dividend+2
  5854  05C8  1683               	bsf	3,5	;RP0=1, select bank1
  5855  05C9  1303               	bcf	3,6	;RP1=0, select bank1
  5856  05CA  082C               	movf	(sprintf@vd_192+1)^(0+128),w
  5857  05CB  1283               	bcf	3,5	;RP0=0, select bank0
  5858  05CC  1303               	bcf	3,6	;RP1=0, select bank0
  5859  05CD  00A5               	movwf	___llmod@dividend+1
  5860  05CE  1683               	bsf	3,5	;RP0=1, select bank1
  5861  05CF  1303               	bcf	3,6	;RP1=0, select bank1
  5862  05D0  082B               	movf	sprintf@vd_192^(0+128),w
  5863  05D1  1283               	bcf	3,5	;RP0=0, select bank0
  5864  05D2  1303               	bcf	3,6	;RP1=0, select bank0
  5865  05D3  00A4               	movwf	___llmod@dividend
  5866  05D4  160A  158A  22E1  120A  118A  	fcall	___llmod
  5867  05D9  1283               	bcf	3,5	;RP0=0, select bank0
  5868  05DA  1303               	bcf	3,6	;RP1=0, select bank0
  5869  05DB  0823               	movf	?___llmod+3,w
  5870  05DC  1683               	bsf	3,5	;RP0=1, select bank1
  5871  05DD  1303               	bcf	3,6	;RP1=0, select bank1
  5872  05DE  00AE               	movwf	(sprintf@vd_192+3)^(0+128)
  5873  05DF  1283               	bcf	3,5	;RP0=0, select bank0
  5874  05E0  1303               	bcf	3,6	;RP1=0, select bank0
  5875  05E1  0822               	movf	?___llmod+2,w
  5876  05E2  1683               	bsf	3,5	;RP0=1, select bank1
  5877  05E3  1303               	bcf	3,6	;RP1=0, select bank1
  5878  05E4  00AD               	movwf	(sprintf@vd_192+2)^(0+128)
  5879  05E5  1283               	bcf	3,5	;RP0=0, select bank0
  5880  05E6  1303               	bcf	3,6	;RP1=0, select bank0
  5881  05E7  0821               	movf	?___llmod+1,w
  5882  05E8  1683               	bsf	3,5	;RP0=1, select bank1
  5883  05E9  1303               	bcf	3,6	;RP1=0, select bank1
  5884  05EA  00AC               	movwf	(sprintf@vd_192+1)^(0+128)
  5885  05EB  1283               	bcf	3,5	;RP0=0, select bank0
  5886  05EC  1303               	bcf	3,6	;RP1=0, select bank0
  5887  05ED  0820               	movf	?___llmod,w
  5888  05EE  1683               	bsf	3,5	;RP0=1, select bank1
  5889  05EF  1303               	bcf	3,6	;RP1=0, select bank1
  5890  05F0  00AB               	movwf	sprintf@vd_192^(0+128)
  5891                           
  5892                           ;doprnt.c: 1240: ((*sp++ = ('0' + vd)));
  5893  05F1  082B               	movf	sprintf@vd_192^(0+128),w
  5894  05F2  3E30               	addlw	48
  5895  05F3  1283               	bcf	3,5	;RP0=0, select bank0
  5896  05F4  1303               	bcf	3,6	;RP1=0, select bank0
  5897  05F5  00E7               	movwf	??_sprintf
  5898  05F6  1683               	bsf	3,5	;RP0=1, select bank1
  5899  05F7  1303               	bcf	3,6	;RP1=0, select bank1
  5900  05F8  083B               	movf	sprintf@sp^(0+128),w
  5901  05F9  0084               	movwf	4
  5902  05FA  1283               	bcf	3,5	;RP0=0, select bank0
  5903  05FB  1303               	bcf	3,6	;RP1=0, select bank0
  5904  05FC  0867               	movf	??_sprintf,w
  5905  05FD  1383               	bcf	3,7	;select IRP bank0
  5906  05FE  0080               	movwf	0
  5907  05FF  3001               	movlw	1
  5908  0600  00E7               	movwf	??_sprintf
  5909  0601  0867               	movf	??_sprintf,w
  5910  0602  1683               	bsf	3,5	;RP0=1, select bank1
  5911  0603  1303               	bcf	3,6	;RP1=0, select bank1
  5912  0604  07BB               	addwf	sprintf@sp^(0+128),f
  5913                           
  5914                           ;doprnt.c: 1241: _val._val %= dpowers[c];
  5915  0605  0841               	movf	sprintf@c^(0+128),w
  5916  0606  1283               	bcf	3,5	;RP0=0, select bank0
  5917  0607  1303               	bcf	3,6	;RP1=0, select bank0
  5918  0608  00E7               	movwf	??_sprintf
  5919  0609  3001               	movlw	1
  5920  060A                     u4265:	
  5921  060A  1003               	clrc
  5922  060B  0DE7               	rlf	??_sprintf,f
  5923  060C  3EFF               	addlw	-1
  5924  060D  1D03               	skipz
  5925  060E  2E0A               	goto	u4265
  5926  060F  1003               	clrc
  5927  0610  0D67               	rlf	??_sprintf,w
  5928  0611  3E01               	addlw	low (_dpowers-__stringbase)
  5929  0612  0084               	movwf	4
  5930  0613  160A  118A  2000  120A  118A  	fcall	stringdir
  5931  0618  00A0               	movwf	___llmod@divisor
  5932  0619  160A  118A  2000  120A  118A  	fcall	stringdir
  5933  061E  00A1               	movwf	___llmod@divisor+1
  5934  061F  160A  118A  2000  120A  118A  	fcall	stringdir
  5935  0624  00A2               	movwf	___llmod@divisor+2
  5936  0625  160A  118A  2000  120A  118A  	fcall	stringdir
  5937  062A  00A3               	movwf	___llmod@divisor+3
  5938  062B  1683               	bsf	3,5	;RP0=1, select bank1
  5939  062C  1303               	bcf	3,6	;RP1=0, select bank1
  5940  062D  083A               	movf	(sprintf@_val+3)^(0+128),w
  5941  062E  1283               	bcf	3,5	;RP0=0, select bank0
  5942  062F  1303               	bcf	3,6	;RP1=0, select bank0
  5943  0630  00A7               	movwf	___llmod@dividend+3
  5944  0631  1683               	bsf	3,5	;RP0=1, select bank1
  5945  0632  1303               	bcf	3,6	;RP1=0, select bank1
  5946  0633  0839               	movf	(sprintf@_val+2)^(0+128),w
  5947  0634  1283               	bcf	3,5	;RP0=0, select bank0
  5948  0635  1303               	bcf	3,6	;RP1=0, select bank0
  5949  0636  00A6               	movwf	___llmod@dividend+2
  5950  0637  1683               	bsf	3,5	;RP0=1, select bank1
  5951  0638  1303               	bcf	3,6	;RP1=0, select bank1
  5952  0639  0838               	movf	(sprintf@_val+1)^(0+128),w
  5953  063A  1283               	bcf	3,5	;RP0=0, select bank0
  5954  063B  1303               	bcf	3,6	;RP1=0, select bank0
  5955  063C  00A5               	movwf	___llmod@dividend+1
  5956  063D  1683               	bsf	3,5	;RP0=1, select bank1
  5957  063E  1303               	bcf	3,6	;RP1=0, select bank1
  5958  063F  0837               	movf	sprintf@_val^(0+128),w
  5959  0640  1283               	bcf	3,5	;RP0=0, select bank0
  5960  0641  1303               	bcf	3,6	;RP1=0, select bank0
  5961  0642  00A4               	movwf	___llmod@dividend
  5962  0643  160A  158A  22E1  120A  118A  	fcall	___llmod
  5963  0648  1283               	bcf	3,5	;RP0=0, select bank0
  5964  0649  1303               	bcf	3,6	;RP1=0, select bank0
  5965  064A  0823               	movf	?___llmod+3,w
  5966  064B  1683               	bsf	3,5	;RP0=1, select bank1
  5967  064C  1303               	bcf	3,6	;RP1=0, select bank1
  5968  064D  00BA               	movwf	(sprintf@_val+3)^(0+128)
  5969  064E  1283               	bcf	3,5	;RP0=0, select bank0
  5970  064F  1303               	bcf	3,6	;RP1=0, select bank0
  5971  0650  0822               	movf	?___llmod+2,w
  5972  0651  1683               	bsf	3,5	;RP0=1, select bank1
  5973  0652  1303               	bcf	3,6	;RP1=0, select bank1
  5974  0653  00B9               	movwf	(sprintf@_val+2)^(0+128)
  5975  0654  1283               	bcf	3,5	;RP0=0, select bank0
  5976  0655  1303               	bcf	3,6	;RP1=0, select bank0
  5977  0656  0821               	movf	?___llmod+1,w
  5978  0657  1683               	bsf	3,5	;RP0=1, select bank1
  5979  0658  1303               	bcf	3,6	;RP1=0, select bank1
  5980  0659  00B8               	movwf	(sprintf@_val+1)^(0+128)
  5981  065A  1283               	bcf	3,5	;RP0=0, select bank0
  5982  065B  1303               	bcf	3,6	;RP1=0, select bank0
  5983  065C  0820               	movf	?___llmod,w
  5984  065D  2D64               	goto	L7
  5985  065E                     l3113:	
  5986                           ;doprnt.c: 1242: }
  5987                           ;doprnt.c: 1244: while(prec) {
  5988                           
  5989                           
  5990                           ;doprnt.c: 1245: ((*sp++ = ('0')));
  5991  065E  3030               	movlw	48
  5992  065F  1283               	bcf	3,5	;RP0=0, select bank0
  5993  0660  1303               	bcf	3,6	;RP1=0, select bank0
  5994  0661  00E7               	movwf	??_sprintf
  5995  0662  1683               	bsf	3,5	;RP0=1, select bank1
  5996  0663  1303               	bcf	3,6	;RP1=0, select bank1
  5997  0664  083B               	movf	sprintf@sp^(0+128),w
  5998  0665  0084               	movwf	4
  5999  0666  1283               	bcf	3,5	;RP0=0, select bank0
  6000  0667  1303               	bcf	3,6	;RP1=0, select bank0
  6001  0668  0867               	movf	??_sprintf,w
  6002  0669  1383               	bcf	3,7	;select IRP bank0
  6003  066A  0080               	movwf	0
  6004  066B  3001               	movlw	1
  6005  066C  00E7               	movwf	??_sprintf
  6006  066D  0867               	movf	??_sprintf,w
  6007  066E  1683               	bsf	3,5	;RP0=1, select bank1
  6008  066F  1303               	bcf	3,6	;RP1=0, select bank1
  6009  0670  07BB               	addwf	sprintf@sp^(0+128),f
  6010                           
  6011                           ;doprnt.c: 1246: prec--;
  6012  0671  30FF               	movlw	255
  6013  0672  07BC               	addwf	sprintf@prec^(0+128),f
  6014  0673  1803               	skipnc
  6015  0674  0ABD               	incf	(sprintf@prec+1)^(0+128),f
  6016  0675  30FF               	movlw	255
  6017  0676  07BD               	addwf	(sprintf@prec+1)^(0+128),f
  6018  0677                     l3119:	
  6019  0677  083D               	movf	(sprintf@prec+1)^(0+128),w
  6020  0678  043C               	iorwf	sprintf@prec^(0+128),w
  6021  0679  1903               	btfsc	3,2
  6022  067A  2841               	goto	l3171
  6023  067B  2E5E               	goto	l3113
  6024  067C                     l3121:	
  6025                           ;doprnt.c: 1247: }
  6026                           ;doprnt.c: 1254: continue;
  6027                           
  6028                           
  6029                           ;doprnt.c: 1255: }
  6030                           ;doprnt.c: 1262: {
  6031                           ;doprnt.c: 1268: _val._val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  6032  067C  1683               	bsf	3,5	;RP0=1, select bank1
  6033  067D  1303               	bcf	3,6	;RP1=0, select bank1
  6034  067E  082F               	movf	sprintf@ap^(0+128),w
  6035  067F  0084               	movwf	4
  6036  0680  1383               	bcf	3,7	;select IRP bank0
  6037  0681  0800               	movf	0,w
  6038  0682  1283               	bcf	3,5	;RP0=0, select bank0
  6039  0683  1303               	bcf	3,6	;RP1=0, select bank0
  6040  0684  00E7               	movwf	??_sprintf
  6041  0685  0A84               	incf	4,f
  6042  0686  0800               	movf	0,w
  6043  0687  00E8               	movwf	??_sprintf+1
  6044  0688  0867               	movf	??_sprintf,w
  6045  0689  1683               	bsf	3,5	;RP0=1, select bank1
  6046  068A  1303               	bcf	3,6	;RP1=0, select bank1
  6047  068B  00B7               	movwf	sprintf@_val^(0+128)
  6048  068C  1283               	bcf	3,5	;RP0=0, select bank0
  6049  068D  1303               	bcf	3,6	;RP1=0, select bank0
  6050  068E  0868               	movf	??_sprintf+1,w
  6051  068F  1683               	bsf	3,5	;RP0=1, select bank1
  6052  0690  1303               	bcf	3,6	;RP1=0, select bank1
  6053  0691  00B8               	movwf	(sprintf@_val+1)^(0+128)
  6054  0692  3000               	movlw	0
  6055  0693  1BB8               	btfsc	(sprintf@_val+1)^(0+128),7
  6056  0694  30FF               	movlw	255
  6057  0695  00B9               	movwf	(sprintf@_val+2)^(0+128)
  6058  0696  00BA               	movwf	(sprintf@_val+3)^(0+128)
  6059  0697  3002               	movlw	2
  6060  0698  1283               	bcf	3,5	;RP0=0, select bank0
  6061  0699  1303               	bcf	3,6	;RP1=0, select bank0
  6062  069A  00E7               	movwf	??_sprintf
  6063  069B  0867               	movf	??_sprintf,w
  6064  069C  1683               	bsf	3,5	;RP0=1, select bank1
  6065  069D  1303               	bcf	3,6	;RP1=0, select bank1
  6066  069E  07AF               	addwf	sprintf@ap^(0+128),f
  6067                           
  6068                           ;doprnt.c: 1270: if((long)_val._val < 0) {
  6069  069F  1FBA               	btfss	(sprintf@_val+3)^(0+128),7
  6070  06A0  2EB0               	goto	l3131
  6071                           
  6072                           ;doprnt.c: 1271: flag |= 0x03;
  6073  06A1  3003               	movlw	3
  6074  06A2  04B0               	iorwf	sprintf@flag^(0+128),f
  6075  06A3  3000               	movlw	0
  6076  06A4  04B1               	iorwf	(sprintf@flag+1)^(0+128),f
  6077                           
  6078                           ;doprnt.c: 1272: _val._val = -_val._val;
  6079  06A5  09B7               	comf	sprintf@_val^(0+128),f
  6080  06A6  09B8               	comf	(sprintf@_val+1)^(0+128),f
  6081  06A7  09B9               	comf	(sprintf@_val+2)^(0+128),f
  6082  06A8  09BA               	comf	(sprintf@_val+3)^(0+128),f
  6083  06A9  0AB7               	incf	sprintf@_val^(0+128),f
  6084  06AA  1903               	skipnz
  6085  06AB  0AB8               	incf	(sprintf@_val+1)^(0+128),f
  6086  06AC  1903               	skipnz
  6087  06AD  0AB9               	incf	(sprintf@_val+2)^(0+128),f
  6088  06AE  1903               	skipnz
  6089  06AF  0ABA               	incf	(sprintf@_val+3)^(0+128),f
  6090  06B0                     l3131:	
  6091                           
  6092                           ;doprnt.c: 1273: }
  6093                           ;doprnt.c: 1275: }
  6094                           ;doprnt.c: 1299: if(prec == 0 && _val._val == 0)
  6095  06B0  083D               	movf	(sprintf@prec+1)^(0+128),w
  6096  06B1  043C               	iorwf	sprintf@prec^(0+128),w
  6097  06B2  1D03               	skipz
  6098  06B3  2EC0               	goto	l3137
  6099  06B4  083A               	movf	(sprintf@_val+3)^(0+128),w
  6100  06B5  0439               	iorwf	(sprintf@_val+2)^(0+128),w
  6101  06B6  0438               	iorwf	(sprintf@_val+1)^(0+128),w
  6102  06B7  0437               	iorwf	sprintf@_val^(0+128),w
  6103  06B8  1D03               	skipz
  6104  06B9  2EC0               	goto	l3137
  6105                           
  6106                           ;doprnt.c: 1300: prec++;
  6107  06BA  3001               	movlw	1
  6108  06BB  07BC               	addwf	sprintf@prec^(0+128),f
  6109  06BC  1803               	skipnc
  6110  06BD  0ABD               	incf	(sprintf@prec+1)^(0+128),f
  6111  06BE  3000               	movlw	0
  6112  06BF  07BD               	addwf	(sprintf@prec+1)^(0+128),f
  6113  06C0                     l3137:	
  6114                           
  6115                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6116  06C0  01C1               	clrf	sprintf@c^(0+128)
  6117  06C1  0AC1               	incf	sprintf@c^(0+128),f
  6118  06C2  0841               	movf	sprintf@c^(0+128),w
  6119  06C3  3A0A               	xorlw	10
  6120  06C4  1903               	btfsc	3,2
  6121  06C5  2F16               	goto	l3149
  6122  06C6                     l3141:	
  6123                           
  6124                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  6125  06C6  0841               	movf	sprintf@c^(0+128),w
  6126  06C7  1283               	bcf	3,5	;RP0=0, select bank0
  6127  06C8  1303               	bcf	3,6	;RP1=0, select bank0
  6128  06C9  00E7               	movwf	??_sprintf
  6129  06CA  3001               	movlw	1
  6130  06CB                     u4335:	
  6131  06CB  1003               	clrc
  6132  06CC  0DE7               	rlf	??_sprintf,f
  6133  06CD  3EFF               	addlw	-1
  6134  06CE  1D03               	skipz
  6135  06CF  2ECB               	goto	u4335
  6136  06D0  1003               	clrc
  6137  06D1  0D67               	rlf	??_sprintf,w
  6138  06D2  3E01               	addlw	low (_dpowers-__stringbase)
  6139  06D3  0084               	movwf	4
  6140  06D4  160A  118A  2000  120A  118A  	fcall	stringdir
  6141  06D9  00E8               	movwf	??_sprintf+1
  6142  06DA  160A  118A  2000  120A  118A  	fcall	stringdir
  6143  06DF  00E9               	movwf	??_sprintf+2
  6144  06E0  160A  118A  2000  120A  118A  	fcall	stringdir
  6145  06E5  00EA               	movwf	??_sprintf+3
  6146  06E6  160A  118A  2000  120A  118A  	fcall	stringdir
  6147  06EB  00EB               	movwf	??_sprintf+4
  6148  06EC  086B               	movf	??_sprintf+4,w
  6149  06ED  1683               	bsf	3,5	;RP0=1, select bank1
  6150  06EE  1303               	bcf	3,6	;RP1=0, select bank1
  6151  06EF  023A               	subwf	(sprintf@_val+3)^(0+128),w
  6152  06F0  1D03               	skipz
  6153  06F1  2F08               	goto	u4345
  6154  06F2  1283               	bcf	3,5	;RP0=0, select bank0
  6155  06F3  1303               	bcf	3,6	;RP1=0, select bank0
  6156  06F4  086A               	movf	??_sprintf+3,w
  6157  06F5  1683               	bsf	3,5	;RP0=1, select bank1
  6158  06F6  1303               	bcf	3,6	;RP1=0, select bank1
  6159  06F7  0239               	subwf	(sprintf@_val+2)^(0+128),w
  6160  06F8  1D03               	skipz
  6161  06F9  2F08               	goto	u4345
  6162  06FA  1283               	bcf	3,5	;RP0=0, select bank0
  6163  06FB  1303               	bcf	3,6	;RP1=0, select bank0
  6164  06FC  0869               	movf	??_sprintf+2,w
  6165  06FD  1683               	bsf	3,5	;RP0=1, select bank1
  6166  06FE  1303               	bcf	3,6	;RP1=0, select bank1
  6167  06FF  0238               	subwf	(sprintf@_val+1)^(0+128),w
  6168  0700  1D03               	skipz
  6169  0701  2F08               	goto	u4345
  6170  0702  1283               	bcf	3,5	;RP0=0, select bank0
  6171  0703  1303               	bcf	3,6	;RP1=0, select bank0
  6172  0704  0868               	movf	??_sprintf+1,w
  6173  0705  1683               	bsf	3,5	;RP0=1, select bank1
  6174  0706  1303               	bcf	3,6	;RP1=0, select bank1
  6175  0707  0237               	subwf	sprintf@_val^(0+128),w
  6176  0708                     u4345:	
  6177  0708  1C03               	btfss	3,0
  6178  0709  2F16               	goto	l3149
  6179                           
  6180                           ;doprnt.c: 1316: break;
  6181  070A  3001               	movlw	1
  6182  070B  1283               	bcf	3,5	;RP0=0, select bank0
  6183  070C  1303               	bcf	3,6	;RP1=0, select bank0
  6184  070D  00E7               	movwf	??_sprintf
  6185  070E  0867               	movf	??_sprintf,w
  6186  070F  1683               	bsf	3,5	;RP0=1, select bank1
  6187  0710  1303               	bcf	3,6	;RP1=0, select bank1
  6188  0711  07C1               	addwf	sprintf@c^(0+128),f
  6189  0712  0841               	movf	sprintf@c^(0+128),w
  6190  0713  3A0A               	xorlw	10
  6191  0714  1D03               	skipz
  6192  0715  2EC6               	goto	l3141
  6193  0716                     l3149:	
  6194                           
  6195                           ;doprnt.c: 1348: if(c < prec)
  6196  0716  0841               	movf	sprintf@c^(0+128),w
  6197  0717  1283               	bcf	3,5	;RP0=0, select bank0
  6198  0718  1303               	bcf	3,6	;RP1=0, select bank0
  6199  0719  00E7               	movwf	??_sprintf
  6200  071A  01E8               	clrf	??_sprintf+1
  6201  071B  1BE7               	btfsc	??_sprintf,7
  6202  071C  03E8               	decf	??_sprintf+1,f
  6203  071D  0868               	movf	??_sprintf+1,w
  6204  071E  3A80               	xorlw	128
  6205  071F  00E9               	movwf	??_sprintf+2
  6206  0720  1683               	bsf	3,5	;RP0=1, select bank1
  6207  0721  1303               	bcf	3,6	;RP1=0, select bank1
  6208  0722  083D               	movf	(sprintf@prec+1)^(0+128),w
  6209  0723  3A80               	xorlw	128
  6210  0724  1283               	bcf	3,5	;RP0=0, select bank0
  6211  0725  1303               	bcf	3,6	;RP1=0, select bank0
  6212  0726  0269               	subwf	??_sprintf+2,w
  6213  0727  1D03               	skipz
  6214  0728  2F2F               	goto	u4365
  6215  0729  1683               	bsf	3,5	;RP0=1, select bank1
  6216  072A  1303               	bcf	3,6	;RP1=0, select bank1
  6217  072B  083C               	movf	sprintf@prec^(0+128),w
  6218  072C  1283               	bcf	3,5	;RP0=0, select bank0
  6219  072D  1303               	bcf	3,6	;RP1=0, select bank0
  6220  072E  0267               	subwf	??_sprintf,w
  6221  072F                     u4365:	
  6222  072F  1803               	skipnc
  6223  0730  2F3C               	goto	l3153
  6224                           
  6225                           ;doprnt.c: 1349: c = prec;
  6226  0731  1683               	bsf	3,5	;RP0=1, select bank1
  6227  0732  1303               	bcf	3,6	;RP1=0, select bank1
  6228  0733  083C               	movf	sprintf@prec^(0+128),w
  6229  0734  1283               	bcf	3,5	;RP0=0, select bank0
  6230  0735  1303               	bcf	3,6	;RP1=0, select bank0
  6231  0736  00E7               	movwf	??_sprintf
  6232  0737  0867               	movf	??_sprintf,w
  6233  0738  1683               	bsf	3,5	;RP0=1, select bank1
  6234  0739  1303               	bcf	3,6	;RP1=0, select bank1
  6235  073A  00C1               	movwf	sprintf@c^(0+128)
  6236  073B  2F5E               	goto	l3157
  6237  073C                     l3153:	
  6238                           
  6239                           ;doprnt.c: 1350: else if(prec < c)
  6240  073C  1683               	bsf	3,5	;RP0=1, select bank1
  6241  073D  1303               	bcf	3,6	;RP1=0, select bank1
  6242  073E  0841               	movf	sprintf@c^(0+128),w
  6243  073F  1283               	bcf	3,5	;RP0=0, select bank0
  6244  0740  1303               	bcf	3,6	;RP1=0, select bank0
  6245  0741  00E7               	movwf	??_sprintf
  6246  0742  01E8               	clrf	??_sprintf+1
  6247  0743  1BE7               	btfsc	??_sprintf,7
  6248  0744  03E8               	decf	??_sprintf+1,f
  6249  0745  1683               	bsf	3,5	;RP0=1, select bank1
  6250  0746  1303               	bcf	3,6	;RP1=0, select bank1
  6251  0747  083D               	movf	(sprintf@prec+1)^(0+128),w
  6252  0748  3A80               	xorlw	128
  6253  0749  1283               	bcf	3,5	;RP0=0, select bank0
  6254  074A  1303               	bcf	3,6	;RP1=0, select bank0
  6255  074B  00E9               	movwf	??_sprintf+2
  6256  074C  0868               	movf	??_sprintf+1,w
  6257  074D  3A80               	xorlw	128
  6258  074E  0269               	subwf	??_sprintf+2,w
  6259  074F  1D03               	skipz
  6260  0750  2F55               	goto	u4375
  6261  0751  0867               	movf	??_sprintf,w
  6262  0752  1683               	bsf	3,5	;RP0=1, select bank1
  6263  0753  1303               	bcf	3,6	;RP1=0, select bank1
  6264  0754  023C               	subwf	sprintf@prec^(0+128),w
  6265  0755                     u4375:	
  6266  0755  1803               	skipnc
  6267  0756  2F5E               	goto	l3157
  6268                           
  6269                           ;doprnt.c: 1351: prec = c;
  6270  0757  1683               	bsf	3,5	;RP0=1, select bank1
  6271  0758  1303               	bcf	3,6	;RP1=0, select bank1
  6272  0759  0841               	movf	sprintf@c^(0+128),w
  6273  075A  00BC               	movwf	sprintf@prec^(0+128)
  6274  075B  01BD               	clrf	(sprintf@prec+1)^(0+128)
  6275  075C  1BBC               	btfsc	sprintf@prec^(0+128),7
  6276  075D  03BD               	decf	(sprintf@prec+1)^(0+128),f
  6277  075E                     l3157:	
  6278                           
  6279                           ;doprnt.c: 1431: {
  6280                           ;doprnt.c: 1447: if(flag & 0x03)
  6281  075E  3003               	movlw	3
  6282  075F  1683               	bsf	3,5	;RP0=1, select bank1
  6283  0760  1303               	bcf	3,6	;RP1=0, select bank1
  6284  0761  0530               	andwf	sprintf@flag^(0+128),w
  6285  0762  1283               	bcf	3,5	;RP0=0, select bank0
  6286  0763  1303               	bcf	3,6	;RP1=0, select bank0
  6287  0764  00E7               	movwf	??_sprintf
  6288  0765  3000               	movlw	0
  6289  0766  1683               	bsf	3,5	;RP0=1, select bank1
  6290  0767  1303               	bcf	3,6	;RP1=0, select bank1
  6291  0768  0531               	andwf	(sprintf@flag+1)^(0+128),w
  6292  0769  1283               	bcf	3,5	;RP0=0, select bank0
  6293  076A  1303               	bcf	3,6	;RP1=0, select bank0
  6294  076B  00E8               	movwf	??_sprintf+1
  6295  076C  0868               	movf	??_sprintf+1,w
  6296  076D  0467               	iorwf	??_sprintf,w
  6297  076E  1903               	skipnz
  6298  076F  2F81               	goto	l3169
  6299                           
  6300                           ;doprnt.c: 1448: ((*sp++ = ('-')));
  6301  0770  302D               	movlw	45
  6302  0771                     L8:	
  6303  0771  00E7               	movwf	??_sprintf
  6304  0772  1683               	bsf	3,5	;RP0=1, select bank1
  6305  0773  1303               	bcf	3,6	;RP1=0, select bank1
  6306  0774  083B               	movf	sprintf@sp^(0+128),w
  6307  0775  0084               	movwf	4
  6308  0776  1283               	bcf	3,5	;RP0=0, select bank0
  6309  0777  1303               	bcf	3,6	;RP1=0, select bank0
  6310  0778  0867               	movf	??_sprintf,w
  6311  0779  1383               	bcf	3,7	;select IRP bank0
  6312  077A  0080               	movwf	0
  6313  077B  3001               	movlw	1
  6314  077C  00E7               	movwf	??_sprintf
  6315  077D  0867               	movf	??_sprintf,w
  6316  077E  1683               	bsf	3,5	;RP0=1, select bank1
  6317  077F  1303               	bcf	3,6	;RP1=0, select bank1
  6318  0780  07BB               	addwf	sprintf@sp^(0+128),f
  6319  0781                     l3169:	
  6320  0781  30FF               	movlw	255
  6321  0782  1683               	bsf	3,5	;RP0=1, select bank1
  6322  0783  1303               	bcf	3,6	;RP1=0, select bank1
  6323  0784  07BC               	addwf	sprintf@prec^(0+128),f
  6324  0785  1803               	skipnc
  6325  0786  0ABD               	incf	(sprintf@prec+1)^(0+128),f
  6326  0787  30FF               	movlw	255
  6327  0788  07BD               	addwf	(sprintf@prec+1)^(0+128),f
  6328  0789  30FF               	movlw	255
  6329  078A  063D               	xorwf	(sprintf@prec+1)^(0+128),w
  6330  078B  1D03               	skipz
  6331  078C  2F8F               	goto	u4405
  6332  078D  30FF               	movlw	255
  6333  078E  063C               	xorwf	sprintf@prec^(0+128),w
  6334  078F                     u4405:	
  6335  078F  1903               	btfsc	3,2
  6336  0790  2841               	goto	l3171
  6337                           
  6338                           ;doprnt.c: 1487: {
  6339                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  6340                           
  6341                           ;doprnt.c: 1478: }
  6342                           ;doprnt.c: 1483: while(prec--) {
  6343  0791  3000               	movlw	0
  6344  0792  1283               	bcf	3,5	;RP0=0, select bank0
  6345  0793  1303               	bcf	3,6	;RP1=0, select bank0
  6346  0794  00A3               	movwf	___llmod@divisor+3
  6347  0795  3000               	movlw	0
  6348  0796  00A2               	movwf	___llmod@divisor+2
  6349  0797  3000               	movlw	0
  6350  0798  00A1               	movwf	___llmod@divisor+1
  6351  0799  300A               	movlw	10
  6352  079A  00A0               	movwf	___llmod@divisor
  6353  079B  1683               	bsf	3,5	;RP0=1, select bank1
  6354  079C  1303               	bcf	3,6	;RP1=0, select bank1
  6355  079D  083C               	movf	sprintf@prec^(0+128),w
  6356  079E  1283               	bcf	3,5	;RP0=0, select bank0
  6357  079F  1303               	bcf	3,6	;RP1=0, select bank0
  6358  07A0  00E7               	movwf	??_sprintf
  6359  07A1  3001               	movlw	1
  6360  07A2                     u4395:	
  6361  07A2  1003               	clrc
  6362  07A3  0DE7               	rlf	??_sprintf,f
  6363  07A4  3EFF               	addlw	-1
  6364  07A5  1D03               	skipz
  6365  07A6  2FA2               	goto	u4395
  6366  07A7  1003               	clrc
  6367  07A8  0D67               	rlf	??_sprintf,w
  6368  07A9  3E01               	addlw	low (_dpowers-__stringbase)
  6369  07AA  0084               	movwf	4
  6370  07AB  160A  118A  2000  120A  118A  	fcall	stringdir
  6371  07B0  00F0               	movwf	___lldiv@divisor
  6372  07B1  160A  118A  2000  120A  118A  	fcall	stringdir
  6373  07B6  00F1               	movwf	___lldiv@divisor+1
  6374  07B7  160A  118A  2000  120A  118A  	fcall	stringdir
  6375  07BC  00F2               	movwf	___lldiv@divisor+2
  6376  07BD  160A  118A  2000  120A  118A  	fcall	stringdir
  6377  07C2  00F3               	movwf	___lldiv@divisor+3
  6378  07C3  1683               	bsf	3,5	;RP0=1, select bank1
  6379  07C4  1303               	bcf	3,6	;RP1=0, select bank1
  6380  07C5  083A               	movf	(sprintf@_val+3)^(0+128),w
  6381  07C6  00F7               	movwf	___lldiv@dividend+3
  6382  07C7  0839               	movf	(sprintf@_val+2)^(0+128),w
  6383  07C8  00F6               	movwf	___lldiv@dividend+2
  6384  07C9  0838               	movf	(sprintf@_val+1)^(0+128),w
  6385  07CA  00F5               	movwf	___lldiv@dividend+1
  6386  07CB  0837               	movf	sprintf@_val^(0+128),w
  6387  07CC  00F4               	movwf	___lldiv@dividend
  6388  07CD  160A  158A  23E9  120A  118A  	fcall	___lldiv
  6389  07D2  0873               	movf	?___lldiv+3,w
  6390  07D3  1283               	bcf	3,5	;RP0=0, select bank0
  6391  07D4  1303               	bcf	3,6	;RP1=0, select bank0
  6392  07D5  00A7               	movwf	___llmod@dividend+3
  6393  07D6  0872               	movf	?___lldiv+2,w
  6394  07D7  00A6               	movwf	___llmod@dividend+2
  6395  07D8  0871               	movf	?___lldiv+1,w
  6396  07D9  00A5               	movwf	___llmod@dividend+1
  6397  07DA  0870               	movf	?___lldiv,w
  6398  07DB  00A4               	movwf	___llmod@dividend
  6399  07DC  160A  158A  22E1  120A  118A  	fcall	___llmod
  6400  07E1  1283               	bcf	3,5	;RP0=0, select bank0
  6401  07E2  1303               	bcf	3,6	;RP1=0, select bank0
  6402  07E3  0820               	movf	?___llmod,w
  6403  07E4  3E30               	addlw	48
  6404  07E5  00E8               	movwf	??_sprintf+1
  6405  07E6  0868               	movf	??_sprintf+1,w
  6406  07E7  1683               	bsf	3,5	;RP0=1, select bank1
  6407  07E8  1303               	bcf	3,6	;RP1=0, select bank1
  6408  07E9  00C1               	movwf	sprintf@c^(0+128)
  6409                           
  6410                           ;doprnt.c: 1532: }
  6411                           ;doprnt.c: 1533: ((*sp++ = (c)));
  6412  07EA  0841               	movf	sprintf@c^(0+128),w
  6413  07EB  1283               	bcf	3,5	;RP0=0, select bank0
  6414  07EC  1303               	bcf	3,6	;RP1=0, select bank0
  6415  07ED  2F71               	goto	L8
  6416  07EE                     l3173:	
  6417                           ;doprnt.c: 1534: }
  6418                           ;doprnt.c: 1542: }
  6419                           ;doprnt.c: 1544: alldone:
  6420                           
  6421                           
  6422                           ;doprnt.c: 1547: *sp = 0;
  6423  07EE  083B               	movf	sprintf@sp^(0+128),w
  6424  07EF  0084               	movwf	4
  6425  07F0  1383               	bcf	3,7	;select IRP bank0
  6426  07F1  0180               	clrf	0
  6427  07F2  0008               	return
  6428  07F3                     __end_of_sprintf:	
  6429                           ;doprnt.c: 1549: return 0;
  6430                           ;	Return value of _sprintf is never used
  6431                           
  6432                           
  6433                           	psect	text16
  6434  0D61                     __ptext16:	
  6435 ;; *************** function _scale *****************
  6436 ;; Defined at:
  6437 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  6438 ;; Parameters:    Size  Location     Type
  6439 ;;  scl             1    wreg     char 
  6440 ;; Auto vars:     Size  Location     Type
  6441 ;;  scl             1   40[BANK0 ] char 
  6442 ;; Return value:  Size  Location     Type
  6443 ;;                  3   32[BANK0 ] char 
  6444 ;; Registers used:
  6445 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6446 ;; Tracked objects:
  6447 ;;		On entry : 0/0
  6448 ;;		On exit  : 0/0
  6449 ;;		Unchanged: 0/0
  6450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6451 ;;      Params:         0       3       0       0       0
  6452 ;;      Locals:         0       4       0       0       0
  6453 ;;      Temps:          0       2       0       0       0
  6454 ;;      Totals:         0       9       0       0       0
  6455 ;;Total ram usage:        9 bytes
  6456 ;; Hardware stack levels used:    1
  6457 ;; Hardware stack levels required when called:    2
  6458 ;; This function calls:
  6459 ;;		___awdiv
  6460 ;;		___awmod
  6461 ;;		___bmul
  6462 ;;		___ftmul
  6463 ;; This function is called by:
  6464 ;;		_sprintf
  6465 ;; This function uses a non-reentrant model
  6466 ;;
  6467                           
  6468                           
  6469                           ;psect for function _scale
  6470  0D61                     _scale:	
  6471                           
  6472                           ;incstack = 0
  6473                           ; Regs used in _scale: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6474                           ;scale@scl stored from wreg
  6475  0D61  1283               	bcf	3,5	;RP0=0, select bank0
  6476  0D62  1303               	bcf	3,6	;RP1=0, select bank0
  6477  0D63  00C8               	movwf	scale@scl
  6478                           
  6479                           ;doprnt.c: 428: if(scl < 0) {
  6480  0D64  1FC8               	btfss	scale@scl,7
  6481  0D65  2EB4               	goto	l2579
  6482                           
  6483                           ;doprnt.c: 429: scl = -scl;
  6484  0D66  09C8               	comf	scale@scl,f
  6485  0D67  0AC8               	incf	scale@scl,f
  6486                           
  6487                           ;doprnt.c: 430: if(scl>=110)
  6488  0D68  0848               	movf	scale@scl,w
  6489  0D69  3A80               	xorlw	128
  6490  0D6A  3E12               	addlw	-238
  6491  0D6B  1C03               	skipc
  6492  0D6C  2E27               	goto	l2569
  6493                           
  6494                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6495  0D6D  3003               	movlw	3
  6496  0D6E  00C3               	movwf	??_scale
  6497  0D6F  0843               	movf	??_scale,w
  6498  0D70  00A4               	movwf	___bmul@multiplicand
  6499  0D71  300A               	movlw	10
  6500  0D72  00F7               	movwf	___awdiv@divisor
  6501  0D73  3000               	movlw	0
  6502  0D74  00F8               	movwf	___awdiv@divisor+1
  6503  0D75  0848               	movf	scale@scl,w
  6504  0D76  00F2               	movwf	___awmod@dividend
  6505  0D77  01F3               	clrf	___awmod@dividend+1
  6506  0D78  1BF2               	btfsc	___awmod@dividend,7
  6507  0D79  03F3               	decf	___awmod@dividend+1,f
  6508  0D7A  3064               	movlw	100
  6509  0D7B  00F0               	movwf	___awmod@divisor
  6510  0D7C  3000               	movlw	0
  6511  0D7D  00F1               	movwf	___awmod@divisor+1
  6512  0D7E  160A  158A  2294  120A  158A  	fcall	___awmod
  6513  0D83  0871               	movf	?___awmod+1,w
  6514  0D84  01FA               	clrf	___awdiv@dividend+1
  6515  0D85  07FA               	addwf	___awdiv@dividend+1,f
  6516  0D86  0870               	movf	?___awmod,w
  6517  0D87  01F9               	clrf	___awdiv@dividend
  6518  0D88  07F9               	addwf	___awdiv@dividend,f
  6519  0D89  160A  158A  238C  120A  158A  	fcall	___awdiv
  6520  0D8E  0877               	movf	?___awdiv,w
  6521  0D8F  3E09               	addlw	9
  6522  0D90  160A  118A  20BD  120A  158A  	fcall	___bmul
  6523  0D95  3E29               	addlw	low (__npowers_-__stringbase)
  6524  0D96  0084               	movwf	4
  6525  0D97  160A  118A  2000  120A  158A  	fcall	stringdir
  6526  0D9C  1283               	bcf	3,5	;RP0=0, select bank0
  6527  0D9D  1303               	bcf	3,6	;RP1=0, select bank0
  6528  0D9E  00B0               	movwf	___ftmul@f1
  6529  0D9F  160A  118A  2000  120A  158A  	fcall	stringdir
  6530  0DA4  00B1               	movwf	___ftmul@f1+1
  6531  0DA5  160A  118A  2000  120A  158A  	fcall	stringdir
  6532  0DAA  00B2               	movwf	___ftmul@f1+2
  6533  0DAB  3003               	movlw	3
  6534  0DAC  00C4               	movwf	??_scale+1
  6535  0DAD  0844               	movf	??_scale+1,w
  6536  0DAE  00A4               	movwf	___bmul@multiplicand
  6537  0DAF  3064               	movlw	100
  6538  0DB0  00F7               	movwf	___awdiv@divisor
  6539  0DB1  3000               	movlw	0
  6540  0DB2  00F8               	movwf	___awdiv@divisor+1
  6541  0DB3  0848               	movf	scale@scl,w
  6542  0DB4  00F9               	movwf	___awdiv@dividend
  6543  0DB5  01FA               	clrf	___awdiv@dividend+1
  6544  0DB6  1BF9               	btfsc	___awdiv@dividend,7
  6545  0DB7  03FA               	decf	___awdiv@dividend+1,f
  6546  0DB8  160A  158A  238C  120A  158A  	fcall	___awdiv
  6547  0DBD  0877               	movf	?___awdiv,w
  6548  0DBE  3E12               	addlw	18
  6549  0DBF  160A  118A  20BD  120A  158A  	fcall	___bmul
  6550  0DC4  3E29               	addlw	low (__npowers_-__stringbase)
  6551  0DC5  0084               	movwf	4
  6552  0DC6  160A  118A  2000  120A  158A  	fcall	stringdir
  6553  0DCB  1283               	bcf	3,5	;RP0=0, select bank0
  6554  0DCC  1303               	bcf	3,6	;RP1=0, select bank0
  6555  0DCD  00B3               	movwf	___ftmul@f2
  6556  0DCE  160A  118A  2000  120A  158A  	fcall	stringdir
  6557  0DD3  00B4               	movwf	___ftmul@f2+1
  6558  0DD4  160A  118A  2000  120A  158A  	fcall	stringdir
  6559  0DD9  00B5               	movwf	___ftmul@f2+2
  6560  0DDA  160A  118A  231B  120A  158A  	fcall	___ftmul
  6561  0DDF  1283               	bcf	3,5	;RP0=0, select bank0
  6562  0DE0  1303               	bcf	3,6	;RP1=0, select bank0
  6563  0DE1  0830               	movf	?___ftmul,w
  6564  0DE2  00C5               	movwf	_scale$699
  6565  0DE3  0831               	movf	?___ftmul+1,w
  6566  0DE4  00C6               	movwf	_scale$699+1
  6567  0DE5  0832               	movf	?___ftmul+2,w
  6568  0DE6  00C7               	movwf	_scale$699+2
  6569                           
  6570                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6571  0DE7  3003               	movlw	3
  6572  0DE8  00C3               	movwf	??_scale
  6573  0DE9  0843               	movf	??_scale,w
  6574  0DEA  00A4               	movwf	___bmul@multiplicand
  6575  0DEB  0848               	movf	scale@scl,w
  6576  0DEC  00F2               	movwf	___awmod@dividend
  6577  0DED  01F3               	clrf	___awmod@dividend+1
  6578  0DEE  1BF2               	btfsc	___awmod@dividend,7
  6579  0DEF  03F3               	decf	___awmod@dividend+1,f
  6580  0DF0  300A               	movlw	10
  6581  0DF1  00F0               	movwf	___awmod@divisor
  6582  0DF2  3000               	movlw	0
  6583  0DF3  00F1               	movwf	___awmod@divisor+1
  6584  0DF4  160A  158A  2294  120A  158A  	fcall	___awmod
  6585  0DF9  0870               	movf	?___awmod,w
  6586  0DFA  160A  118A  20BD  120A  158A  	fcall	___bmul
  6587  0DFF  3E29               	addlw	low (__npowers_-__stringbase)
  6588  0E00  0084               	movwf	4
  6589  0E01  160A  118A  2000  120A  158A  	fcall	stringdir
  6590  0E06  1283               	bcf	3,5	;RP0=0, select bank0
  6591  0E07  1303               	bcf	3,6	;RP1=0, select bank0
  6592  0E08  00B0               	movwf	___ftmul@f1
  6593  0E09  160A  118A  2000  120A  158A  	fcall	stringdir
  6594  0E0E  00B1               	movwf	___ftmul@f1+1
  6595  0E0F  160A  118A  2000  120A  158A  	fcall	stringdir
  6596  0E14  00B2               	movwf	___ftmul@f1+2
  6597  0E15  0845               	movf	_scale$699,w
  6598  0E16  00B3               	movwf	___ftmul@f2
  6599  0E17  0846               	movf	_scale$699+1,w
  6600  0E18  00B4               	movwf	___ftmul@f2+1
  6601  0E19  0847               	movf	_scale$699+2,w
  6602  0E1A  00B5               	movwf	___ftmul@f2+2
  6603  0E1B  160A  118A  231B   	fcall	___ftmul
  6604  0E1E  1283               	bcf	3,5	;RP0=0, select bank0
  6605  0E1F  1303               	bcf	3,6	;RP1=0, select bank0
  6606  0E20  0830               	movf	?___ftmul,w
  6607  0E21  00C0               	movwf	?_scale
  6608  0E22  0831               	movf	?___ftmul+1,w
  6609  0E23  00C1               	movwf	?_scale+1
  6610  0E24  0832               	movf	?___ftmul+2,w
  6611  0E25  00C2               	movwf	?_scale+2
  6612  0E26  0008               	return
  6613  0E27                     l2569:	
  6614                           
  6615                           ;doprnt.c: 432: else if(scl > 10)
  6616  0E27  0848               	movf	scale@scl,w
  6617  0E28  3A80               	xorlw	128
  6618  0E29  3E75               	addlw	-139
  6619  0E2A  1C03               	skipc
  6620  0E2B  2E95               	goto	l2575
  6621                           
  6622                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  6623  0E2C  3003               	movlw	3
  6624  0E2D  00C3               	movwf	??_scale
  6625  0E2E  0843               	movf	??_scale,w
  6626  0E2F  00A4               	movwf	___bmul@multiplicand
  6627  0E30  0848               	movf	scale@scl,w
  6628  0E31  00F2               	movwf	___awmod@dividend
  6629  0E32  01F3               	clrf	___awmod@dividend+1
  6630  0E33  1BF2               	btfsc	___awmod@dividend,7
  6631  0E34  03F3               	decf	___awmod@dividend+1,f
  6632  0E35  300A               	movlw	10
  6633  0E36  00F0               	movwf	___awmod@divisor
  6634  0E37  3000               	movlw	0
  6635  0E38  00F1               	movwf	___awmod@divisor+1
  6636  0E39  160A  158A  2294  120A  158A  	fcall	___awmod
  6637  0E3E  0870               	movf	?___awmod,w
  6638  0E3F  160A  118A  20BD  120A  158A  	fcall	___bmul
  6639  0E44  3E29               	addlw	low (__npowers_-__stringbase)
  6640  0E45  0084               	movwf	4
  6641  0E46  160A  118A  2000  120A  158A  	fcall	stringdir
  6642  0E4B  1283               	bcf	3,5	;RP0=0, select bank0
  6643  0E4C  1303               	bcf	3,6	;RP1=0, select bank0
  6644  0E4D  00B0               	movwf	___ftmul@f1
  6645  0E4E  160A  118A  2000  120A  158A  	fcall	stringdir
  6646  0E53  00B1               	movwf	___ftmul@f1+1
  6647  0E54  160A  118A  2000  120A  158A  	fcall	stringdir
  6648  0E59  00B2               	movwf	___ftmul@f1+2
  6649  0E5A  3003               	movlw	3
  6650  0E5B  00C4               	movwf	??_scale+1
  6651  0E5C  0844               	movf	??_scale+1,w
  6652  0E5D  00A4               	movwf	___bmul@multiplicand
  6653  0E5E  300A               	movlw	10
  6654  0E5F  00F7               	movwf	___awdiv@divisor
  6655  0E60  3000               	movlw	0
  6656  0E61  00F8               	movwf	___awdiv@divisor+1
  6657  0E62  0848               	movf	scale@scl,w
  6658  0E63  00F9               	movwf	___awdiv@dividend
  6659  0E64  01FA               	clrf	___awdiv@dividend+1
  6660  0E65  1BF9               	btfsc	___awdiv@dividend,7
  6661  0E66  03FA               	decf	___awdiv@dividend+1,f
  6662  0E67  160A  158A  238C  120A  158A  	fcall	___awdiv
  6663  0E6C  0877               	movf	?___awdiv,w
  6664  0E6D  3E09               	addlw	9
  6665  0E6E  160A  118A  20BD  120A  158A  	fcall	___bmul
  6666  0E73  3E29               	addlw	low (__npowers_-__stringbase)
  6667  0E74  0084               	movwf	4
  6668  0E75  160A  118A  2000  120A  158A  	fcall	stringdir
  6669  0E7A  1283               	bcf	3,5	;RP0=0, select bank0
  6670  0E7B  1303               	bcf	3,6	;RP1=0, select bank0
  6671  0E7C  00B3               	movwf	___ftmul@f2
  6672  0E7D  160A  118A  2000  120A  158A  	fcall	stringdir
  6673  0E82  00B4               	movwf	___ftmul@f2+1
  6674  0E83  160A  118A  2000  120A  158A  	fcall	stringdir
  6675  0E88  00B5               	movwf	___ftmul@f2+2
  6676  0E89  160A  118A  231B   	fcall	___ftmul
  6677  0E8C  1283               	bcf	3,5	;RP0=0, select bank0
  6678  0E8D  1303               	bcf	3,6	;RP1=0, select bank0
  6679  0E8E  0830               	movf	?___ftmul,w
  6680  0E8F  00C0               	movwf	?_scale
  6681  0E90  0831               	movf	?___ftmul+1,w
  6682  0E91  00C1               	movwf	?_scale+1
  6683  0E92  0832               	movf	?___ftmul+2,w
  6684  0E93  00C2               	movwf	?_scale+2
  6685  0E94  0008               	return
  6686  0E95                     l2575:	
  6687                           
  6688                           ;doprnt.c: 434: return _npowers_[scl];
  6689  0E95  3003               	movlw	3
  6690  0E96  00C3               	movwf	??_scale
  6691  0E97  0843               	movf	??_scale,w
  6692  0E98  00A4               	movwf	___bmul@multiplicand
  6693  0E99  0848               	movf	scale@scl,w
  6694  0E9A  160A  118A  20BD  120A  158A  	fcall	___bmul
  6695  0E9F  3E29               	addlw	low (__npowers_-__stringbase)
  6696  0EA0  0084               	movwf	4
  6697  0EA1  160A  118A  2000  120A  158A  	fcall	stringdir
  6698  0EA6  1283               	bcf	3,5	;RP0=0, select bank0
  6699  0EA7  1303               	bcf	3,6	;RP1=0, select bank0
  6700  0EA8  00C0               	movwf	?_scale
  6701  0EA9  160A  118A  2000  120A  158A  	fcall	stringdir
  6702  0EAE  00C1               	movwf	?_scale+1
  6703  0EAF  160A  118A  2000   	fcall	stringdir
  6704  0EB2  00C2               	movwf	?_scale+2
  6705  0EB3  0008               	return
  6706  0EB4                     l2579:	
  6707                           
  6708                           ;doprnt.c: 435: }
  6709                           ;doprnt.c: 436: if(scl>=110)
  6710  0EB4  0848               	movf	scale@scl,w
  6711  0EB5  3A80               	xorlw	128
  6712  0EB6  3E12               	addlw	-238
  6713  0EB7  1C03               	skipc
  6714  0EB8  2F73               	goto	l2587
  6715                           
  6716                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6717  0EB9  3003               	movlw	3
  6718  0EBA  00C3               	movwf	??_scale
  6719  0EBB  0843               	movf	??_scale,w
  6720  0EBC  00A4               	movwf	___bmul@multiplicand
  6721  0EBD  300A               	movlw	10
  6722  0EBE  00F7               	movwf	___awdiv@divisor
  6723  0EBF  3000               	movlw	0
  6724  0EC0  00F8               	movwf	___awdiv@divisor+1
  6725  0EC1  0848               	movf	scale@scl,w
  6726  0EC2  00F2               	movwf	___awmod@dividend
  6727  0EC3  01F3               	clrf	___awmod@dividend+1
  6728  0EC4  1BF2               	btfsc	___awmod@dividend,7
  6729  0EC5  03F3               	decf	___awmod@dividend+1,f
  6730  0EC6  3064               	movlw	100
  6731  0EC7  00F0               	movwf	___awmod@divisor
  6732  0EC8  3000               	movlw	0
  6733  0EC9  00F1               	movwf	___awmod@divisor+1
  6734  0ECA  160A  158A  2294  120A  158A  	fcall	___awmod
  6735  0ECF  0871               	movf	?___awmod+1,w
  6736  0ED0  01FA               	clrf	___awdiv@dividend+1
  6737  0ED1  07FA               	addwf	___awdiv@dividend+1,f
  6738  0ED2  0870               	movf	?___awmod,w
  6739  0ED3  01F9               	clrf	___awdiv@dividend
  6740  0ED4  07F9               	addwf	___awdiv@dividend,f
  6741  0ED5  160A  158A  238C  120A  158A  	fcall	___awdiv
  6742  0EDA  0877               	movf	?___awdiv,w
  6743  0EDB  3E09               	addlw	9
  6744  0EDC  160A  118A  20BD  120A  158A  	fcall	___bmul
  6745  0EE1  3E50               	addlw	low (__powers_-__stringbase)
  6746  0EE2  0084               	movwf	4
  6747  0EE3  160A  118A  2000  120A  158A  	fcall	stringdir
  6748  0EE8  1283               	bcf	3,5	;RP0=0, select bank0
  6749  0EE9  1303               	bcf	3,6	;RP1=0, select bank0
  6750  0EEA  00B0               	movwf	___ftmul@f1
  6751  0EEB  160A  118A  2000  120A  158A  	fcall	stringdir
  6752  0EF0  00B1               	movwf	___ftmul@f1+1
  6753  0EF1  160A  118A  2000  120A  158A  	fcall	stringdir
  6754  0EF6  00B2               	movwf	___ftmul@f1+2
  6755  0EF7  3003               	movlw	3
  6756  0EF8  00C4               	movwf	??_scale+1
  6757  0EF9  0844               	movf	??_scale+1,w
  6758  0EFA  00A4               	movwf	___bmul@multiplicand
  6759  0EFB  3064               	movlw	100
  6760  0EFC  00F7               	movwf	___awdiv@divisor
  6761  0EFD  3000               	movlw	0
  6762  0EFE  00F8               	movwf	___awdiv@divisor+1
  6763  0EFF  0848               	movf	scale@scl,w
  6764  0F00  00F9               	movwf	___awdiv@dividend
  6765  0F01  01FA               	clrf	___awdiv@dividend+1
  6766  0F02  1BF9               	btfsc	___awdiv@dividend,7
  6767  0F03  03FA               	decf	___awdiv@dividend+1,f
  6768  0F04  160A  158A  238C  120A  158A  	fcall	___awdiv
  6769  0F09  0877               	movf	?___awdiv,w
  6770  0F0A  3E12               	addlw	18
  6771  0F0B  160A  118A  20BD  120A  158A  	fcall	___bmul
  6772  0F10  3E50               	addlw	low (__powers_-__stringbase)
  6773  0F11  0084               	movwf	4
  6774  0F12  160A  118A  2000  120A  158A  	fcall	stringdir
  6775  0F17  1283               	bcf	3,5	;RP0=0, select bank0
  6776  0F18  1303               	bcf	3,6	;RP1=0, select bank0
  6777  0F19  00B3               	movwf	___ftmul@f2
  6778  0F1A  160A  118A  2000  120A  158A  	fcall	stringdir
  6779  0F1F  00B4               	movwf	___ftmul@f2+1
  6780  0F20  160A  118A  2000  120A  158A  	fcall	stringdir
  6781  0F25  00B5               	movwf	___ftmul@f2+2
  6782  0F26  160A  118A  231B  120A  158A  	fcall	___ftmul
  6783  0F2B  1283               	bcf	3,5	;RP0=0, select bank0
  6784  0F2C  1303               	bcf	3,6	;RP1=0, select bank0
  6785  0F2D  0830               	movf	?___ftmul,w
  6786  0F2E  00C5               	movwf	_scale$699
  6787  0F2F  0831               	movf	?___ftmul+1,w
  6788  0F30  00C6               	movwf	_scale$699+1
  6789  0F31  0832               	movf	?___ftmul+2,w
  6790  0F32  00C7               	movwf	_scale$699+2
  6791                           
  6792                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6793  0F33  3003               	movlw	3
  6794  0F34  00C3               	movwf	??_scale
  6795  0F35  0843               	movf	??_scale,w
  6796  0F36  00A4               	movwf	___bmul@multiplicand
  6797  0F37  0848               	movf	scale@scl,w
  6798  0F38  00F2               	movwf	___awmod@dividend
  6799  0F39  01F3               	clrf	___awmod@dividend+1
  6800  0F3A  1BF2               	btfsc	___awmod@dividend,7
  6801  0F3B  03F3               	decf	___awmod@dividend+1,f
  6802  0F3C  300A               	movlw	10
  6803  0F3D  00F0               	movwf	___awmod@divisor
  6804  0F3E  3000               	movlw	0
  6805  0F3F  00F1               	movwf	___awmod@divisor+1
  6806  0F40  160A  158A  2294  120A  158A  	fcall	___awmod
  6807  0F45  0870               	movf	?___awmod,w
  6808  0F46  160A  118A  20BD  120A  158A  	fcall	___bmul
  6809  0F4B  3E50               	addlw	low (__powers_-__stringbase)
  6810  0F4C  0084               	movwf	4
  6811  0F4D  160A  118A  2000  120A  158A  	fcall	stringdir
  6812  0F52  1283               	bcf	3,5	;RP0=0, select bank0
  6813  0F53  1303               	bcf	3,6	;RP1=0, select bank0
  6814  0F54  00B0               	movwf	___ftmul@f1
  6815  0F55  160A  118A  2000  120A  158A  	fcall	stringdir
  6816  0F5A  00B1               	movwf	___ftmul@f1+1
  6817  0F5B  160A  118A  2000  120A  158A  	fcall	stringdir
  6818  0F60  00B2               	movwf	___ftmul@f1+2
  6819  0F61  0845               	movf	_scale$699,w
  6820  0F62  00B3               	movwf	___ftmul@f2
  6821  0F63  0846               	movf	_scale$699+1,w
  6822  0F64  00B4               	movwf	___ftmul@f2+1
  6823  0F65  0847               	movf	_scale$699+2,w
  6824  0F66  00B5               	movwf	___ftmul@f2+2
  6825  0F67  160A  118A  231B   	fcall	___ftmul
  6826  0F6A  1283               	bcf	3,5	;RP0=0, select bank0
  6827  0F6B  1303               	bcf	3,6	;RP1=0, select bank0
  6828  0F6C  0830               	movf	?___ftmul,w
  6829  0F6D  00C0               	movwf	?_scale
  6830  0F6E  0831               	movf	?___ftmul+1,w
  6831  0F6F  00C1               	movwf	?_scale+1
  6832  0F70  0832               	movf	?___ftmul+2,w
  6833  0F71  00C2               	movwf	?_scale+2
  6834  0F72  0008               	return
  6835  0F73                     l2587:	
  6836                           
  6837                           ;doprnt.c: 438: else if(scl > 10)
  6838  0F73  0848               	movf	scale@scl,w
  6839  0F74  3A80               	xorlw	128
  6840  0F75  3E75               	addlw	-139
  6841  0F76  1C03               	skipc
  6842  0F77  2FE1               	goto	l2593
  6843                           
  6844                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  6845  0F78  3003               	movlw	3
  6846  0F79  00C3               	movwf	??_scale
  6847  0F7A  0843               	movf	??_scale,w
  6848  0F7B  00A4               	movwf	___bmul@multiplicand
  6849  0F7C  0848               	movf	scale@scl,w
  6850  0F7D  00F2               	movwf	___awmod@dividend
  6851  0F7E  01F3               	clrf	___awmod@dividend+1
  6852  0F7F  1BF2               	btfsc	___awmod@dividend,7
  6853  0F80  03F3               	decf	___awmod@dividend+1,f
  6854  0F81  300A               	movlw	10
  6855  0F82  00F0               	movwf	___awmod@divisor
  6856  0F83  3000               	movlw	0
  6857  0F84  00F1               	movwf	___awmod@divisor+1
  6858  0F85  160A  158A  2294  120A  158A  	fcall	___awmod
  6859  0F8A  0870               	movf	?___awmod,w
  6860  0F8B  160A  118A  20BD  120A  158A  	fcall	___bmul
  6861  0F90  3E50               	addlw	low (__powers_-__stringbase)
  6862  0F91  0084               	movwf	4
  6863  0F92  160A  118A  2000  120A  158A  	fcall	stringdir
  6864  0F97  1283               	bcf	3,5	;RP0=0, select bank0
  6865  0F98  1303               	bcf	3,6	;RP1=0, select bank0
  6866  0F99  00B0               	movwf	___ftmul@f1
  6867  0F9A  160A  118A  2000  120A  158A  	fcall	stringdir
  6868  0F9F  00B1               	movwf	___ftmul@f1+1
  6869  0FA0  160A  118A  2000  120A  158A  	fcall	stringdir
  6870  0FA5  00B2               	movwf	___ftmul@f1+2
  6871  0FA6  3003               	movlw	3
  6872  0FA7  00C4               	movwf	??_scale+1
  6873  0FA8  0844               	movf	??_scale+1,w
  6874  0FA9  00A4               	movwf	___bmul@multiplicand
  6875  0FAA  300A               	movlw	10
  6876  0FAB  00F7               	movwf	___awdiv@divisor
  6877  0FAC  3000               	movlw	0
  6878  0FAD  00F8               	movwf	___awdiv@divisor+1
  6879  0FAE  0848               	movf	scale@scl,w
  6880  0FAF  00F9               	movwf	___awdiv@dividend
  6881  0FB0  01FA               	clrf	___awdiv@dividend+1
  6882  0FB1  1BF9               	btfsc	___awdiv@dividend,7
  6883  0FB2  03FA               	decf	___awdiv@dividend+1,f
  6884  0FB3  160A  158A  238C  120A  158A  	fcall	___awdiv
  6885  0FB8  0877               	movf	?___awdiv,w
  6886  0FB9  3E09               	addlw	9
  6887  0FBA  160A  118A  20BD  120A  158A  	fcall	___bmul
  6888  0FBF  3E50               	addlw	low (__powers_-__stringbase)
  6889  0FC0  0084               	movwf	4
  6890  0FC1  160A  118A  2000  120A  158A  	fcall	stringdir
  6891  0FC6  1283               	bcf	3,5	;RP0=0, select bank0
  6892  0FC7  1303               	bcf	3,6	;RP1=0, select bank0
  6893  0FC8  00B3               	movwf	___ftmul@f2
  6894  0FC9  160A  118A  2000  120A  158A  	fcall	stringdir
  6895  0FCE  00B4               	movwf	___ftmul@f2+1
  6896  0FCF  160A  118A  2000  120A  158A  	fcall	stringdir
  6897  0FD4  00B5               	movwf	___ftmul@f2+2
  6898  0FD5  160A  118A  231B   	fcall	___ftmul
  6899  0FD8  1283               	bcf	3,5	;RP0=0, select bank0
  6900  0FD9  1303               	bcf	3,6	;RP1=0, select bank0
  6901  0FDA  0830               	movf	?___ftmul,w
  6902  0FDB  00C0               	movwf	?_scale
  6903  0FDC  0831               	movf	?___ftmul+1,w
  6904  0FDD  00C1               	movwf	?_scale+1
  6905  0FDE  0832               	movf	?___ftmul+2,w
  6906  0FDF  00C2               	movwf	?_scale+2
  6907  0FE0  0008               	return
  6908  0FE1                     l2593:	
  6909                           
  6910                           ;doprnt.c: 440: return _powers_[scl];
  6911  0FE1  3003               	movlw	3
  6912  0FE2  00C3               	movwf	??_scale
  6913  0FE3  0843               	movf	??_scale,w
  6914  0FE4  00A4               	movwf	___bmul@multiplicand
  6915  0FE5  0848               	movf	scale@scl,w
  6916  0FE6  160A  118A  20BD  120A  158A  	fcall	___bmul
  6917  0FEB  3E50               	addlw	low (__powers_-__stringbase)
  6918  0FEC  0084               	movwf	4
  6919  0FED  160A  118A  2000  120A  158A  	fcall	stringdir
  6920  0FF2  1283               	bcf	3,5	;RP0=0, select bank0
  6921  0FF3  1303               	bcf	3,6	;RP1=0, select bank0
  6922  0FF4  00C0               	movwf	?_scale
  6923  0FF5  160A  118A  2000  120A  158A  	fcall	stringdir
  6924  0FFA  00C1               	movwf	?_scale+1
  6925  0FFB  160A  118A  2000   	fcall	stringdir
  6926  0FFE  00C2               	movwf	?_scale+2
  6927  0FFF  0008               	return
  6928  1000                     __end_of_scale:	
  6929                           
  6930                           	psect	text17
  6931  1917                     __ptext17:	
  6932 ;; *************** function _isdigit *****************
  6933 ;; Defined at:
  6934 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\isdigit.c"
  6935 ;; Parameters:    Size  Location     Type
  6936 ;;  c               1    wreg     unsigned char 
  6937 ;; Auto vars:     Size  Location     Type
  6938 ;;  c               1    1[COMMON] unsigned char 
  6939 ;; Return value:  Size  Location     Type
  6940 ;;		None               void
  6941 ;; Registers used:
  6942 ;;		wreg, status,2, status,0
  6943 ;; Tracked objects:
  6944 ;;		On entry : 0/0
  6945 ;;		On exit  : 0/0
  6946 ;;		Unchanged: 0/0
  6947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6948 ;;      Params:         0       0       0       0       0
  6949 ;;      Locals:         2       0       0       0       0
  6950 ;;      Temps:          0       0       0       0       0
  6951 ;;      Totals:         2       0       0       0       0
  6952 ;;Total ram usage:        2 bytes
  6953 ;; Hardware stack levels used:    1
  6954 ;; This function calls:
  6955 ;;		Nothing
  6956 ;; This function is called by:
  6957 ;;		_sprintf
  6958 ;; This function uses a non-reentrant model
  6959 ;;
  6960                           
  6961                           
  6962                           ;psect for function _isdigit
  6963  1917                     _isdigit:	
  6964                           
  6965                           ;incstack = 0
  6966                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  6967                           ;isdigit@c stored from wreg
  6968  1917  00F1               	movwf	isdigit@c
  6969  1918  01F0               	clrf	_isdigit$390
  6970  1919  303A               	movlw	58
  6971  191A  0271               	subwf	isdigit@c,w
  6972  191B  1803               	skipnc
  6973  191C  2923               	goto	l2605
  6974  191D  3030               	movlw	48
  6975  191E  0271               	subwf	isdigit@c,w
  6976  191F  1C03               	skipc
  6977  1920  2923               	goto	l2605
  6978  1921  01F0               	clrf	_isdigit$390
  6979  1922  0AF0               	incf	_isdigit$390,f
  6980  1923                     l2605:	
  6981  1923  0C70               	rrf	_isdigit$390,w
  6982  1924  0008               	return
  6983  1925                     __end_of_isdigit:	
  6984                           
  6985                           	psect	text18
  6986  1664                     __ptext18:	
  6987 ;; *************** function _fround *****************
  6988 ;; Defined at:
  6989 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  6990 ;; Parameters:    Size  Location     Type
  6991 ;;  prec            1    wreg     unsigned char 
  6992 ;; Auto vars:     Size  Location     Type
  6993 ;;  prec            1   47[BANK0 ] unsigned char 
  6994 ;; Return value:  Size  Location     Type
  6995 ;;                  3   32[BANK0 ] unsigned char 
  6996 ;; Registers used:
  6997 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6998 ;; Tracked objects:
  6999 ;;		On entry : 0/0
  7000 ;;		On exit  : 0/0
  7001 ;;		Unchanged: 0/0
  7002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7003 ;;      Params:         0       3       0       0       0
  7004 ;;      Locals:         0       7       0       0       0
  7005 ;;      Temps:          0       6       0       0       0
  7006 ;;      Totals:         0      16       0       0       0
  7007 ;;Total ram usage:       16 bytes
  7008 ;; Hardware stack levels used:    1
  7009 ;; Hardware stack levels required when called:    2
  7010 ;; This function calls:
  7011 ;;		___awdiv
  7012 ;;		___awmod
  7013 ;;		___bmul
  7014 ;;		___ftmul
  7015 ;; This function is called by:
  7016 ;;		_sprintf
  7017 ;; This function uses a non-reentrant model
  7018 ;;
  7019                           
  7020                           
  7021                           ;psect for function _fround
  7022  1664                     _fround:	
  7023                           
  7024                           ;incstack = 0
  7025                           ; Regs used in _fround: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7026                           ;fround@prec stored from wreg
  7027  1664  1283               	bcf	3,5	;RP0=0, select bank0
  7028  1665  1303               	bcf	3,6	;RP1=0, select bank0
  7029  1666  00CF               	movwf	fround@prec
  7030                           
  7031                           ;doprnt.c: 413: if(prec>=110)
  7032  1667  306E               	movlw	110
  7033  1668  024F               	subwf	fround@prec,w
  7034  1669  1C03               	skipc
  7035  166A  2F44               	goto	l2545
  7036                           
  7037                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7038  166B  3003               	movlw	3
  7039  166C  00C3               	movwf	??_fround
  7040  166D  0843               	movf	??_fround,w
  7041  166E  00A4               	movwf	___bmul@multiplicand
  7042  166F  300A               	movlw	10
  7043  1670  00F7               	movwf	___awdiv@divisor
  7044  1671  3000               	movlw	0
  7045  1672  00F8               	movwf	___awdiv@divisor+1
  7046  1673  084F               	movf	fround@prec,w
  7047  1674  00C4               	movwf	??_fround+1
  7048  1675  01C5               	clrf	??_fround+2
  7049  1676  0844               	movf	??_fround+1,w
  7050  1677  00F2               	movwf	___awmod@dividend
  7051  1678  0845               	movf	??_fround+2,w
  7052  1679  00F3               	movwf	___awmod@dividend+1
  7053  167A  3064               	movlw	100
  7054  167B  00F0               	movwf	___awmod@divisor
  7055  167C  3000               	movlw	0
  7056  167D  00F1               	movwf	___awmod@divisor+1
  7057  167E  160A  158A  2294  160A  118A  	fcall	___awmod
  7058  1683  0871               	movf	?___awmod+1,w
  7059  1684  01FA               	clrf	___awdiv@dividend+1
  7060  1685  07FA               	addwf	___awdiv@dividend+1,f
  7061  1686  0870               	movf	?___awmod,w
  7062  1687  01F9               	clrf	___awdiv@dividend
  7063  1688  07F9               	addwf	___awdiv@dividend,f
  7064  1689  160A  158A  238C  160A  118A  	fcall	___awdiv
  7065  168E  0877               	movf	?___awdiv,w
  7066  168F  3E09               	addlw	9
  7067  1690  160A  118A  20BD  160A  118A  	fcall	___bmul
  7068  1695  3E29               	addlw	low (__npowers_-__stringbase)
  7069  1696  0084               	movwf	4
  7070  1697  160A  118A  2000  160A  118A  	fcall	stringdir
  7071  169C  1283               	bcf	3,5	;RP0=0, select bank0
  7072  169D  1303               	bcf	3,6	;RP1=0, select bank0
  7073  169E  00B0               	movwf	___ftmul@f1
  7074  169F  160A  118A  2000  160A  118A  	fcall	stringdir
  7075  16A4  00B1               	movwf	___ftmul@f1+1
  7076  16A5  160A  118A  2000  160A  118A  	fcall	stringdir
  7077  16AA  00B2               	movwf	___ftmul@f1+2
  7078  16AB  3003               	movlw	3
  7079  16AC  00C6               	movwf	??_fround+3
  7080  16AD  0846               	movf	??_fround+3,w
  7081  16AE  00A4               	movwf	___bmul@multiplicand
  7082  16AF  3064               	movlw	100
  7083  16B0  00F7               	movwf	___awdiv@divisor
  7084  16B1  3000               	movlw	0
  7085  16B2  00F8               	movwf	___awdiv@divisor+1
  7086  16B3  084F               	movf	fround@prec,w
  7087  16B4  00C7               	movwf	??_fround+4
  7088  16B5  01C8               	clrf	??_fround+5
  7089  16B6  0847               	movf	??_fround+4,w
  7090  16B7  00F9               	movwf	___awdiv@dividend
  7091  16B8  0848               	movf	??_fround+5,w
  7092  16B9  00FA               	movwf	___awdiv@dividend+1
  7093  16BA  160A  158A  238C  160A  118A  	fcall	___awdiv
  7094  16BF  0877               	movf	?___awdiv,w
  7095  16C0  3E12               	addlw	18
  7096  16C1  160A  118A  20BD  160A  118A  	fcall	___bmul
  7097  16C6  3E29               	addlw	low (__npowers_-__stringbase)
  7098  16C7  0084               	movwf	4
  7099  16C8  160A  118A  2000  160A  118A  	fcall	stringdir
  7100  16CD  1283               	bcf	3,5	;RP0=0, select bank0
  7101  16CE  1303               	bcf	3,6	;RP1=0, select bank0
  7102  16CF  00B3               	movwf	___ftmul@f2
  7103  16D0  160A  118A  2000  160A  118A  	fcall	stringdir
  7104  16D5  00B4               	movwf	___ftmul@f2+1
  7105  16D6  160A  118A  2000  160A  118A  	fcall	stringdir
  7106  16DB  00B5               	movwf	___ftmul@f2+2
  7107  16DC  160A  118A  231B  160A  118A  	fcall	___ftmul
  7108  16E1  1283               	bcf	3,5	;RP0=0, select bank0
  7109  16E2  1303               	bcf	3,6	;RP1=0, select bank0
  7110  16E3  0830               	movf	?___ftmul,w
  7111  16E4  00CC               	movwf	_fround$697
  7112  16E5  0831               	movf	?___ftmul+1,w
  7113  16E6  00CD               	movwf	_fround$697+1
  7114  16E7  0832               	movf	?___ftmul+2,w
  7115  16E8  00CE               	movwf	_fround$697+2
  7116                           
  7117                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7118  16E9  3003               	movlw	3
  7119  16EA  00C3               	movwf	??_fround
  7120  16EB  0843               	movf	??_fround,w
  7121  16EC  00A4               	movwf	___bmul@multiplicand
  7122  16ED  084F               	movf	fround@prec,w
  7123  16EE  00C4               	movwf	??_fround+1
  7124  16EF  01C5               	clrf	??_fround+2
  7125  16F0  0844               	movf	??_fround+1,w
  7126  16F1  00F2               	movwf	___awmod@dividend
  7127  16F2  0845               	movf	??_fround+2,w
  7128  16F3  00F3               	movwf	___awmod@dividend+1
  7129  16F4  300A               	movlw	10
  7130  16F5  00F0               	movwf	___awmod@divisor
  7131  16F6  3000               	movlw	0
  7132  16F7  00F1               	movwf	___awmod@divisor+1
  7133  16F8  160A  158A  2294  160A  118A  	fcall	___awmod
  7134  16FD  0870               	movf	?___awmod,w
  7135  16FE  160A  118A  20BD  160A  118A  	fcall	___bmul
  7136  1703  3E29               	addlw	low (__npowers_-__stringbase)
  7137  1704  0084               	movwf	4
  7138  1705  160A  118A  2000  160A  118A  	fcall	stringdir
  7139  170A  1283               	bcf	3,5	;RP0=0, select bank0
  7140  170B  1303               	bcf	3,6	;RP1=0, select bank0
  7141  170C  00B0               	movwf	___ftmul@f1
  7142  170D  160A  118A  2000  160A  118A  	fcall	stringdir
  7143  1712  00B1               	movwf	___ftmul@f1+1
  7144  1713  160A  118A  2000  160A  118A  	fcall	stringdir
  7145  1718  00B2               	movwf	___ftmul@f1+2
  7146  1719  084C               	movf	_fround$697,w
  7147  171A  00B3               	movwf	___ftmul@f2
  7148  171B  084D               	movf	_fround$697+1,w
  7149  171C  00B4               	movwf	___ftmul@f2+1
  7150  171D  084E               	movf	_fround$697+2,w
  7151  171E  00B5               	movwf	___ftmul@f2+2
  7152  171F  160A  118A  231B  160A  118A  	fcall	___ftmul
  7153  1724  1283               	bcf	3,5	;RP0=0, select bank0
  7154  1725  1303               	bcf	3,6	;RP1=0, select bank0
  7155  1726  0830               	movf	?___ftmul,w
  7156  1727  00C9               	movwf	_fround$698
  7157  1728  0831               	movf	?___ftmul+1,w
  7158  1729  00CA               	movwf	_fround$698+1
  7159  172A  0832               	movf	?___ftmul+2,w
  7160  172B  00CB               	movwf	_fround$698+2
  7161                           
  7162                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7163  172C  3000               	movlw	0
  7164  172D  00B0               	movwf	___ftmul@f1
  7165  172E  3000               	movlw	0
  7166  172F  00B1               	movwf	___ftmul@f1+1
  7167  1730  303F               	movlw	63
  7168  1731  00B2               	movwf	___ftmul@f1+2
  7169  1732  0849               	movf	_fround$698,w
  7170  1733  00B3               	movwf	___ftmul@f2
  7171  1734  084A               	movf	_fround$698+1,w
  7172  1735  00B4               	movwf	___ftmul@f2+1
  7173  1736  084B               	movf	_fround$698+2,w
  7174  1737  00B5               	movwf	___ftmul@f2+2
  7175  1738  160A  118A  231B   	fcall	___ftmul
  7176  173B  1283               	bcf	3,5	;RP0=0, select bank0
  7177  173C  1303               	bcf	3,6	;RP1=0, select bank0
  7178  173D  0830               	movf	?___ftmul,w
  7179  173E  00C0               	movwf	?_fround
  7180  173F  0831               	movf	?___ftmul+1,w
  7181  1740  00C1               	movwf	?_fround+1
  7182  1741  0832               	movf	?___ftmul+2,w
  7183  1742  00C2               	movwf	?_fround+2
  7184  1743  0008               	return
  7185  1744                     l2545:	
  7186                           
  7187                           ;doprnt.c: 415: else if(prec > 10)
  7188  1744  300B               	movlw	11
  7189  1745  024F               	subwf	fround@prec,w
  7190  1746  1C03               	skipc
  7191  1747  2FCE               	goto	l2553
  7192                           
  7193                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7194  1748  3003               	movlw	3
  7195  1749  00C3               	movwf	??_fround
  7196  174A  0843               	movf	??_fround,w
  7197  174B  00A4               	movwf	___bmul@multiplicand
  7198  174C  084F               	movf	fround@prec,w
  7199  174D  00C4               	movwf	??_fround+1
  7200  174E  01C5               	clrf	??_fround+2
  7201  174F  0844               	movf	??_fround+1,w
  7202  1750  00F2               	movwf	___awmod@dividend
  7203  1751  0845               	movf	??_fround+2,w
  7204  1752  00F3               	movwf	___awmod@dividend+1
  7205  1753  300A               	movlw	10
  7206  1754  00F0               	movwf	___awmod@divisor
  7207  1755  3000               	movlw	0
  7208  1756  00F1               	movwf	___awmod@divisor+1
  7209  1757  160A  158A  2294  160A  118A  	fcall	___awmod
  7210  175C  0870               	movf	?___awmod,w
  7211  175D  160A  118A  20BD  160A  118A  	fcall	___bmul
  7212  1762  3E29               	addlw	low (__npowers_-__stringbase)
  7213  1763  0084               	movwf	4
  7214  1764  160A  118A  2000  160A  118A  	fcall	stringdir
  7215  1769  1283               	bcf	3,5	;RP0=0, select bank0
  7216  176A  1303               	bcf	3,6	;RP1=0, select bank0
  7217  176B  00B0               	movwf	___ftmul@f1
  7218  176C  160A  118A  2000  160A  118A  	fcall	stringdir
  7219  1771  00B1               	movwf	___ftmul@f1+1
  7220  1772  160A  118A  2000  160A  118A  	fcall	stringdir
  7221  1777  00B2               	movwf	___ftmul@f1+2
  7222  1778  3003               	movlw	3
  7223  1779  00C6               	movwf	??_fround+3
  7224  177A  0846               	movf	??_fround+3,w
  7225  177B  00A4               	movwf	___bmul@multiplicand
  7226  177C  300A               	movlw	10
  7227  177D  00F7               	movwf	___awdiv@divisor
  7228  177E  3000               	movlw	0
  7229  177F  00F8               	movwf	___awdiv@divisor+1
  7230  1780  084F               	movf	fround@prec,w
  7231  1781  00C7               	movwf	??_fround+4
  7232  1782  01C8               	clrf	??_fround+5
  7233  1783  0847               	movf	??_fround+4,w
  7234  1784  00F9               	movwf	___awdiv@dividend
  7235  1785  0848               	movf	??_fround+5,w
  7236  1786  00FA               	movwf	___awdiv@dividend+1
  7237  1787  160A  158A  238C  160A  118A  	fcall	___awdiv
  7238  178C  0877               	movf	?___awdiv,w
  7239  178D  3E09               	addlw	9
  7240  178E  160A  118A  20BD  160A  118A  	fcall	___bmul
  7241  1793  3E29               	addlw	low (__npowers_-__stringbase)
  7242  1794  0084               	movwf	4
  7243  1795  160A  118A  2000  160A  118A  	fcall	stringdir
  7244  179A  1283               	bcf	3,5	;RP0=0, select bank0
  7245  179B  1303               	bcf	3,6	;RP1=0, select bank0
  7246  179C  00B3               	movwf	___ftmul@f2
  7247  179D  160A  118A  2000  160A  118A  	fcall	stringdir
  7248  17A2  00B4               	movwf	___ftmul@f2+1
  7249  17A3  160A  118A  2000  160A  118A  	fcall	stringdir
  7250  17A8  00B5               	movwf	___ftmul@f2+2
  7251  17A9  160A  118A  231B  160A  118A  	fcall	___ftmul
  7252  17AE  1283               	bcf	3,5	;RP0=0, select bank0
  7253  17AF  1303               	bcf	3,6	;RP1=0, select bank0
  7254  17B0  0830               	movf	?___ftmul,w
  7255  17B1  00CC               	movwf	_fround$697
  7256  17B2  0831               	movf	?___ftmul+1,w
  7257  17B3  00CD               	movwf	_fround$697+1
  7258  17B4  0832               	movf	?___ftmul+2,w
  7259  17B5  00CE               	movwf	_fround$697+2
  7260                           
  7261                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7262  17B6  3000               	movlw	0
  7263  17B7  00B0               	movwf	___ftmul@f1
  7264  17B8  3000               	movlw	0
  7265  17B9  00B1               	movwf	___ftmul@f1+1
  7266  17BA  303F               	movlw	63
  7267  17BB  00B2               	movwf	___ftmul@f1+2
  7268  17BC  084C               	movf	_fround$697,w
  7269  17BD  00B3               	movwf	___ftmul@f2
  7270  17BE  084D               	movf	_fround$697+1,w
  7271  17BF  00B4               	movwf	___ftmul@f2+1
  7272  17C0  084E               	movf	_fround$697+2,w
  7273  17C1  00B5               	movwf	___ftmul@f2+2
  7274  17C2  160A  118A  231B   	fcall	___ftmul
  7275  17C5  1283               	bcf	3,5	;RP0=0, select bank0
  7276  17C6  1303               	bcf	3,6	;RP1=0, select bank0
  7277  17C7  0830               	movf	?___ftmul,w
  7278  17C8  00C0               	movwf	?_fround
  7279  17C9  0831               	movf	?___ftmul+1,w
  7280  17CA  00C1               	movwf	?_fround+1
  7281  17CB  0832               	movf	?___ftmul+2,w
  7282  17CC  00C2               	movwf	?_fround+2
  7283  17CD  0008               	return
  7284  17CE                     l2553:	
  7285                           
  7286                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  7287  17CE  3000               	movlw	0
  7288  17CF  00B0               	movwf	___ftmul@f1
  7289  17D0  3000               	movlw	0
  7290  17D1  00B1               	movwf	___ftmul@f1+1
  7291  17D2  303F               	movlw	63
  7292  17D3  00B2               	movwf	___ftmul@f1+2
  7293  17D4  3003               	movlw	3
  7294  17D5  00C3               	movwf	??_fround
  7295  17D6  0843               	movf	??_fround,w
  7296  17D7  00A4               	movwf	___bmul@multiplicand
  7297  17D8  084F               	movf	fround@prec,w
  7298  17D9  160A  118A  20BD  160A  118A  	fcall	___bmul
  7299  17DE  3E29               	addlw	low (__npowers_-__stringbase)
  7300  17DF  0084               	movwf	4
  7301  17E0  160A  118A  2000  160A  118A  	fcall	stringdir
  7302  17E5  1283               	bcf	3,5	;RP0=0, select bank0
  7303  17E6  1303               	bcf	3,6	;RP1=0, select bank0
  7304  17E7  00B3               	movwf	___ftmul@f2
  7305  17E8  160A  118A  2000  160A  118A  	fcall	stringdir
  7306  17ED  00B4               	movwf	___ftmul@f2+1
  7307  17EE  160A  118A  2000  160A  118A  	fcall	stringdir
  7308  17F3  00B5               	movwf	___ftmul@f2+2
  7309  17F4  160A  118A  231B   	fcall	___ftmul
  7310  17F7  1283               	bcf	3,5	;RP0=0, select bank0
  7311  17F8  1303               	bcf	3,6	;RP1=0, select bank0
  7312  17F9  0830               	movf	?___ftmul,w
  7313  17FA  00C0               	movwf	?_fround
  7314  17FB  0831               	movf	?___ftmul+1,w
  7315  17FC  00C1               	movwf	?_fround+1
  7316  17FD  0832               	movf	?___ftmul+2,w
  7317  17FE  00C2               	movwf	?_fround+2
  7318  17FF  0008               	return
  7319  1800                     __end_of_fround:	
  7320                           
  7321                           	psect	text19
  7322  131B                     __ptext19:	
  7323 ;; *************** function ___ftmul *****************
  7324 ;; Defined at:
  7325 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftmul.c"
  7326 ;; Parameters:    Size  Location     Type
  7327 ;;  f1              3   16[BANK0 ] float 
  7328 ;;  f2              3   19[BANK0 ] float 
  7329 ;; Auto vars:     Size  Location     Type
  7330 ;;  f3_as_produc    3   27[BANK0 ] unsigned um
  7331 ;;  sign            1   31[BANK0 ] unsigned char 
  7332 ;;  cntr            1   30[BANK0 ] unsigned char 
  7333 ;;  exp             1   26[BANK0 ] unsigned char 
  7334 ;; Return value:  Size  Location     Type
  7335 ;;                  3   16[BANK0 ] float 
  7336 ;; Registers used:
  7337 ;;		wreg, status,2, status,0, pclath, cstack
  7338 ;; Tracked objects:
  7339 ;;		On entry : 0/0
  7340 ;;		On exit  : 0/0
  7341 ;;		Unchanged: 0/0
  7342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7343 ;;      Params:         0       6       0       0       0
  7344 ;;      Locals:         0       6       0       0       0
  7345 ;;      Temps:          0       4       0       0       0
  7346 ;;      Totals:         0      16       0       0       0
  7347 ;;Total ram usage:       16 bytes
  7348 ;; Hardware stack levels used:    1
  7349 ;; Hardware stack levels required when called:    1
  7350 ;; This function calls:
  7351 ;;		___ftpack
  7352 ;; This function is called by:
  7353 ;;		_main
  7354 ;;		_fround
  7355 ;;		_scale
  7356 ;;		_sprintf
  7357 ;;		_pow
  7358 ;;		_exp
  7359 ;;		_log
  7360 ;;		_eval_poly
  7361 ;; This function uses a non-reentrant model
  7362 ;;
  7363                           
  7364                           
  7365                           ;psect for function ___ftmul
  7366  131B                     ___ftmul:	
  7367                           
  7368                           ;incstack = 0
  7369                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7370  131B  1283               	bcf	3,5	;RP0=0, select bank0
  7371  131C  1303               	bcf	3,6	;RP1=0, select bank0
  7372  131D  0830               	movf	___ftmul@f1,w
  7373  131E  00B6               	movwf	??___ftmul
  7374  131F  0831               	movf	___ftmul@f1+1,w
  7375  1320  00B7               	movwf	??___ftmul+1
  7376  1321  0832               	movf	___ftmul@f1+2,w
  7377  1322  00B8               	movwf	??___ftmul+2
  7378  1323  1003               	clrc
  7379  1324  0D37               	rlf	??___ftmul+1,w
  7380  1325  0D38               	rlf	??___ftmul+2,w
  7381  1326  00B9               	movwf	??___ftmul+3
  7382  1327  0839               	movf	??___ftmul+3,w
  7383  1328  00BA               	movwf	___ftmul@exp
  7384  1329  08BA               	movf	___ftmul@exp,f
  7385  132A  1D03               	skipz
  7386  132B  2B33               	goto	l2399
  7387  132C  3000               	movlw	0
  7388  132D  00B0               	movwf	?___ftmul
  7389  132E  3000               	movlw	0
  7390  132F  00B1               	movwf	?___ftmul+1
  7391  1330  3000               	movlw	0
  7392  1331  00B2               	movwf	?___ftmul+2
  7393  1332  0008               	return
  7394  1333                     l2399:	
  7395  1333  0833               	movf	___ftmul@f2,w
  7396  1334  00B6               	movwf	??___ftmul
  7397  1335  0834               	movf	___ftmul@f2+1,w
  7398  1336  00B7               	movwf	??___ftmul+1
  7399  1337  0835               	movf	___ftmul@f2+2,w
  7400  1338  00B8               	movwf	??___ftmul+2
  7401  1339  1003               	clrc
  7402  133A  0D37               	rlf	??___ftmul+1,w
  7403  133B  0D38               	rlf	??___ftmul+2,w
  7404  133C  00B9               	movwf	??___ftmul+3
  7405  133D  0839               	movf	??___ftmul+3,w
  7406  133E  00BF               	movwf	___ftmul@sign
  7407  133F  08BF               	movf	___ftmul@sign,f
  7408  1340  1D03               	skipz
  7409  1341  2B49               	goto	l2405
  7410  1342  3000               	movlw	0
  7411  1343  00B0               	movwf	?___ftmul
  7412  1344  3000               	movlw	0
  7413  1345  00B1               	movwf	?___ftmul+1
  7414  1346  3000               	movlw	0
  7415  1347  00B2               	movwf	?___ftmul+2
  7416  1348  0008               	return
  7417  1349                     l2405:	
  7418  1349  083F               	movf	___ftmul@sign,w
  7419  134A  3E7B               	addlw	123
  7420  134B  00B6               	movwf	??___ftmul
  7421  134C  0836               	movf	??___ftmul,w
  7422  134D  07BA               	addwf	___ftmul@exp,f
  7423  134E  0830               	movf	___ftmul@f1,w
  7424  134F  00B6               	movwf	??___ftmul
  7425  1350  0831               	movf	___ftmul@f1+1,w
  7426  1351  00B7               	movwf	??___ftmul+1
  7427  1352  0832               	movf	___ftmul@f1+2,w
  7428  1353  00B8               	movwf	??___ftmul+2
  7429  1354  3010               	movlw	16
  7430  1355                     u2995:	
  7431  1355  1003               	clrc
  7432  1356  0CB8               	rrf	??___ftmul+2,f
  7433  1357  0CB7               	rrf	??___ftmul+1,f
  7434  1358  0CB6               	rrf	??___ftmul,f
  7435  1359  3EFF               	addlw	-1
  7436  135A  1D03               	skipz
  7437  135B  2B55               	goto	u2995
  7438  135C  0836               	movf	??___ftmul,w
  7439  135D  00B9               	movwf	??___ftmul+3
  7440  135E  0839               	movf	??___ftmul+3,w
  7441  135F  00BF               	movwf	___ftmul@sign
  7442  1360  0833               	movf	___ftmul@f2,w
  7443  1361  00B6               	movwf	??___ftmul
  7444  1362  0834               	movf	___ftmul@f2+1,w
  7445  1363  00B7               	movwf	??___ftmul+1
  7446  1364  0835               	movf	___ftmul@f2+2,w
  7447  1365  00B8               	movwf	??___ftmul+2
  7448  1366  3010               	movlw	16
  7449  1367                     u3005:	
  7450  1367  1003               	clrc
  7451  1368  0CB8               	rrf	??___ftmul+2,f
  7452  1369  0CB7               	rrf	??___ftmul+1,f
  7453  136A  0CB6               	rrf	??___ftmul,f
  7454  136B  3EFF               	addlw	-1
  7455  136C  1D03               	skipz
  7456  136D  2B67               	goto	u3005
  7457  136E  0836               	movf	??___ftmul,w
  7458  136F  00B9               	movwf	??___ftmul+3
  7459  1370  0839               	movf	??___ftmul+3,w
  7460  1371  06BF               	xorwf	___ftmul@sign,f
  7461  1372  3080               	movlw	128
  7462  1373  00B6               	movwf	??___ftmul
  7463  1374  0836               	movf	??___ftmul,w
  7464  1375  05BF               	andwf	___ftmul@sign,f
  7465  1376  17B1               	bsf	___ftmul@f1+1,7
  7466  1377  17B4               	bsf	___ftmul@f2+1,7
  7467  1378  30FF               	movlw	255
  7468  1379  05B3               	andwf	___ftmul@f2,f
  7469  137A  30FF               	movlw	255
  7470  137B  05B4               	andwf	___ftmul@f2+1,f
  7471  137C  3000               	movlw	0
  7472  137D  05B5               	andwf	___ftmul@f2+2,f
  7473  137E  3000               	movlw	0
  7474  137F  00BB               	movwf	___ftmul@f3_as_product
  7475  1380  3000               	movlw	0
  7476  1381  00BC               	movwf	___ftmul@f3_as_product+1
  7477  1382  3000               	movlw	0
  7478  1383  00BD               	movwf	___ftmul@f3_as_product+2
  7479  1384  3007               	movlw	7
  7480  1385  00B6               	movwf	??___ftmul
  7481  1386  0836               	movf	??___ftmul,w
  7482  1387  00BE               	movwf	___ftmul@cntr
  7483  1388                     l2417:	
  7484  1388  1C30               	btfss	___ftmul@f1,0
  7485  1389  2B98               	goto	l2421
  7486  138A  0833               	movf	___ftmul@f2,w
  7487  138B  07BB               	addwf	___ftmul@f3_as_product,f
  7488  138C  0834               	movf	___ftmul@f2+1,w
  7489  138D  1103               	clrz
  7490  138E  1803               	skipnc
  7491  138F  0A34               	incf	___ftmul@f2+1,w
  7492  1390  1D03               	btfss	3,2
  7493  1391  07BC               	addwf	___ftmul@f3_as_product+1,f
  7494  1392  0835               	movf	___ftmul@f2+2,w
  7495  1393  1103               	clrz
  7496  1394  1803               	skipnc
  7497  1395  0A35               	incf	___ftmul@f2+2,w
  7498  1396  1D03               	btfss	3,2
  7499  1397  07BD               	addwf	___ftmul@f3_as_product+2,f
  7500  1398                     l2421:	
  7501  1398  3001               	movlw	1
  7502  1399                     u3035:	
  7503  1399  1003               	clrc
  7504  139A  0CB2               	rrf	___ftmul@f1+2,f
  7505  139B  0CB1               	rrf	___ftmul@f1+1,f
  7506  139C  0CB0               	rrf	___ftmul@f1,f
  7507  139D  3EFF               	addlw	-1
  7508  139E  1D03               	skipz
  7509  139F  2B99               	goto	u3035
  7510  13A0  3001               	movlw	1
  7511  13A1                     u3045:	
  7512  13A1  1003               	clrc
  7513  13A2  0DB3               	rlf	___ftmul@f2,f
  7514  13A3  0DB4               	rlf	___ftmul@f2+1,f
  7515  13A4  0DB5               	rlf	___ftmul@f2+2,f
  7516  13A5  3EFF               	addlw	-1
  7517  13A6  1D03               	skipz
  7518  13A7  2BA1               	goto	u3045
  7519  13A8  3001               	movlw	1
  7520  13A9  02BE               	subwf	___ftmul@cntr,f
  7521  13AA  1D03               	btfss	3,2
  7522  13AB  2B88               	goto	l2417
  7523  13AC  3009               	movlw	9
  7524  13AD  00B6               	movwf	??___ftmul
  7525  13AE  0836               	movf	??___ftmul,w
  7526  13AF  00BE               	movwf	___ftmul@cntr
  7527  13B0                     l2429:	
  7528  13B0  1C30               	btfss	___ftmul@f1,0
  7529  13B1  2BC0               	goto	l2433
  7530  13B2  0833               	movf	___ftmul@f2,w
  7531  13B3  07BB               	addwf	___ftmul@f3_as_product,f
  7532  13B4  0834               	movf	___ftmul@f2+1,w
  7533  13B5  1103               	clrz
  7534  13B6  1803               	skipnc
  7535  13B7  0A34               	incf	___ftmul@f2+1,w
  7536  13B8  1D03               	btfss	3,2
  7537  13B9  07BC               	addwf	___ftmul@f3_as_product+1,f
  7538  13BA  0835               	movf	___ftmul@f2+2,w
  7539  13BB  1103               	clrz
  7540  13BC  1803               	skipnc
  7541  13BD  0A35               	incf	___ftmul@f2+2,w
  7542  13BE  1D03               	btfss	3,2
  7543  13BF  07BD               	addwf	___ftmul@f3_as_product+2,f
  7544  13C0                     l2433:	
  7545  13C0  3001               	movlw	1
  7546  13C1                     u3085:	
  7547  13C1  1003               	clrc
  7548  13C2  0CB2               	rrf	___ftmul@f1+2,f
  7549  13C3  0CB1               	rrf	___ftmul@f1+1,f
  7550  13C4  0CB0               	rrf	___ftmul@f1,f
  7551  13C5  3EFF               	addlw	-1
  7552  13C6  1D03               	skipz
  7553  13C7  2BC1               	goto	u3085
  7554  13C8  3001               	movlw	1
  7555  13C9                     u3095:	
  7556  13C9  1003               	clrc
  7557  13CA  0CBD               	rrf	___ftmul@f3_as_product+2,f
  7558  13CB  0CBC               	rrf	___ftmul@f3_as_product+1,f
  7559  13CC  0CBB               	rrf	___ftmul@f3_as_product,f
  7560  13CD  3EFF               	addlw	-1
  7561  13CE  1D03               	skipz
  7562  13CF  2BC9               	goto	u3095
  7563  13D0  3001               	movlw	1
  7564  13D1  02BE               	subwf	___ftmul@cntr,f
  7565  13D2  1D03               	btfss	3,2
  7566  13D3  2BB0               	goto	l2429
  7567  13D4  083B               	movf	___ftmul@f3_as_product,w
  7568  13D5  00F0               	movwf	___ftpack@arg
  7569  13D6  083C               	movf	___ftmul@f3_as_product+1,w
  7570  13D7  00F1               	movwf	___ftpack@arg+1
  7571  13D8  083D               	movf	___ftmul@f3_as_product+2,w
  7572  13D9  00F2               	movwf	___ftpack@arg+2
  7573  13DA  083A               	movf	___ftmul@exp,w
  7574  13DB  00B6               	movwf	??___ftmul
  7575  13DC  0836               	movf	??___ftmul,w
  7576  13DD  00F3               	movwf	___ftpack@exp
  7577  13DE  083F               	movf	___ftmul@sign,w
  7578  13DF  00B7               	movwf	??___ftmul+1
  7579  13E0  0837               	movf	??___ftmul+1,w
  7580  13E1  00F4               	movwf	___ftpack@sign
  7581  13E2  160A  158A  2447   	fcall	___ftpack
  7582  13E5  0870               	movf	?___ftpack,w
  7583  13E6  1283               	bcf	3,5	;RP0=0, select bank0
  7584  13E7  1303               	bcf	3,6	;RP1=0, select bank0
  7585  13E8  00B0               	movwf	?___ftmul
  7586  13E9  0871               	movf	?___ftpack+1,w
  7587  13EA  00B1               	movwf	?___ftmul+1
  7588  13EB  0872               	movf	?___ftpack+2,w
  7589  13EC  00B2               	movwf	?___ftmul+2
  7590  13ED  0008               	return
  7591  13EE                     __end_of___ftmul:	
  7592                           
  7593                           	psect	text20
  7594  10BD                     __ptext20:	
  7595 ;; *************** function ___bmul *****************
  7596 ;; Defined at:
  7597 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul8.c"
  7598 ;; Parameters:    Size  Location     Type
  7599 ;;  multiplier      1    wreg     unsigned char 
  7600 ;;  multiplicand    1    4[BANK0 ] unsigned char 
  7601 ;; Auto vars:     Size  Location     Type
  7602 ;;  multiplier      1    6[BANK0 ] unsigned char 
  7603 ;;  product         1    5[BANK0 ] unsigned char 
  7604 ;; Return value:  Size  Location     Type
  7605 ;;                  1    wreg      unsigned char 
  7606 ;; Registers used:
  7607 ;;		wreg, status,2, status,0
  7608 ;; Tracked objects:
  7609 ;;		On entry : 0/0
  7610 ;;		On exit  : 0/0
  7611 ;;		Unchanged: 0/0
  7612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7613 ;;      Params:         0       1       0       0       0
  7614 ;;      Locals:         0       2       0       0       0
  7615 ;;      Temps:          1       0       0       0       0
  7616 ;;      Totals:         1       3       0       0       0
  7617 ;;Total ram usage:        4 bytes
  7618 ;; Hardware stack levels used:    1
  7619 ;; This function calls:
  7620 ;;		Nothing
  7621 ;; This function is called by:
  7622 ;;		_fround
  7623 ;;		_scale
  7624 ;;		_eval_poly
  7625 ;; This function uses a non-reentrant model
  7626 ;;
  7627                           
  7628                           
  7629                           ;psect for function ___bmul
  7630  10BD                     ___bmul:	
  7631                           
  7632                           ;incstack = 0
  7633                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  7634                           ;___bmul@multiplier stored from wreg
  7635  10BD  1283               	bcf	3,5	;RP0=0, select bank0
  7636  10BE  1303               	bcf	3,6	;RP1=0, select bank0
  7637  10BF  00A6               	movwf	___bmul@multiplier
  7638  10C0  01A5               	clrf	___bmul@product
  7639  10C1                     l2189:	
  7640  10C1  1C26               	btfss	___bmul@multiplier,0
  7641  10C2  28C7               	goto	l2193
  7642  10C3  0824               	movf	___bmul@multiplicand,w
  7643  10C4  00FC               	movwf	??___bmul
  7644  10C5  087C               	movf	??___bmul,w
  7645  10C6  07A5               	addwf	___bmul@product,f
  7646  10C7                     l2193:	
  7647  10C7  1003               	clrc
  7648  10C8  0DA4               	rlf	___bmul@multiplicand,f
  7649  10C9  1003               	clrc
  7650  10CA  0CA6               	rrf	___bmul@multiplier,f
  7651  10CB  08A6               	movf	___bmul@multiplier,f
  7652  10CC  1D03               	skipz
  7653  10CD  28C1               	goto	l2189
  7654  10CE  0825               	movf	___bmul@product,w
  7655  10CF  0008               	return
  7656  10D0                     __end_of___bmul:	
  7657                           
  7658                           	psect	text21
  7659  1A94                     __ptext21:	
  7660 ;; *************** function ___awmod *****************
  7661 ;; Defined at:
  7662 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awmod.c"
  7663 ;; Parameters:    Size  Location     Type
  7664 ;;  divisor         2    0[COMMON] int 
  7665 ;;  dividend        2    2[COMMON] int 
  7666 ;; Auto vars:     Size  Location     Type
  7667 ;;  sign            1    6[COMMON] unsigned char 
  7668 ;;  counter         1    5[COMMON] unsigned char 
  7669 ;; Return value:  Size  Location     Type
  7670 ;;                  2    0[COMMON] int 
  7671 ;; Registers used:
  7672 ;;		wreg, status,2, status,0
  7673 ;; Tracked objects:
  7674 ;;		On entry : 0/0
  7675 ;;		On exit  : 0/0
  7676 ;;		Unchanged: 0/0
  7677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7678 ;;      Params:         4       0       0       0       0
  7679 ;;      Locals:         2       0       0       0       0
  7680 ;;      Temps:          1       0       0       0       0
  7681 ;;      Totals:         7       0       0       0       0
  7682 ;;Total ram usage:        7 bytes
  7683 ;; Hardware stack levels used:    1
  7684 ;; This function calls:
  7685 ;;		Nothing
  7686 ;; This function is called by:
  7687 ;;		_fround
  7688 ;;		_scale
  7689 ;; This function uses a non-reentrant model
  7690 ;;
  7691                           
  7692                           
  7693                           ;psect for function ___awmod
  7694  1A94                     ___awmod:	
  7695                           
  7696                           ;incstack = 0
  7697                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  7698  1A94  01F6               	clrf	___awmod@sign
  7699  1A95  1FF3               	btfss	___awmod@dividend+1,7
  7700  1A96  2A9E               	goto	l2271
  7701  1A97  09F2               	comf	___awmod@dividend,f
  7702  1A98  09F3               	comf	___awmod@dividend+1,f
  7703  1A99  0AF2               	incf	___awmod@dividend,f
  7704  1A9A  1903               	skipnz
  7705  1A9B  0AF3               	incf	___awmod@dividend+1,f
  7706  1A9C  01F6               	clrf	___awmod@sign
  7707  1A9D  0AF6               	incf	___awmod@sign,f
  7708  1A9E                     l2271:	
  7709  1A9E  1FF1               	btfss	___awmod@divisor+1,7
  7710  1A9F  2AA5               	goto	l2275
  7711  1AA0  09F0               	comf	___awmod@divisor,f
  7712  1AA1  09F1               	comf	___awmod@divisor+1,f
  7713  1AA2  0AF0               	incf	___awmod@divisor,f
  7714  1AA3  1903               	skipnz
  7715  1AA4  0AF1               	incf	___awmod@divisor+1,f
  7716  1AA5                     l2275:	
  7717  1AA5  0871               	movf	___awmod@divisor+1,w
  7718  1AA6  0470               	iorwf	___awmod@divisor,w
  7719  1AA7  1903               	skipnz
  7720  1AA8  2AD2               	goto	l2293
  7721  1AA9  01F5               	clrf	___awmod@counter
  7722  1AAA  0AF5               	incf	___awmod@counter,f
  7723  1AAB                     l2283:	
  7724  1AAB  1BF1               	btfsc	___awmod@divisor+1,7
  7725  1AAC  2AB9               	goto	l2285
  7726  1AAD  3001               	movlw	1
  7727  1AAE                     u2625:	
  7728  1AAE  1003               	clrc
  7729  1AAF  0DF0               	rlf	___awmod@divisor,f
  7730  1AB0  0DF1               	rlf	___awmod@divisor+1,f
  7731  1AB1  3EFF               	addlw	-1
  7732  1AB2  1D03               	skipz
  7733  1AB3  2AAE               	goto	u2625
  7734  1AB4  3001               	movlw	1
  7735  1AB5  00F4               	movwf	??___awmod
  7736  1AB6  0874               	movf	??___awmod,w
  7737  1AB7  07F5               	addwf	___awmod@counter,f
  7738  1AB8  2AAB               	goto	l2283
  7739  1AB9                     l2285:	
  7740  1AB9  0871               	movf	___awmod@divisor+1,w
  7741  1ABA  0273               	subwf	___awmod@dividend+1,w
  7742  1ABB  1D03               	skipz
  7743  1ABC  2ABF               	goto	u2645
  7744  1ABD  0870               	movf	___awmod@divisor,w
  7745  1ABE  0272               	subwf	___awmod@dividend,w
  7746  1ABF                     u2645:	
  7747  1ABF  1C03               	skipc
  7748  1AC0  2AC7               	goto	l2289
  7749  1AC1  0870               	movf	___awmod@divisor,w
  7750  1AC2  02F2               	subwf	___awmod@dividend,f
  7751  1AC3  0871               	movf	___awmod@divisor+1,w
  7752  1AC4  1C03               	skipc
  7753  1AC5  03F3               	decf	___awmod@dividend+1,f
  7754  1AC6  02F3               	subwf	___awmod@dividend+1,f
  7755  1AC7                     l2289:	
  7756  1AC7  3001               	movlw	1
  7757  1AC8                     u2655:	
  7758  1AC8  1003               	clrc
  7759  1AC9  0CF1               	rrf	___awmod@divisor+1,f
  7760  1ACA  0CF0               	rrf	___awmod@divisor,f
  7761  1ACB  3EFF               	addlw	-1
  7762  1ACC  1D03               	skipz
  7763  1ACD  2AC8               	goto	u2655
  7764  1ACE  3001               	movlw	1
  7765  1ACF  02F5               	subwf	___awmod@counter,f
  7766  1AD0  1D03               	btfss	3,2
  7767  1AD1  2AB9               	goto	l2285
  7768  1AD2                     l2293:	
  7769  1AD2  0876               	movf	___awmod@sign,w
  7770  1AD3  1903               	btfsc	3,2
  7771  1AD4  2ADA               	goto	l2297
  7772  1AD5  09F2               	comf	___awmod@dividend,f
  7773  1AD6  09F3               	comf	___awmod@dividend+1,f
  7774  1AD7  0AF2               	incf	___awmod@dividend,f
  7775  1AD8  1903               	skipnz
  7776  1AD9  0AF3               	incf	___awmod@dividend+1,f
  7777  1ADA                     l2297:	
  7778  1ADA  0873               	movf	___awmod@dividend+1,w
  7779  1ADB  01F1               	clrf	?___awmod+1
  7780  1ADC  07F1               	addwf	?___awmod+1,f
  7781  1ADD  0872               	movf	___awmod@dividend,w
  7782  1ADE  01F0               	clrf	?___awmod
  7783  1ADF  07F0               	addwf	?___awmod,f
  7784  1AE0  0008               	return
  7785  1AE1                     __end_of___awmod:	
  7786                           
  7787                           	psect	text22
  7788  1B8C                     __ptext22:	
  7789 ;; *************** function ___awdiv *****************
  7790 ;; Defined at:
  7791 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awdiv.c"
  7792 ;; Parameters:    Size  Location     Type
  7793 ;;  divisor         2    7[COMMON] int 
  7794 ;;  dividend        2    9[COMMON] int 
  7795 ;; Auto vars:     Size  Location     Type
  7796 ;;  quotient        2    2[BANK0 ] int 
  7797 ;;  sign            1    1[BANK0 ] unsigned char 
  7798 ;;  counter         1    0[BANK0 ] unsigned char 
  7799 ;; Return value:  Size  Location     Type
  7800 ;;                  2    7[COMMON] int 
  7801 ;; Registers used:
  7802 ;;		wreg, status,2, status,0
  7803 ;; Tracked objects:
  7804 ;;		On entry : 0/0
  7805 ;;		On exit  : 0/0
  7806 ;;		Unchanged: 0/0
  7807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7808 ;;      Params:         4       0       0       0       0
  7809 ;;      Locals:         0       4       0       0       0
  7810 ;;      Temps:          1       0       0       0       0
  7811 ;;      Totals:         5       4       0       0       0
  7812 ;;Total ram usage:        9 bytes
  7813 ;; Hardware stack levels used:    1
  7814 ;; This function calls:
  7815 ;;		Nothing
  7816 ;; This function is called by:
  7817 ;;		_fround
  7818 ;;		_scale
  7819 ;;		_sprintf
  7820 ;; This function uses a non-reentrant model
  7821 ;;
  7822                           
  7823                           
  7824                           ;psect for function ___awdiv
  7825  1B8C                     ___awdiv:	
  7826                           
  7827                           ;incstack = 0
  7828                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7829  1B8C  1283               	bcf	3,5	;RP0=0, select bank0
  7830  1B8D  1303               	bcf	3,6	;RP1=0, select bank0
  7831  1B8E  01A1               	clrf	___awdiv@sign
  7832  1B8F  1FF8               	btfss	___awdiv@divisor+1,7
  7833  1B90  2B98               	goto	l2227
  7834  1B91  09F7               	comf	___awdiv@divisor,f
  7835  1B92  09F8               	comf	___awdiv@divisor+1,f
  7836  1B93  0AF7               	incf	___awdiv@divisor,f
  7837  1B94  1903               	skipnz
  7838  1B95  0AF8               	incf	___awdiv@divisor+1,f
  7839  1B96  01A1               	clrf	___awdiv@sign
  7840  1B97  0AA1               	incf	___awdiv@sign,f
  7841  1B98                     l2227:	
  7842  1B98  1FFA               	btfss	___awdiv@dividend+1,7
  7843  1B99  2BA3               	goto	l2233
  7844  1B9A  09F9               	comf	___awdiv@dividend,f
  7845  1B9B  09FA               	comf	___awdiv@dividend+1,f
  7846  1B9C  0AF9               	incf	___awdiv@dividend,f
  7847  1B9D  1903               	skipnz
  7848  1B9E  0AFA               	incf	___awdiv@dividend+1,f
  7849  1B9F  3001               	movlw	1
  7850  1BA0  00FB               	movwf	??___awdiv
  7851  1BA1  087B               	movf	??___awdiv,w
  7852  1BA2  06A1               	xorwf	___awdiv@sign,f
  7853  1BA3                     l2233:	
  7854  1BA3  01A2               	clrf	___awdiv@quotient
  7855  1BA4  01A3               	clrf	___awdiv@quotient+1
  7856  1BA5  0878               	movf	___awdiv@divisor+1,w
  7857  1BA6  0477               	iorwf	___awdiv@divisor,w
  7858  1BA7  1903               	skipnz
  7859  1BA8  2BDA               	goto	l2255
  7860  1BA9  01A0               	clrf	___awdiv@counter
  7861  1BAA  0AA0               	incf	___awdiv@counter,f
  7862  1BAB                     l2243:	
  7863  1BAB  1BF8               	btfsc	___awdiv@divisor+1,7
  7864  1BAC  2BB9               	goto	l2245
  7865  1BAD  3001               	movlw	1
  7866  1BAE                     u2525:	
  7867  1BAE  1003               	clrc
  7868  1BAF  0DF7               	rlf	___awdiv@divisor,f
  7869  1BB0  0DF8               	rlf	___awdiv@divisor+1,f
  7870  1BB1  3EFF               	addlw	-1
  7871  1BB2  1D03               	skipz
  7872  1BB3  2BAE               	goto	u2525
  7873  1BB4  3001               	movlw	1
  7874  1BB5  00FB               	movwf	??___awdiv
  7875  1BB6  087B               	movf	??___awdiv,w
  7876  1BB7  07A0               	addwf	___awdiv@counter,f
  7877  1BB8  2BAB               	goto	l2243
  7878  1BB9                     l2245:	
  7879  1BB9  3001               	movlw	1
  7880  1BBA                     u2545:	
  7881  1BBA  1003               	clrc
  7882  1BBB  0DA2               	rlf	___awdiv@quotient,f
  7883  1BBC  0DA3               	rlf	___awdiv@quotient+1,f
  7884  1BBD  3EFF               	addlw	-1
  7885  1BBE  1D03               	skipz
  7886  1BBF  2BBA               	goto	u2545
  7887  1BC0  0878               	movf	___awdiv@divisor+1,w
  7888  1BC1  027A               	subwf	___awdiv@dividend+1,w
  7889  1BC2  1D03               	skipz
  7890  1BC3  2BC6               	goto	u2555
  7891  1BC4  0877               	movf	___awdiv@divisor,w
  7892  1BC5  0279               	subwf	___awdiv@dividend,w
  7893  1BC6                     u2555:	
  7894  1BC6  1C03               	skipc
  7895  1BC7  2BCF               	goto	l2251
  7896  1BC8  0877               	movf	___awdiv@divisor,w
  7897  1BC9  02F9               	subwf	___awdiv@dividend,f
  7898  1BCA  0878               	movf	___awdiv@divisor+1,w
  7899  1BCB  1C03               	skipc
  7900  1BCC  03FA               	decf	___awdiv@dividend+1,f
  7901  1BCD  02FA               	subwf	___awdiv@dividend+1,f
  7902  1BCE  1422               	bsf	___awdiv@quotient,0
  7903  1BCF                     l2251:	
  7904  1BCF  3001               	movlw	1
  7905  1BD0                     u2565:	
  7906  1BD0  1003               	clrc
  7907  1BD1  0CF8               	rrf	___awdiv@divisor+1,f
  7908  1BD2  0CF7               	rrf	___awdiv@divisor,f
  7909  1BD3  3EFF               	addlw	-1
  7910  1BD4  1D03               	skipz
  7911  1BD5  2BD0               	goto	u2565
  7912  1BD6  3001               	movlw	1
  7913  1BD7  02A0               	subwf	___awdiv@counter,f
  7914  1BD8  1D03               	btfss	3,2
  7915  1BD9  2BB9               	goto	l2245
  7916  1BDA                     l2255:	
  7917  1BDA  0821               	movf	___awdiv@sign,w
  7918  1BDB  1903               	btfsc	3,2
  7919  1BDC  2BE2               	goto	l2259
  7920  1BDD  09A2               	comf	___awdiv@quotient,f
  7921  1BDE  09A3               	comf	___awdiv@quotient+1,f
  7922  1BDF  0AA2               	incf	___awdiv@quotient,f
  7923  1BE0  1903               	skipnz
  7924  1BE1  0AA3               	incf	___awdiv@quotient+1,f
  7925  1BE2                     l2259:	
  7926  1BE2  0823               	movf	___awdiv@quotient+1,w
  7927  1BE3  01F8               	clrf	?___awdiv+1
  7928  1BE4  07F8               	addwf	?___awdiv+1,f
  7929  1BE5  0822               	movf	___awdiv@quotient,w
  7930  1BE6  01F7               	clrf	?___awdiv
  7931  1BE7  07F7               	addwf	?___awdiv,f
  7932  1BE8  0008               	return
  7933  1BE9                     __end_of___awdiv:	
  7934                           
  7935                           	psect	text23
  7936  1188                     __ptext23:	
  7937 ;; *************** function __tdiv_to_l_ *****************
  7938 ;; Defined at:
  7939 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftdivl.c"
  7940 ;; Parameters:    Size  Location     Type
  7941 ;;  f1              3    0[COMMON] float 
  7942 ;;  f2              3    3[COMMON] float 
  7943 ;; Auto vars:     Size  Location     Type
  7944 ;;  quot            4    0[BANK0 ] unsigned long 
  7945 ;;  exp1            1    5[BANK0 ] unsigned char 
  7946 ;;  cntr            1    4[BANK0 ] unsigned char 
  7947 ;; Return value:  Size  Location     Type
  7948 ;;                  4    0[COMMON] unsigned long 
  7949 ;; Registers used:
  7950 ;;		wreg, status,2, status,0
  7951 ;; Tracked objects:
  7952 ;;		On entry : 0/0
  7953 ;;		On exit  : 0/0
  7954 ;;		Unchanged: 0/0
  7955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7956 ;;      Params:         6       0       0       0       0
  7957 ;;      Locals:         0       6       0       0       0
  7958 ;;      Temps:          4       0       0       0       0
  7959 ;;      Totals:        10       6       0       0       0
  7960 ;;Total ram usage:       16 bytes
  7961 ;; Hardware stack levels used:    1
  7962 ;; This function calls:
  7963 ;;		Nothing
  7964 ;; This function is called by:
  7965 ;;		_sprintf
  7966 ;; This function uses a non-reentrant model
  7967 ;;
  7968                           
  7969                           
  7970                           ;psect for function __tdiv_to_l_
  7971  1188                     __tdiv_to_l_:	
  7972                           
  7973                           ;incstack = 0
  7974                           ; Regs used in __tdiv_to_l_: [wreg+status,2+status,0]
  7975  1188  0870               	movf	__tdiv_to_l_@f1,w
  7976  1189  00F6               	movwf	??__tdiv_to_l_
  7977  118A  0871               	movf	__tdiv_to_l_@f1+1,w
  7978  118B  00F7               	movwf	??__tdiv_to_l_+1
  7979  118C  0872               	movf	__tdiv_to_l_@f1+2,w
  7980  118D  00F8               	movwf	??__tdiv_to_l_+2
  7981  118E  1003               	clrc
  7982  118F  0D77               	rlf	??__tdiv_to_l_+1,w
  7983  1190  0D78               	rlf	??__tdiv_to_l_+2,w
  7984  1191  00F9               	movwf	??__tdiv_to_l_+3
  7985  1192  0879               	movf	??__tdiv_to_l_+3,w
  7986  1193  1283               	bcf	3,5	;RP0=0, select bank0
  7987  1194  1303               	bcf	3,6	;RP1=0, select bank0
  7988  1195  00A5               	movwf	__tdiv_to_l_@exp1
  7989  1196  08A5               	movf	__tdiv_to_l_@exp1,f
  7990  1197  1D03               	skipz
  7991  1198  29A2               	goto	l2615
  7992  1199  3000               	movlw	0
  7993  119A  00F3               	movwf	?__tdiv_to_l_+3
  7994  119B  3000               	movlw	0
  7995  119C  00F2               	movwf	?__tdiv_to_l_+2
  7996  119D  3000               	movlw	0
  7997  119E  00F1               	movwf	?__tdiv_to_l_+1
  7998  119F  3000               	movlw	0
  7999  11A0  00F0               	movwf	?__tdiv_to_l_
  8000  11A1  0008               	return
  8001  11A2                     l2615:	
  8002  11A2  0873               	movf	__tdiv_to_l_@f2,w
  8003  11A3  00F6               	movwf	??__tdiv_to_l_
  8004  11A4  0874               	movf	__tdiv_to_l_@f2+1,w
  8005  11A5  00F7               	movwf	??__tdiv_to_l_+1
  8006  11A6  0875               	movf	__tdiv_to_l_@f2+2,w
  8007  11A7  00F8               	movwf	??__tdiv_to_l_+2
  8008  11A8  1003               	clrc
  8009  11A9  0D77               	rlf	??__tdiv_to_l_+1,w
  8010  11AA  0D78               	rlf	??__tdiv_to_l_+2,w
  8011  11AB  00F9               	movwf	??__tdiv_to_l_+3
  8012  11AC  0879               	movf	??__tdiv_to_l_+3,w
  8013  11AD  00A4               	movwf	__tdiv_to_l_@cntr
  8014  11AE  08A4               	movf	__tdiv_to_l_@cntr,f
  8015  11AF  1D03               	skipz
  8016  11B0  29BA               	goto	l539
  8017  11B1  3000               	movlw	0
  8018  11B2  00F3               	movwf	?__tdiv_to_l_+3
  8019  11B3  3000               	movlw	0
  8020  11B4  00F2               	movwf	?__tdiv_to_l_+2
  8021  11B5  3000               	movlw	0
  8022  11B6  00F1               	movwf	?__tdiv_to_l_+1
  8023  11B7  3000               	movlw	0
  8024  11B8  00F0               	movwf	?__tdiv_to_l_
  8025  11B9  0008               	return
  8026  11BA                     l539:	
  8027  11BA  17F1               	bsf	__tdiv_to_l_@f1+1,7
  8028  11BB  30FF               	movlw	255
  8029  11BC  05F0               	andwf	__tdiv_to_l_@f1,f
  8030  11BD  30FF               	movlw	255
  8031  11BE  05F1               	andwf	__tdiv_to_l_@f1+1,f
  8032  11BF  3000               	movlw	0
  8033  11C0  05F2               	andwf	__tdiv_to_l_@f1+2,f
  8034  11C1  17F4               	bsf	__tdiv_to_l_@f2+1,7
  8035  11C2  30FF               	movlw	255
  8036  11C3  05F3               	andwf	__tdiv_to_l_@f2,f
  8037  11C4  30FF               	movlw	255
  8038  11C5  05F4               	andwf	__tdiv_to_l_@f2+1,f
  8039  11C6  3000               	movlw	0
  8040  11C7  05F5               	andwf	__tdiv_to_l_@f2+2,f
  8041  11C8  3000               	movlw	0
  8042  11C9  00A3               	movwf	__tdiv_to_l_@quot+3
  8043  11CA  3000               	movlw	0
  8044  11CB  00A2               	movwf	__tdiv_to_l_@quot+2
  8045  11CC  3000               	movlw	0
  8046  11CD  00A1               	movwf	__tdiv_to_l_@quot+1
  8047  11CE  3000               	movlw	0
  8048  11CF  00A0               	movwf	__tdiv_to_l_@quot
  8049  11D0  307F               	movlw	127
  8050  11D1  02A5               	subwf	__tdiv_to_l_@exp1,f
  8051  11D2  3098               	movlw	152
  8052  11D3  0724               	addwf	__tdiv_to_l_@cntr,w
  8053  11D4  00F6               	movwf	??__tdiv_to_l_
  8054  11D5  0876               	movf	??__tdiv_to_l_,w
  8055  11D6  02A5               	subwf	__tdiv_to_l_@exp1,f
  8056  11D7  3018               	movlw	24
  8057  11D8  00F6               	movwf	??__tdiv_to_l_
  8058  11D9  0876               	movf	??__tdiv_to_l_,w
  8059  11DA  00A4               	movwf	__tdiv_to_l_@cntr
  8060  11DB                     l2629:	
  8061  11DB  3001               	movlw	1
  8062  11DC  00F6               	movwf	??__tdiv_to_l_
  8063  11DD                     u3385:	
  8064  11DD  1003               	clrc
  8065  11DE  0DA0               	rlf	__tdiv_to_l_@quot,f
  8066  11DF  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  8067  11E0  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  8068  11E1  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  8069  11E2  0BF6               	decfsz	??__tdiv_to_l_,f
  8070  11E3  29DD               	goto	u3385
  8071  11E4  0875               	movf	__tdiv_to_l_@f2+2,w
  8072  11E5  0272               	subwf	__tdiv_to_l_@f1+2,w
  8073  11E6  1D03               	skipz
  8074  11E7  29EE               	goto	u3395
  8075  11E8  0874               	movf	__tdiv_to_l_@f2+1,w
  8076  11E9  0271               	subwf	__tdiv_to_l_@f1+1,w
  8077  11EA  1D03               	skipz
  8078  11EB  29EE               	goto	u3395
  8079  11EC  0873               	movf	__tdiv_to_l_@f2,w
  8080  11ED  0270               	subwf	__tdiv_to_l_@f1,w
  8081  11EE                     u3395:	
  8082  11EE  1C03               	skipc
  8083  11EF  29FB               	goto	l2637
  8084  11F0  0873               	movf	__tdiv_to_l_@f2,w
  8085  11F1  02F0               	subwf	__tdiv_to_l_@f1,f
  8086  11F2  0874               	movf	__tdiv_to_l_@f2+1,w
  8087  11F3  1C03               	skipc
  8088  11F4  0F74               	incfsz	__tdiv_to_l_@f2+1,w
  8089  11F5  02F1               	subwf	__tdiv_to_l_@f1+1,f
  8090  11F6  0875               	movf	__tdiv_to_l_@f2+2,w
  8091  11F7  1C03               	skipc
  8092  11F8  0A75               	incf	__tdiv_to_l_@f2+2,w
  8093  11F9  02F2               	subwf	__tdiv_to_l_@f1+2,f
  8094  11FA  1420               	bsf	__tdiv_to_l_@quot,0
  8095  11FB                     l2637:	
  8096  11FB  3001               	movlw	1
  8097  11FC                     u3405:	
  8098  11FC  1003               	clrc
  8099  11FD  0DF0               	rlf	__tdiv_to_l_@f1,f
  8100  11FE  0DF1               	rlf	__tdiv_to_l_@f1+1,f
  8101  11FF  0DF2               	rlf	__tdiv_to_l_@f1+2,f
  8102  1200  3EFF               	addlw	-1
  8103  1201  1D03               	skipz
  8104  1202  29FC               	goto	u3405
  8105  1203  3001               	movlw	1
  8106  1204  02A4               	subwf	__tdiv_to_l_@cntr,f
  8107  1205  1D03               	btfss	3,2
  8108  1206  29DB               	goto	l2629
  8109  1207  1FA5               	btfss	__tdiv_to_l_@exp1,7
  8110  1208  2A27               	goto	l2649
  8111  1209  0825               	movf	__tdiv_to_l_@exp1,w
  8112  120A  3A80               	xorlw	128
  8113  120B  3E97               	addlw	151
  8114  120C  1803               	skipnc
  8115  120D  2A17               	goto	l2647
  8116  120E  3000               	movlw	0
  8117  120F  00F3               	movwf	?__tdiv_to_l_+3
  8118  1210  3000               	movlw	0
  8119  1211  00F2               	movwf	?__tdiv_to_l_+2
  8120  1212  3000               	movlw	0
  8121  1213  00F1               	movwf	?__tdiv_to_l_+1
  8122  1214  3000               	movlw	0
  8123  1215  00F0               	movwf	?__tdiv_to_l_
  8124  1216  0008               	return
  8125  1217                     l2647:	
  8126  1217  3001               	movlw	1
  8127  1218                     u3445:	
  8128  1218  1003               	clrc
  8129  1219  0CA3               	rrf	__tdiv_to_l_@quot+3,f
  8130  121A  0CA2               	rrf	__tdiv_to_l_@quot+2,f
  8131  121B  0CA1               	rrf	__tdiv_to_l_@quot+1,f
  8132  121C  0CA0               	rrf	__tdiv_to_l_@quot,f
  8133  121D  3EFF               	addlw	-1
  8134  121E  1D03               	skipz
  8135  121F  2A18               	goto	u3445
  8136  1220  3001               	movlw	1
  8137  1221  00F6               	movwf	??__tdiv_to_l_
  8138  1222  0876               	movf	??__tdiv_to_l_,w
  8139  1223  07A5               	addwf	__tdiv_to_l_@exp1,f
  8140  1224  1903               	btfsc	3,2
  8141  1225  2A42               	goto	l2659
  8142  1226  2A17               	goto	l2647
  8143  1227                     l2649:	
  8144  1227  3018               	movlw	24
  8145  1228  0225               	subwf	__tdiv_to_l_@exp1,w
  8146  1229  1C03               	skipc
  8147  122A  2A3F               	goto	l2657
  8148  122B  3000               	movlw	0
  8149  122C  00F3               	movwf	?__tdiv_to_l_+3
  8150  122D  3000               	movlw	0
  8151  122E  00F2               	movwf	?__tdiv_to_l_+2
  8152  122F  3000               	movlw	0
  8153  1230  00F1               	movwf	?__tdiv_to_l_+1
  8154  1231  3000               	movlw	0
  8155  1232  00F0               	movwf	?__tdiv_to_l_
  8156  1233  0008               	return
  8157  1234                     l2655:	
  8158  1234  3001               	movlw	1
  8159  1235  00F6               	movwf	??__tdiv_to_l_
  8160  1236                     u3475:	
  8161  1236  1003               	clrc
  8162  1237  0DA0               	rlf	__tdiv_to_l_@quot,f
  8163  1238  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  8164  1239  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  8165  123A  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  8166  123B  0BF6               	decfsz	??__tdiv_to_l_,f
  8167  123C  2A36               	goto	u3475
  8168  123D  3001               	movlw	1
  8169  123E  02A5               	subwf	__tdiv_to_l_@exp1,f
  8170  123F                     l2657:	
  8171  123F  08A5               	movf	__tdiv_to_l_@exp1,f
  8172  1240  1D03               	skipz
  8173  1241  2A34               	goto	l2655
  8174  1242                     l2659:	
  8175  1242  0823               	movf	__tdiv_to_l_@quot+3,w
  8176  1243  00F3               	movwf	?__tdiv_to_l_+3
  8177  1244  0822               	movf	__tdiv_to_l_@quot+2,w
  8178  1245  00F2               	movwf	?__tdiv_to_l_+2
  8179  1246  0821               	movf	__tdiv_to_l_@quot+1,w
  8180  1247  00F1               	movwf	?__tdiv_to_l_+1
  8181  1248  0820               	movf	__tdiv_to_l_@quot,w
  8182  1249  00F0               	movwf	?__tdiv_to_l_
  8183  124A  0008               	return
  8184  124B                     __end_of__tdiv_to_l_:	
  8185                           
  8186                           	psect	text24
  8187  13EE                     __ptext24:	
  8188 ;; *************** function __div_to_l_ *****************
  8189 ;; Defined at:
  8190 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\fldivl.c"
  8191 ;; Parameters:    Size  Location     Type
  8192 ;;  f1              3    0[COMMON] unsigned long 
  8193 ;;  f2              3    3[COMMON] unsigned long 
  8194 ;; Auto vars:     Size  Location     Type
  8195 ;;  quot            4    0[BANK0 ] unsigned long 
  8196 ;;  exp1            1    5[BANK0 ] unsigned char 
  8197 ;;  cntr            1    4[BANK0 ] unsigned char 
  8198 ;; Return value:  Size  Location     Type
  8199 ;;                  4    0[COMMON] unsigned long 
  8200 ;; Registers used:
  8201 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8202 ;; Tracked objects:
  8203 ;;		On entry : 0/0
  8204 ;;		On exit  : 0/0
  8205 ;;		Unchanged: 0/0
  8206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8207 ;;      Params:         6       0       0       0       0
  8208 ;;      Locals:         0       6       0       0       0
  8209 ;;      Temps:          8       0       0       0       0
  8210 ;;      Totals:        14       6       0       0       0
  8211 ;;Total ram usage:       20 bytes
  8212 ;; Hardware stack levels used:    1
  8213 ;; This function calls:
  8214 ;;		Nothing
  8215 ;; This function is called by:
  8216 ;;		_sprintf
  8217 ;; This function uses a non-reentrant model
  8218 ;;
  8219                           
  8220                           
  8221                           ;psect for function __div_to_l_
  8222  13EE                     __div_to_l_:	
  8223                           
  8224                           ;incstack = 0
  8225                           ; Regs used in __div_to_l_: [wreg-fsr0h+status,2+status,0]
  8226  13EE  3070               	movlw	low __div_to_l_@f1
  8227  13EF  0084               	movwf	4
  8228  13F0  0800               	movf	0,w
  8229  13F1  00F6               	movwf	??__div_to_l_
  8230  13F2  0A84               	incf	4,f
  8231  13F3  0800               	movf	0,w
  8232  13F4  00F7               	movwf	??__div_to_l_+1
  8233  13F5  0A84               	incf	4,f
  8234  13F6  0800               	movf	0,w
  8235  13F7  00F8               	movwf	??__div_to_l_+2
  8236  13F8  0A84               	incf	4,f
  8237  13F9  0800               	movf	0,w
  8238  13FA  00F9               	movwf	??__div_to_l_+3
  8239  13FB  1003               	clrc
  8240  13FC  0D78               	rlf	??__div_to_l_+2,w
  8241  13FD  0D79               	rlf	??__div_to_l_+3,w
  8242  13FE  00FA               	movwf	??__div_to_l_+4
  8243  13FF  087A               	movf	??__div_to_l_+4,w
  8244  1400  1283               	bcf	3,5	;RP0=0, select bank0
  8245  1401  1303               	bcf	3,6	;RP1=0, select bank0
  8246  1402  00A5               	movwf	__div_to_l_@exp1
  8247  1403  08A5               	movf	__div_to_l_@exp1,f
  8248  1404  1D03               	skipz
  8249  1405  2C0F               	goto	l2669
  8250  1406  3000               	movlw	0
  8251  1407  00F3               	movwf	?__div_to_l_+3
  8252  1408  3000               	movlw	0
  8253  1409  00F2               	movwf	?__div_to_l_+2
  8254  140A  3000               	movlw	0
  8255  140B  00F1               	movwf	?__div_to_l_+1
  8256  140C  3000               	movlw	0
  8257  140D  00F0               	movwf	?__div_to_l_
  8258  140E  0008               	return
  8259  140F                     l2669:	
  8260  140F  3073               	movlw	low __div_to_l_@f2
  8261  1410  0084               	movwf	4
  8262  1411  0800               	movf	0,w
  8263  1412  00F6               	movwf	??__div_to_l_
  8264  1413  0A84               	incf	4,f
  8265  1414  0800               	movf	0,w
  8266  1415  00F7               	movwf	??__div_to_l_+1
  8267  1416  0A84               	incf	4,f
  8268  1417  0800               	movf	0,w
  8269  1418  00F8               	movwf	??__div_to_l_+2
  8270  1419  0A84               	incf	4,f
  8271  141A  0800               	movf	0,w
  8272  141B  00F9               	movwf	??__div_to_l_+3
  8273  141C  1003               	clrc
  8274  141D  0D78               	rlf	??__div_to_l_+2,w
  8275  141E  0D79               	rlf	??__div_to_l_+3,w
  8276  141F  00FA               	movwf	??__div_to_l_+4
  8277  1420  087A               	movf	??__div_to_l_+4,w
  8278  1421  00A4               	movwf	__div_to_l_@cntr
  8279  1422  08A4               	movf	__div_to_l_@cntr,f
  8280  1423  1D03               	skipz
  8281  1424  2C2E               	goto	l2675
  8282  1425  3000               	movlw	0
  8283  1426  00F3               	movwf	?__div_to_l_+3
  8284  1427  3000               	movlw	0
  8285  1428  00F2               	movwf	?__div_to_l_+2
  8286  1429  3000               	movlw	0
  8287  142A  00F1               	movwf	?__div_to_l_+1
  8288  142B  3000               	movlw	0
  8289  142C  00F0               	movwf	?__div_to_l_
  8290  142D  0008               	return
  8291  142E                     l2675:	
  8292  142E  3070               	movlw	low __div_to_l_@f1
  8293  142F  0084               	movwf	4
  8294  1430  3000               	movlw	0
  8295  1431  0480               	iorwf	0,f
  8296  1432  0A84               	incf	4,f
  8297  1433  3000               	movlw	0
  8298  1434  0480               	iorwf	0,f
  8299  1435  0A84               	incf	4,f
  8300  1436  3080               	movlw	128
  8301  1437  0480               	iorwf	0,f
  8302  1438  0A84               	incf	4,f
  8303  1439  3000               	movlw	0
  8304  143A  0480               	iorwf	0,f
  8305  143B  3070               	movlw	low __div_to_l_@f1
  8306  143C  0084               	movwf	4
  8307  143D  30FF               	movlw	255
  8308  143E  0580               	andwf	0,f
  8309  143F  0A84               	incf	4,f
  8310  1440  30FF               	movlw	255
  8311  1441  0580               	andwf	0,f
  8312  1442  0A84               	incf	4,f
  8313  1443  30FF               	movlw	255
  8314  1444  0580               	andwf	0,f
  8315  1445  0A84               	incf	4,f
  8316  1446  3000               	movlw	0
  8317  1447  0580               	andwf	0,f
  8318  1448  3073               	movlw	low __div_to_l_@f2
  8319  1449  0084               	movwf	4
  8320  144A  3000               	movlw	0
  8321  144B  0480               	iorwf	0,f
  8322  144C  0A84               	incf	4,f
  8323  144D  3000               	movlw	0
  8324  144E  0480               	iorwf	0,f
  8325  144F  0A84               	incf	4,f
  8326  1450  3080               	movlw	128
  8327  1451  0480               	iorwf	0,f
  8328  1452  0A84               	incf	4,f
  8329  1453  3000               	movlw	0
  8330  1454  0480               	iorwf	0,f
  8331  1455  3073               	movlw	low __div_to_l_@f2
  8332  1456  0084               	movwf	4
  8333  1457  30FF               	movlw	255
  8334  1458  0580               	andwf	0,f
  8335  1459  0A84               	incf	4,f
  8336  145A  30FF               	movlw	255
  8337  145B  0580               	andwf	0,f
  8338  145C  0A84               	incf	4,f
  8339  145D  30FF               	movlw	255
  8340  145E  0580               	andwf	0,f
  8341  145F  0A84               	incf	4,f
  8342  1460  3000               	movlw	0
  8343  1461  0580               	andwf	0,f
  8344  1462  3000               	movlw	0
  8345  1463  00A3               	movwf	__div_to_l_@quot+3
  8346  1464  3000               	movlw	0
  8347  1465  00A2               	movwf	__div_to_l_@quot+2
  8348  1466  3000               	movlw	0
  8349  1467  00A1               	movwf	__div_to_l_@quot+1
  8350  1468  3000               	movlw	0
  8351  1469  00A0               	movwf	__div_to_l_@quot
  8352  146A  307F               	movlw	127
  8353  146B  02A5               	subwf	__div_to_l_@exp1,f
  8354  146C  30A0               	movlw	160
  8355  146D  0724               	addwf	__div_to_l_@cntr,w
  8356  146E  00F6               	movwf	??__div_to_l_
  8357  146F  0876               	movf	??__div_to_l_,w
  8358  1470  02A5               	subwf	__div_to_l_@exp1,f
  8359  1471  3020               	movlw	32
  8360  1472  00F6               	movwf	??__div_to_l_
  8361  1473  0876               	movf	??__div_to_l_,w
  8362  1474  00A4               	movwf	__div_to_l_@cntr
  8363  1475                     l2685:	
  8364  1475  3001               	movlw	1
  8365  1476  00F6               	movwf	??__div_to_l_
  8366  1477                     u3515:	
  8367  1477  1003               	clrc
  8368  1478  0DA0               	rlf	__div_to_l_@quot,f
  8369  1479  0DA1               	rlf	__div_to_l_@quot+1,f
  8370  147A  0DA2               	rlf	__div_to_l_@quot+2,f
  8371  147B  0DA3               	rlf	__div_to_l_@quot+3,f
  8372  147C  0BF6               	decfsz	??__div_to_l_,f
  8373  147D  2C77               	goto	u3515
  8374  147E  3073               	movlw	low __div_to_l_@f2
  8375  147F  0084               	movwf	4
  8376  1480  0800               	movf	0,w
  8377  1481  00F6               	movwf	??__div_to_l_
  8378  1482  0A84               	incf	4,f
  8379  1483  0800               	movf	0,w
  8380  1484  00F7               	movwf	??__div_to_l_+1
  8381  1485  0A84               	incf	4,f
  8382  1486  0800               	movf	0,w
  8383  1487  00F8               	movwf	??__div_to_l_+2
  8384  1488  0A84               	incf	4,f
  8385  1489  0800               	movf	0,w
  8386  148A  00F9               	movwf	??__div_to_l_+3
  8387  148B  3070               	movlw	low __div_to_l_@f1
  8388  148C  0084               	movwf	4
  8389  148D  0800               	movf	0,w
  8390  148E  00FA               	movwf	??__div_to_l_+4
  8391  148F  0A84               	incf	4,f
  8392  1490  0800               	movf	0,w
  8393  1491  00FB               	movwf	??__div_to_l_+5
  8394  1492  0A84               	incf	4,f
  8395  1493  0800               	movf	0,w
  8396  1494  00FC               	movwf	??__div_to_l_+6
  8397  1495  0A84               	incf	4,f
  8398  1496  0800               	movf	0,w
  8399  1497  00FD               	movwf	??__div_to_l_+7
  8400  1498  0879               	movf	??__div_to_l_+3,w
  8401  1499  027D               	subwf	??__div_to_l_+7,w
  8402  149A  1D03               	skipz
  8403  149B  2CA6               	goto	u3525
  8404  149C  0878               	movf	??__div_to_l_+2,w
  8405  149D  027C               	subwf	??__div_to_l_+6,w
  8406  149E  1D03               	skipz
  8407  149F  2CA6               	goto	u3525
  8408  14A0  0877               	movf	??__div_to_l_+1,w
  8409  14A1  027B               	subwf	??__div_to_l_+5,w
  8410  14A2  1D03               	skipz
  8411  14A3  2CA6               	goto	u3525
  8412  14A4  0876               	movf	??__div_to_l_,w
  8413  14A5  027A               	subwf	??__div_to_l_+4,w
  8414  14A6                     u3525:	
  8415  14A6  1C03               	skipc
  8416  14A7  2CCB               	goto	l464
  8417  14A8  3073               	movlw	low __div_to_l_@f2
  8418  14A9  0084               	movwf	4
  8419  14AA  0800               	movf	0,w
  8420  14AB  00F6               	movwf	??__div_to_l_
  8421  14AC  0A84               	incf	4,f
  8422  14AD  0800               	movf	0,w
  8423  14AE  00F7               	movwf	??__div_to_l_+1
  8424  14AF  0A84               	incf	4,f
  8425  14B0  0800               	movf	0,w
  8426  14B1  00F8               	movwf	??__div_to_l_+2
  8427  14B2  0A84               	incf	4,f
  8428  14B3  0800               	movf	0,w
  8429  14B4  00F9               	movwf	??__div_to_l_+3
  8430  14B5  3070               	movlw	low __div_to_l_@f1
  8431  14B6  0084               	movwf	4
  8432  14B7  0876               	movf	??__div_to_l_,w
  8433  14B8  0280               	subwf	0,f
  8434  14B9  0A84               	incf	4,f
  8435  14BA  0877               	movf	??__div_to_l_+1,w
  8436  14BB  1C03               	skipc
  8437  14BC  0F77               	incfsz	??__div_to_l_+1,w
  8438  14BD  0280               	subwf	0,f
  8439  14BE  0A84               	incf	4,f
  8440  14BF  0878               	movf	??__div_to_l_+2,w
  8441  14C0  1C03               	skipc
  8442  14C1  0F78               	incfsz	??__div_to_l_+2,w
  8443  14C2  0280               	subwf	0,f
  8444  14C3  0A84               	incf	4,f
  8445  14C4  0879               	movf	??__div_to_l_+3,w
  8446  14C5  1C03               	skipc
  8447  14C6  0A79               	incf	??__div_to_l_+3,w
  8448  14C7  0280               	subwf	0,f
  8449  14C8  3003               	movlw	3
  8450  14C9  0284               	subwf	4,f
  8451  14CA  1420               	bsf	__div_to_l_@quot,0
  8452  14CB                     l464:	
  8453  14CB  3070               	movlw	low __div_to_l_@f1
  8454  14CC  0084               	movwf	4
  8455  14CD  1003               	clrc
  8456  14CE  0D80               	rlf	0,f
  8457  14CF  0A84               	incf	4,f
  8458  14D0  0D80               	rlf	0,f
  8459  14D1  0A84               	incf	4,f
  8460  14D2  0D80               	rlf	0,f
  8461  14D3  0A84               	incf	4,f
  8462  14D4  0D80               	rlf	0,f
  8463  14D5  0384               	decf	4,f
  8464  14D6  0384               	decf	4,f
  8465  14D7  0384               	decf	4,f
  8466  14D8  3001               	movlw	1
  8467  14D9  02A4               	subwf	__div_to_l_@cntr,f
  8468  14DA  1D03               	btfss	3,2
  8469  14DB  2C75               	goto	l2685
  8470  14DC  1FA5               	btfss	__div_to_l_@exp1,7
  8471  14DD  2CFC               	goto	l2703
  8472  14DE  0825               	movf	__div_to_l_@exp1,w
  8473  14DF  3A80               	xorlw	128
  8474  14E0  3E9F               	addlw	159
  8475  14E1  1803               	skipnc
  8476  14E2  2CEC               	goto	l2701
  8477  14E3  3000               	movlw	0
  8478  14E4  00F3               	movwf	?__div_to_l_+3
  8479  14E5  3000               	movlw	0
  8480  14E6  00F2               	movwf	?__div_to_l_+2
  8481  14E7  3000               	movlw	0
  8482  14E8  00F1               	movwf	?__div_to_l_+1
  8483  14E9  3000               	movlw	0
  8484  14EA  00F0               	movwf	?__div_to_l_
  8485  14EB  0008               	return
  8486  14EC                     l2701:	
  8487  14EC  3001               	movlw	1
  8488  14ED                     u3565:	
  8489  14ED  1003               	clrc
  8490  14EE  0CA3               	rrf	__div_to_l_@quot+3,f
  8491  14EF  0CA2               	rrf	__div_to_l_@quot+2,f
  8492  14F0  0CA1               	rrf	__div_to_l_@quot+1,f
  8493  14F1  0CA0               	rrf	__div_to_l_@quot,f
  8494  14F2  3EFF               	addlw	-1
  8495  14F3  1D03               	skipz
  8496  14F4  2CED               	goto	u3565
  8497  14F5  3001               	movlw	1
  8498  14F6  00F6               	movwf	??__div_to_l_
  8499  14F7  0876               	movf	??__div_to_l_,w
  8500  14F8  07A5               	addwf	__div_to_l_@exp1,f
  8501  14F9  1903               	btfsc	3,2
  8502  14FA  2D17               	goto	l2713
  8503  14FB  2CEC               	goto	l2701
  8504  14FC                     l2703:	
  8505  14FC  3020               	movlw	32
  8506  14FD  0225               	subwf	__div_to_l_@exp1,w
  8507  14FE  1C03               	skipc
  8508  14FF  2D14               	goto	l2711
  8509  1500  3000               	movlw	0
  8510  1501  00F3               	movwf	?__div_to_l_+3
  8511  1502  3000               	movlw	0
  8512  1503  00F2               	movwf	?__div_to_l_+2
  8513  1504  3000               	movlw	0
  8514  1505  00F1               	movwf	?__div_to_l_+1
  8515  1506  3000               	movlw	0
  8516  1507  00F0               	movwf	?__div_to_l_
  8517  1508  0008               	return
  8518  1509                     l2709:	
  8519  1509  3001               	movlw	1
  8520  150A  00F6               	movwf	??__div_to_l_
  8521  150B                     u3595:	
  8522  150B  1003               	clrc
  8523  150C  0DA0               	rlf	__div_to_l_@quot,f
  8524  150D  0DA1               	rlf	__div_to_l_@quot+1,f
  8525  150E  0DA2               	rlf	__div_to_l_@quot+2,f
  8526  150F  0DA3               	rlf	__div_to_l_@quot+3,f
  8527  1510  0BF6               	decfsz	??__div_to_l_,f
  8528  1511  2D0B               	goto	u3595
  8529  1512  3001               	movlw	1
  8530  1513  02A5               	subwf	__div_to_l_@exp1,f
  8531  1514                     l2711:	
  8532  1514  08A5               	movf	__div_to_l_@exp1,f
  8533  1515  1D03               	skipz
  8534  1516  2D09               	goto	l2709
  8535  1517                     l2713:	
  8536  1517  0823               	movf	__div_to_l_@quot+3,w
  8537  1518  00F3               	movwf	?__div_to_l_+3
  8538  1519  0822               	movf	__div_to_l_@quot+2,w
  8539  151A  00F2               	movwf	?__div_to_l_+2
  8540  151B  0821               	movf	__div_to_l_@quot+1,w
  8541  151C  00F1               	movwf	?__div_to_l_+1
  8542  151D  0820               	movf	__div_to_l_@quot,w
  8543  151E  00F0               	movwf	?__div_to_l_
  8544  151F  0008               	return
  8545  1520                     __end_of__div_to_l_:	
  8546                           
  8547                           	psect	text25
  8548  19C9                     __ptext25:	
  8549 ;; *************** function ___wmul *****************
  8550 ;; Defined at:
  8551 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  8552 ;; Parameters:    Size  Location     Type
  8553 ;;  multiplier      2    0[COMMON] unsigned int 
  8554 ;;  multiplicand    2    2[COMMON] unsigned int 
  8555 ;; Auto vars:     Size  Location     Type
  8556 ;;  product         2    4[COMMON] unsigned int 
  8557 ;; Return value:  Size  Location     Type
  8558 ;;                  2    0[COMMON] unsigned int 
  8559 ;; Registers used:
  8560 ;;		wreg, status,2, status,0
  8561 ;; Tracked objects:
  8562 ;;		On entry : 0/0
  8563 ;;		On exit  : 0/0
  8564 ;;		Unchanged: 0/0
  8565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8566 ;;      Params:         4       0       0       0       0
  8567 ;;      Locals:         2       0       0       0       0
  8568 ;;      Temps:          0       0       0       0       0
  8569 ;;      Totals:         6       0       0       0       0
  8570 ;;Total ram usage:        6 bytes
  8571 ;; Hardware stack levels used:    1
  8572 ;; This function calls:
  8573 ;;		Nothing
  8574 ;; This function is called by:
  8575 ;;		_sprintf
  8576 ;; This function uses a non-reentrant model
  8577 ;;
  8578                           
  8579                           
  8580                           ;psect for function ___wmul
  8581  19C9                     ___wmul:	
  8582                           
  8583                           ;incstack = 0
  8584                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8585  19C9  01F4               	clrf	___wmul@product
  8586  19CA  01F5               	clrf	___wmul@product+1
  8587  19CB                     l2719:	
  8588  19CB  1C70               	btfss	___wmul@multiplier,0
  8589  19CC  29D3               	goto	l306
  8590  19CD  0872               	movf	___wmul@multiplicand,w
  8591  19CE  07F4               	addwf	___wmul@product,f
  8592  19CF  1803               	skipnc
  8593  19D0  0AF5               	incf	___wmul@product+1,f
  8594  19D1  0873               	movf	___wmul@multiplicand+1,w
  8595  19D2  07F5               	addwf	___wmul@product+1,f
  8596  19D3                     l306:	
  8597  19D3  3001               	movlw	1
  8598  19D4                     u3625:	
  8599  19D4  1003               	clrc
  8600  19D5  0DF2               	rlf	___wmul@multiplicand,f
  8601  19D6  0DF3               	rlf	___wmul@multiplicand+1,f
  8602  19D7  3EFF               	addlw	-1
  8603  19D8  1D03               	skipz
  8604  19D9  29D4               	goto	u3625
  8605  19DA  3001               	movlw	1
  8606  19DB                     u3635:	
  8607  19DB  1003               	clrc
  8608  19DC  0CF1               	rrf	___wmul@multiplier+1,f
  8609  19DD  0CF0               	rrf	___wmul@multiplier,f
  8610  19DE  3EFF               	addlw	-1
  8611  19DF  1D03               	skipz
  8612  19E0  29DB               	goto	u3635
  8613  19E1  0871               	movf	___wmul@multiplier+1,w
  8614  19E2  0470               	iorwf	___wmul@multiplier,w
  8615  19E3  1D03               	skipz
  8616  19E4  29CB               	goto	l2719
  8617  19E5  0875               	movf	___wmul@product+1,w
  8618  19E6  01F1               	clrf	?___wmul+1
  8619  19E7  07F1               	addwf	?___wmul+1,f
  8620  19E8  0874               	movf	___wmul@product,w
  8621  19E9  01F0               	clrf	?___wmul
  8622  19EA  07F0               	addwf	?___wmul,f
  8623  19EB  0008               	return
  8624  19EC                     __end_of___wmul:	
  8625                           
  8626                           	psect	text26
  8627  000B                     __ptext26:	
  8628 ;; *************** function ___lltoft *****************
  8629 ;; Defined at:
  8630 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lltoft.c"
  8631 ;; Parameters:    Size  Location     Type
  8632 ;;  c               4    8[COMMON] unsigned long 
  8633 ;; Auto vars:     Size  Location     Type
  8634 ;;  exp             1   13[COMMON] unsigned char 
  8635 ;; Return value:  Size  Location     Type
  8636 ;;                  3    8[COMMON] float 
  8637 ;; Registers used:
  8638 ;;		wreg, status,2, status,0, pclath, cstack
  8639 ;; Tracked objects:
  8640 ;;		On entry : 0/0
  8641 ;;		On exit  : 0/0
  8642 ;;		Unchanged: 0/0
  8643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8644 ;;      Params:         4       0       0       0       0
  8645 ;;      Locals:         1       0       0       0       0
  8646 ;;      Temps:          1       0       0       0       0
  8647 ;;      Totals:         6       0       0       0       0
  8648 ;;Total ram usage:        6 bytes
  8649 ;; Hardware stack levels used:    1
  8650 ;; Hardware stack levels required when called:    1
  8651 ;; This function calls:
  8652 ;;		___ftpack
  8653 ;; This function is called by:
  8654 ;;		_sprintf
  8655 ;;		_pow
  8656 ;; This function uses a non-reentrant model
  8657 ;;
  8658                           
  8659                           
  8660                           ;psect for function ___lltoft
  8661  000B                     ___lltoft:	
  8662                           
  8663                           ;incstack = 0
  8664                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  8665  000B  308E               	movlw	142
  8666  000C  00FC               	movwf	??___lltoft
  8667  000D  087C               	movf	??___lltoft,w
  8668  000E  00FD               	movwf	___lltoft@exp
  8669  000F                     l2837:	
  8670  000F  30FF               	movlw	255
  8671  0010  057B               	andwf	___lltoft@c+3,w
  8672  0011  1903               	btfsc	3,2
  8673  0012  2821               	goto	l2839
  8674  0013  3001               	movlw	1
  8675  0014                     u3875:	
  8676  0014  1003               	clrc
  8677  0015  0CFB               	rrf	___lltoft@c+3,f
  8678  0016  0CFA               	rrf	___lltoft@c+2,f
  8679  0017  0CF9               	rrf	___lltoft@c+1,f
  8680  0018  0CF8               	rrf	___lltoft@c,f
  8681  0019  3EFF               	addlw	-1
  8682  001A  1D03               	skipz
  8683  001B  2814               	goto	u3875
  8684  001C  3001               	movlw	1
  8685  001D  00FC               	movwf	??___lltoft
  8686  001E  087C               	movf	??___lltoft,w
  8687  001F  07FD               	addwf	___lltoft@exp,f
  8688  0020  280F               	goto	l2837
  8689  0021                     l2839:	
  8690  0021  0878               	movf	___lltoft@c,w
  8691  0022  00F0               	movwf	___ftpack@arg
  8692  0023  0879               	movf	___lltoft@c+1,w
  8693  0024  00F1               	movwf	___ftpack@arg+1
  8694  0025  087A               	movf	___lltoft@c+2,w
  8695  0026  00F2               	movwf	___ftpack@arg+2
  8696  0027  087D               	movf	___lltoft@exp,w
  8697  0028  00FC               	movwf	??___lltoft
  8698  0029  087C               	movf	??___lltoft,w
  8699  002A  00F3               	movwf	___ftpack@exp
  8700  002B  01F4               	clrf	___ftpack@sign
  8701  002C  160A  158A  2447   	fcall	___ftpack
  8702  002F  0870               	movf	?___ftpack,w
  8703  0030  00F8               	movwf	?___lltoft
  8704  0031  0871               	movf	?___ftpack+1,w
  8705  0032  00F9               	movwf	?___lltoft+1
  8706  0033  0872               	movf	?___ftpack+2,w
  8707  0034  00FA               	movwf	?___lltoft+2
  8708  0035  0008               	return
  8709  0036                     __end_of___lltoft:	
  8710                           
  8711                           	psect	text27
  8712  1AE1                     __ptext27:	
  8713 ;; *************** function ___llmod *****************
  8714 ;; Defined at:
  8715 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\llmod.c"
  8716 ;; Parameters:    Size  Location     Type
  8717 ;;  divisor         4    0[BANK0 ] unsigned long 
  8718 ;;  dividend        4    4[BANK0 ] unsigned long 
  8719 ;; Auto vars:     Size  Location     Type
  8720 ;;  counter         1    9[BANK0 ] unsigned char 
  8721 ;; Return value:  Size  Location     Type
  8722 ;;                  4    0[BANK0 ] unsigned long 
  8723 ;; Registers used:
  8724 ;;		wreg, status,2, status,0
  8725 ;; Tracked objects:
  8726 ;;		On entry : 0/0
  8727 ;;		On exit  : 0/0
  8728 ;;		Unchanged: 0/0
  8729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8730 ;;      Params:         0       8       0       0       0
  8731 ;;      Locals:         0       1       0       0       0
  8732 ;;      Temps:          0       1       0       0       0
  8733 ;;      Totals:         0      10       0       0       0
  8734 ;;Total ram usage:       10 bytes
  8735 ;; Hardware stack levels used:    1
  8736 ;; This function calls:
  8737 ;;		Nothing
  8738 ;; This function is called by:
  8739 ;;		_sprintf
  8740 ;; This function uses a non-reentrant model
  8741 ;;
  8742                           
  8743                           
  8744                           ;psect for function ___llmod
  8745  1AE1                     ___llmod:	
  8746                           
  8747                           ;incstack = 0
  8748                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  8749  1AE1  1283               	bcf	3,5	;RP0=0, select bank0
  8750  1AE2  1303               	bcf	3,6	;RP1=0, select bank0
  8751  1AE3  0823               	movf	___llmod@divisor+3,w
  8752  1AE4  0422               	iorwf	___llmod@divisor+2,w
  8753  1AE5  0421               	iorwf	___llmod@divisor+1,w
  8754  1AE6  0420               	iorwf	___llmod@divisor,w
  8755  1AE7  1903               	skipnz
  8756  1AE8  2B26               	goto	l2829
  8757  1AE9  01A9               	clrf	___llmod@counter
  8758  1AEA  0AA9               	incf	___llmod@counter,f
  8759  1AEB                     l2819:	
  8760  1AEB  1BA3               	btfsc	___llmod@divisor+3,7
  8761  1AEC  2AFB               	goto	l2821
  8762  1AED  3001               	movlw	1
  8763  1AEE  00A8               	movwf	??___llmod
  8764  1AEF                     u3825:	
  8765  1AEF  1003               	clrc
  8766  1AF0  0DA0               	rlf	___llmod@divisor,f
  8767  1AF1  0DA1               	rlf	___llmod@divisor+1,f
  8768  1AF2  0DA2               	rlf	___llmod@divisor+2,f
  8769  1AF3  0DA3               	rlf	___llmod@divisor+3,f
  8770  1AF4  0BA8               	decfsz	??___llmod,f
  8771  1AF5  2AEF               	goto	u3825
  8772  1AF6  3001               	movlw	1
  8773  1AF7  00A8               	movwf	??___llmod
  8774  1AF8  0828               	movf	??___llmod,w
  8775  1AF9  07A9               	addwf	___llmod@counter,f
  8776  1AFA  2AEB               	goto	l2819
  8777  1AFB                     l2821:	
  8778  1AFB  0823               	movf	___llmod@divisor+3,w
  8779  1AFC  0227               	subwf	___llmod@dividend+3,w
  8780  1AFD  1D03               	skipz
  8781  1AFE  2B09               	goto	u3845
  8782  1AFF  0822               	movf	___llmod@divisor+2,w
  8783  1B00  0226               	subwf	___llmod@dividend+2,w
  8784  1B01  1D03               	skipz
  8785  1B02  2B09               	goto	u3845
  8786  1B03  0821               	movf	___llmod@divisor+1,w
  8787  1B04  0225               	subwf	___llmod@dividend+1,w
  8788  1B05  1D03               	skipz
  8789  1B06  2B09               	goto	u3845
  8790  1B07  0820               	movf	___llmod@divisor,w
  8791  1B08  0224               	subwf	___llmod@dividend,w
  8792  1B09                     u3845:	
  8793  1B09  1C03               	skipc
  8794  1B0A  2B19               	goto	l2825
  8795  1B0B  0820               	movf	___llmod@divisor,w
  8796  1B0C  02A4               	subwf	___llmod@dividend,f
  8797  1B0D  0821               	movf	___llmod@divisor+1,w
  8798  1B0E  1C03               	skipc
  8799  1B0F  0F21               	incfsz	___llmod@divisor+1,w
  8800  1B10  02A5               	subwf	___llmod@dividend+1,f
  8801  1B11  0822               	movf	___llmod@divisor+2,w
  8802  1B12  1C03               	skipc
  8803  1B13  0F22               	incfsz	___llmod@divisor+2,w
  8804  1B14  02A6               	subwf	___llmod@dividend+2,f
  8805  1B15  0823               	movf	___llmod@divisor+3,w
  8806  1B16  1C03               	skipc
  8807  1B17  0F23               	incfsz	___llmod@divisor+3,w
  8808  1B18  02A7               	subwf	___llmod@dividend+3,f
  8809  1B19                     l2825:	
  8810  1B19  3001               	movlw	1
  8811  1B1A                     u3855:	
  8812  1B1A  1003               	clrc
  8813  1B1B  0CA3               	rrf	___llmod@divisor+3,f
  8814  1B1C  0CA2               	rrf	___llmod@divisor+2,f
  8815  1B1D  0CA1               	rrf	___llmod@divisor+1,f
  8816  1B1E  0CA0               	rrf	___llmod@divisor,f
  8817  1B1F  3EFF               	addlw	-1
  8818  1B20  1D03               	skipz
  8819  1B21  2B1A               	goto	u3855
  8820  1B22  3001               	movlw	1
  8821  1B23  02A9               	subwf	___llmod@counter,f
  8822  1B24  1D03               	btfss	3,2
  8823  1B25  2AFB               	goto	l2821
  8824  1B26                     l2829:	
  8825  1B26  0827               	movf	___llmod@dividend+3,w
  8826  1B27  00A3               	movwf	?___llmod+3
  8827  1B28  0826               	movf	___llmod@dividend+2,w
  8828  1B29  00A2               	movwf	?___llmod+2
  8829  1B2A  0825               	movf	___llmod@dividend+1,w
  8830  1B2B  00A1               	movwf	?___llmod+1
  8831  1B2C  0824               	movf	___llmod@dividend,w
  8832  1B2D  00A0               	movwf	?___llmod
  8833  1B2E  0008               	return
  8834  1B2F                     __end_of___llmod:	
  8835                           
  8836                           	psect	text28
  8837  1BE9                     __ptext28:	
  8838 ;; *************** function ___lldiv *****************
  8839 ;; Defined at:
  8840 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lldiv.c"
  8841 ;; Parameters:    Size  Location     Type
  8842 ;;  divisor         4    0[COMMON] unsigned long 
  8843 ;;  dividend        4    4[COMMON] unsigned long 
  8844 ;; Auto vars:     Size  Location     Type
  8845 ;;  quotient        4    9[COMMON] unsigned long 
  8846 ;;  counter         1   13[COMMON] unsigned char 
  8847 ;; Return value:  Size  Location     Type
  8848 ;;                  4    0[COMMON] unsigned long 
  8849 ;; Registers used:
  8850 ;;		wreg, status,2, status,0
  8851 ;; Tracked objects:
  8852 ;;		On entry : 0/0
  8853 ;;		On exit  : 0/0
  8854 ;;		Unchanged: 0/0
  8855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8856 ;;      Params:         8       0       0       0       0
  8857 ;;      Locals:         5       0       0       0       0
  8858 ;;      Temps:          1       0       0       0       0
  8859 ;;      Totals:        14       0       0       0       0
  8860 ;;Total ram usage:       14 bytes
  8861 ;; Hardware stack levels used:    1
  8862 ;; This function calls:
  8863 ;;		Nothing
  8864 ;; This function is called by:
  8865 ;;		_sprintf
  8866 ;; This function uses a non-reentrant model
  8867 ;;
  8868                           
  8869                           
  8870                           ;psect for function ___lldiv
  8871  1BE9                     ___lldiv:	
  8872                           
  8873                           ;incstack = 0
  8874                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  8875  1BE9  3000               	movlw	0
  8876  1BEA  00FC               	movwf	___lldiv@quotient+3
  8877  1BEB  3000               	movlw	0
  8878  1BEC  00FB               	movwf	___lldiv@quotient+2
  8879  1BED  3000               	movlw	0
  8880  1BEE  00FA               	movwf	___lldiv@quotient+1
  8881  1BEF  3000               	movlw	0
  8882  1BF0  00F9               	movwf	___lldiv@quotient
  8883  1BF1  0873               	movf	___lldiv@divisor+3,w
  8884  1BF2  0472               	iorwf	___lldiv@divisor+2,w
  8885  1BF3  0471               	iorwf	___lldiv@divisor+1,w
  8886  1BF4  0470               	iorwf	___lldiv@divisor,w
  8887  1BF5  1903               	skipnz
  8888  1BF6  2C3E               	goto	l2809
  8889  1BF7  01FD               	clrf	___lldiv@counter
  8890  1BF8  0AFD               	incf	___lldiv@counter,f
  8891  1BF9                     l2795:	
  8892  1BF9  1BF3               	btfsc	___lldiv@divisor+3,7
  8893  1BFA  2C09               	goto	l2797
  8894  1BFB  3001               	movlw	1
  8895  1BFC  00F8               	movwf	??___lldiv
  8896  1BFD                     u3755:	
  8897  1BFD  1003               	clrc
  8898  1BFE  0DF0               	rlf	___lldiv@divisor,f
  8899  1BFF  0DF1               	rlf	___lldiv@divisor+1,f
  8900  1C00  0DF2               	rlf	___lldiv@divisor+2,f
  8901  1C01  0DF3               	rlf	___lldiv@divisor+3,f
  8902  1C02  0BF8               	decfsz	??___lldiv,f
  8903  1C03  2BFD               	goto	u3755
  8904  1C04  3001               	movlw	1
  8905  1C05  00F8               	movwf	??___lldiv
  8906  1C06  0878               	movf	??___lldiv,w
  8907  1C07  07FD               	addwf	___lldiv@counter,f
  8908  1C08  2BF9               	goto	l2795
  8909  1C09                     l2797:	
  8910  1C09  3001               	movlw	1
  8911  1C0A  00F8               	movwf	??___lldiv
  8912  1C0B                     u3775:	
  8913  1C0B  1003               	clrc
  8914  1C0C  0DF9               	rlf	___lldiv@quotient,f
  8915  1C0D  0DFA               	rlf	___lldiv@quotient+1,f
  8916  1C0E  0DFB               	rlf	___lldiv@quotient+2,f
  8917  1C0F  0DFC               	rlf	___lldiv@quotient+3,f
  8918  1C10  0BF8               	decfsz	??___lldiv,f
  8919  1C11  2C0B               	goto	u3775
  8920  1C12  0873               	movf	___lldiv@divisor+3,w
  8921  1C13  0277               	subwf	___lldiv@dividend+3,w
  8922  1C14  1D03               	skipz
  8923  1C15  2C20               	goto	u3785
  8924  1C16  0872               	movf	___lldiv@divisor+2,w
  8925  1C17  0276               	subwf	___lldiv@dividend+2,w
  8926  1C18  1D03               	skipz
  8927  1C19  2C20               	goto	u3785
  8928  1C1A  0871               	movf	___lldiv@divisor+1,w
  8929  1C1B  0275               	subwf	___lldiv@dividend+1,w
  8930  1C1C  1D03               	skipz
  8931  1C1D  2C20               	goto	u3785
  8932  1C1E  0870               	movf	___lldiv@divisor,w
  8933  1C1F  0274               	subwf	___lldiv@dividend,w
  8934  1C20                     u3785:	
  8935  1C20  1C03               	skipc
  8936  1C21  2C31               	goto	l2805
  8937  1C22  0870               	movf	___lldiv@divisor,w
  8938  1C23  02F4               	subwf	___lldiv@dividend,f
  8939  1C24  0871               	movf	___lldiv@divisor+1,w
  8940  1C25  1C03               	skipc
  8941  1C26  0F71               	incfsz	___lldiv@divisor+1,w
  8942  1C27  02F5               	subwf	___lldiv@dividend+1,f
  8943  1C28  0872               	movf	___lldiv@divisor+2,w
  8944  1C29  1C03               	skipc
  8945  1C2A  0F72               	incfsz	___lldiv@divisor+2,w
  8946  1C2B  02F6               	subwf	___lldiv@dividend+2,f
  8947  1C2C  0873               	movf	___lldiv@divisor+3,w
  8948  1C2D  1C03               	skipc
  8949  1C2E  0F73               	incfsz	___lldiv@divisor+3,w
  8950  1C2F  02F7               	subwf	___lldiv@dividend+3,f
  8951  1C30  1479               	bsf	___lldiv@quotient,0
  8952  1C31                     l2805:	
  8953  1C31  3001               	movlw	1
  8954  1C32                     u3795:	
  8955  1C32  1003               	clrc
  8956  1C33  0CF3               	rrf	___lldiv@divisor+3,f
  8957  1C34  0CF2               	rrf	___lldiv@divisor+2,f
  8958  1C35  0CF1               	rrf	___lldiv@divisor+1,f
  8959  1C36  0CF0               	rrf	___lldiv@divisor,f
  8960  1C37  3EFF               	addlw	-1
  8961  1C38  1D03               	skipz
  8962  1C39  2C32               	goto	u3795
  8963  1C3A  3001               	movlw	1
  8964  1C3B  02FD               	subwf	___lldiv@counter,f
  8965  1C3C  1D03               	btfss	3,2
  8966  1C3D  2C09               	goto	l2797
  8967  1C3E                     l2809:	
  8968  1C3E  087C               	movf	___lldiv@quotient+3,w
  8969  1C3F  00F3               	movwf	?___lldiv+3
  8970  1C40  087B               	movf	___lldiv@quotient+2,w
  8971  1C41  00F2               	movwf	?___lldiv+2
  8972  1C42  087A               	movf	___lldiv@quotient+1,w
  8973  1C43  00F1               	movwf	?___lldiv+1
  8974  1C44  0879               	movf	___lldiv@quotient,w
  8975  1C45  00F0               	movwf	?___lldiv
  8976  1C46  0008               	return
  8977  1C47                     __end_of___lldiv:	
  8978                           
  8979                           	psect	text29
  8980  1DAB                     __ptext29:	
  8981 ;; *************** function ___fttol *****************
  8982 ;; Defined at:
  8983 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\fttol.c"
  8984 ;; Parameters:    Size  Location     Type
  8985 ;;  f1              3   41[BANK0 ] float 
  8986 ;; Auto vars:     Size  Location     Type
  8987 ;;  lval            4   50[BANK0 ] unsigned long 
  8988 ;;  exp1            1   54[BANK0 ] unsigned char 
  8989 ;;  sign1           1   49[BANK0 ] unsigned char 
  8990 ;; Return value:  Size  Location     Type
  8991 ;;                  4   41[BANK0 ] long 
  8992 ;; Registers used:
  8993 ;;		wreg, status,2, status,0
  8994 ;; Tracked objects:
  8995 ;;		On entry : 0/0
  8996 ;;		On exit  : 0/0
  8997 ;;		Unchanged: 0/0
  8998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8999 ;;      Params:         0       4       0       0       0
  9000 ;;      Locals:         0       6       0       0       0
  9001 ;;      Temps:          0       4       0       0       0
  9002 ;;      Totals:         0      14       0       0       0
  9003 ;;Total ram usage:       14 bytes
  9004 ;; Hardware stack levels used:    1
  9005 ;; This function calls:
  9006 ;;		Nothing
  9007 ;; This function is called by:
  9008 ;;		_main
  9009 ;;		_sprintf
  9010 ;;		_pow
  9011 ;;		_exp
  9012 ;;		_floor
  9013 ;; This function uses a non-reentrant model
  9014 ;;
  9015                           
  9016                           
  9017                           ;psect for function ___fttol
  9018  1DAB                     ___fttol:	
  9019                           
  9020                           ;incstack = 0
  9021                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  9022  1DAB  1283               	bcf	3,5	;RP0=0, select bank0
  9023  1DAC  1303               	bcf	3,6	;RP1=0, select bank0
  9024  1DAD  0849               	movf	___fttol@f1,w
  9025  1DAE  00CD               	movwf	??___fttol
  9026  1DAF  084A               	movf	___fttol@f1+1,w
  9027  1DB0  00CE               	movwf	??___fttol+1
  9028  1DB1  084B               	movf	___fttol@f1+2,w
  9029  1DB2  00CF               	movwf	??___fttol+2
  9030  1DB3  1003               	clrc
  9031  1DB4  0D4E               	rlf	??___fttol+1,w
  9032  1DB5  0D4F               	rlf	??___fttol+2,w
  9033  1DB6  00D0               	movwf	??___fttol+3
  9034  1DB7  0850               	movf	??___fttol+3,w
  9035  1DB8  00D6               	movwf	___fttol@exp1
  9036  1DB9  08D6               	movf	___fttol@exp1,f
  9037  1DBA  1D03               	skipz
  9038  1DBB  2DC5               	goto	l2457
  9039  1DBC  3000               	movlw	0
  9040  1DBD  00CC               	movwf	?___fttol+3
  9041  1DBE  3000               	movlw	0
  9042  1DBF  00CB               	movwf	?___fttol+2
  9043  1DC0  3000               	movlw	0
  9044  1DC1  00CA               	movwf	?___fttol+1
  9045  1DC2  3000               	movlw	0
  9046  1DC3  00C9               	movwf	?___fttol
  9047  1DC4  0008               	return
  9048  1DC5                     l2457:	
  9049  1DC5  0849               	movf	___fttol@f1,w
  9050  1DC6  00CD               	movwf	??___fttol
  9051  1DC7  084A               	movf	___fttol@f1+1,w
  9052  1DC8  00CE               	movwf	??___fttol+1
  9053  1DC9  084B               	movf	___fttol@f1+2,w
  9054  1DCA  00CF               	movwf	??___fttol+2
  9055  1DCB  3017               	movlw	23
  9056  1DCC                     u3135:	
  9057  1DCC  1003               	clrc
  9058  1DCD  0CCF               	rrf	??___fttol+2,f
  9059  1DCE  0CCE               	rrf	??___fttol+1,f
  9060  1DCF  0CCD               	rrf	??___fttol,f
  9061  1DD0  3EFF               	addlw	-1
  9062  1DD1  1D03               	skipz
  9063  1DD2  2DCC               	goto	u3135
  9064  1DD3  084D               	movf	??___fttol,w
  9065  1DD4  00D0               	movwf	??___fttol+3
  9066  1DD5  0850               	movf	??___fttol+3,w
  9067  1DD6  00D1               	movwf	___fttol@sign1
  9068  1DD7  17CA               	bsf	___fttol@f1+1,7
  9069  1DD8  30FF               	movlw	255
  9070  1DD9  05C9               	andwf	___fttol@f1,f
  9071  1DDA  30FF               	movlw	255
  9072  1DDB  05CA               	andwf	___fttol@f1+1,f
  9073  1DDC  3000               	movlw	0
  9074  1DDD  05CB               	andwf	___fttol@f1+2,f
  9075  1DDE  0849               	movf	___fttol@f1,w
  9076  1DDF  00D2               	movwf	___fttol@lval
  9077  1DE0  084A               	movf	___fttol@f1+1,w
  9078  1DE1  00D3               	movwf	___fttol@lval+1
  9079  1DE2  084B               	movf	___fttol@f1+2,w
  9080  1DE3  00D4               	movwf	___fttol@lval+2
  9081  1DE4  01D5               	clrf	___fttol@lval+3
  9082  1DE5  308E               	movlw	142
  9083  1DE6  02D6               	subwf	___fttol@exp1,f
  9084  1DE7  1FD6               	btfss	___fttol@exp1,7
  9085  1DE8  2E07               	goto	l2477
  9086  1DE9  0856               	movf	___fttol@exp1,w
  9087  1DEA  3A80               	xorlw	128
  9088  1DEB  3E8F               	addlw	143
  9089  1DEC  1803               	skipnc
  9090  1DED  2DF7               	goto	l2475
  9091  1DEE  3000               	movlw	0
  9092  1DEF  00CC               	movwf	?___fttol+3
  9093  1DF0  3000               	movlw	0
  9094  1DF1  00CB               	movwf	?___fttol+2
  9095  1DF2  3000               	movlw	0
  9096  1DF3  00CA               	movwf	?___fttol+1
  9097  1DF4  3000               	movlw	0
  9098  1DF5  00C9               	movwf	?___fttol
  9099  1DF6  0008               	return
  9100  1DF7                     l2475:	
  9101  1DF7  3001               	movlw	1
  9102  1DF8                     u3165:	
  9103  1DF8  1003               	clrc
  9104  1DF9  0CD5               	rrf	___fttol@lval+3,f
  9105  1DFA  0CD4               	rrf	___fttol@lval+2,f
  9106  1DFB  0CD3               	rrf	___fttol@lval+1,f
  9107  1DFC  0CD2               	rrf	___fttol@lval,f
  9108  1DFD  3EFF               	addlw	-1
  9109  1DFE  1D03               	skipz
  9110  1DFF  2DF8               	goto	u3165
  9111  1E00  3001               	movlw	1
  9112  1E01  00CD               	movwf	??___fttol
  9113  1E02  084D               	movf	??___fttol,w
  9114  1E03  07D6               	addwf	___fttol@exp1,f
  9115  1E04  1903               	btfsc	3,2
  9116  1E05  2E22               	goto	l2487
  9117  1E06  2DF7               	goto	l2475
  9118  1E07                     l2477:	
  9119  1E07  3018               	movlw	24
  9120  1E08  0256               	subwf	___fttol@exp1,w
  9121  1E09  1C03               	skipc
  9122  1E0A  2E1F               	goto	l2485
  9123  1E0B  3000               	movlw	0
  9124  1E0C  00CC               	movwf	?___fttol+3
  9125  1E0D  3000               	movlw	0
  9126  1E0E  00CB               	movwf	?___fttol+2
  9127  1E0F  3000               	movlw	0
  9128  1E10  00CA               	movwf	?___fttol+1
  9129  1E11  3000               	movlw	0
  9130  1E12  00C9               	movwf	?___fttol
  9131  1E13  0008               	return
  9132  1E14                     l2483:	
  9133  1E14  3001               	movlw	1
  9134  1E15  00CD               	movwf	??___fttol
  9135  1E16                     u3195:	
  9136  1E16  1003               	clrc
  9137  1E17  0DD2               	rlf	___fttol@lval,f
  9138  1E18  0DD3               	rlf	___fttol@lval+1,f
  9139  1E19  0DD4               	rlf	___fttol@lval+2,f
  9140  1E1A  0DD5               	rlf	___fttol@lval+3,f
  9141  1E1B  0BCD               	decfsz	??___fttol,f
  9142  1E1C  2E16               	goto	u3195
  9143  1E1D  3001               	movlw	1
  9144  1E1E  02D6               	subwf	___fttol@exp1,f
  9145  1E1F                     l2485:	
  9146  1E1F  08D6               	movf	___fttol@exp1,f
  9147  1E20  1D03               	skipz
  9148  1E21  2E14               	goto	l2483
  9149  1E22                     l2487:	
  9150  1E22  0851               	movf	___fttol@sign1,w
  9151  1E23  1903               	btfsc	3,2
  9152  1E24  2E30               	goto	l2491
  9153  1E25  09D2               	comf	___fttol@lval,f
  9154  1E26  09D3               	comf	___fttol@lval+1,f
  9155  1E27  09D4               	comf	___fttol@lval+2,f
  9156  1E28  09D5               	comf	___fttol@lval+3,f
  9157  1E29  0AD2               	incf	___fttol@lval,f
  9158  1E2A  1903               	skipnz
  9159  1E2B  0AD3               	incf	___fttol@lval+1,f
  9160  1E2C  1903               	skipnz
  9161  1E2D  0AD4               	incf	___fttol@lval+2,f
  9162  1E2E  1903               	skipnz
  9163  1E2F  0AD5               	incf	___fttol@lval+3,f
  9164  1E30                     l2491:	
  9165  1E30  0855               	movf	___fttol@lval+3,w
  9166  1E31  00CC               	movwf	?___fttol+3
  9167  1E32  0854               	movf	___fttol@lval+2,w
  9168  1E33  00CB               	movwf	?___fttol+2
  9169  1E34  0853               	movf	___fttol@lval+1,w
  9170  1E35  00CA               	movwf	?___fttol+1
  9171  1E36  0852               	movf	___fttol@lval,w
  9172  1E37  00C9               	movwf	?___fttol
  9173  1E38  0008               	return
  9174  1E39                     __end_of___fttol:	
  9175                           
  9176                           	psect	text30
  9177  196C                     __ptext30:	
  9178 ;; *************** function ___ftsub *****************
  9179 ;; Defined at:
  9180 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftsub.c"
  9181 ;; Parameters:    Size  Location     Type
  9182 ;;  f2              3   61[BANK0 ] float 
  9183 ;;  f1              3   64[BANK0 ] float 
  9184 ;; Auto vars:     Size  Location     Type
  9185 ;;		None
  9186 ;; Return value:  Size  Location     Type
  9187 ;;                  3   61[BANK0 ] float 
  9188 ;; Registers used:
  9189 ;;		wreg, status,2, status,0, pclath, cstack
  9190 ;; Tracked objects:
  9191 ;;		On entry : 0/0
  9192 ;;		On exit  : 0/0
  9193 ;;		Unchanged: 0/0
  9194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9195 ;;      Params:         0       6       0       0       0
  9196 ;;      Locals:         0       0       0       0       0
  9197 ;;      Temps:          0       0       0       0       0
  9198 ;;      Totals:         0       6       0       0       0
  9199 ;;Total ram usage:        6 bytes
  9200 ;; Hardware stack levels used:    1
  9201 ;; Hardware stack levels required when called:    2
  9202 ;; This function calls:
  9203 ;;		___ftadd
  9204 ;; This function is called by:
  9205 ;;		_sprintf
  9206 ;;		_exp
  9207 ;; This function uses a non-reentrant model
  9208 ;;
  9209                           
  9210                           
  9211                           ;psect for function ___ftsub
  9212  196C                     ___ftsub:	
  9213                           
  9214                           ;incstack = 0
  9215                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  9216  196C  3080               	movlw	128
  9217  196D  1283               	bcf	3,5	;RP0=0, select bank0
  9218  196E  1303               	bcf	3,6	;RP1=0, select bank0
  9219  196F  06DF               	xorwf	___ftsub@f2+2,f
  9220  1970  0860               	movf	___ftsub@f1,w
  9221  1971  00D0               	movwf	___ftadd@f1
  9222  1972  0861               	movf	___ftsub@f1+1,w
  9223  1973  00D1               	movwf	___ftadd@f1+1
  9224  1974  0862               	movf	___ftsub@f1+2,w
  9225  1975  00D2               	movwf	___ftadd@f1+2
  9226  1976  085D               	movf	___ftsub@f2,w
  9227  1977  00D3               	movwf	___ftadd@f2
  9228  1978  085E               	movf	___ftsub@f2+1,w
  9229  1979  00D4               	movwf	___ftadd@f2+1
  9230  197A  085F               	movf	___ftsub@f2+2,w
  9231  197B  00D5               	movwf	___ftadd@f2+2
  9232  197C  120A  158A  2028   	fcall	___ftadd
  9233  197F  1283               	bcf	3,5	;RP0=0, select bank0
  9234  1980  1303               	bcf	3,6	;RP1=0, select bank0
  9235  1981  0850               	movf	?___ftadd,w
  9236  1982  00DD               	movwf	?___ftsub
  9237  1983  0851               	movf	?___ftadd+1,w
  9238  1984  00DE               	movwf	?___ftsub+1
  9239  1985  0852               	movf	?___ftadd+2,w
  9240  1986  00DF               	movwf	?___ftsub+2
  9241  1987  0008               	return
  9242  1988                     __end_of___ftsub:	
  9243                           
  9244                           	psect	text31
  9245  0828                     __ptext31:	
  9246 ;; *************** function ___ftadd *****************
  9247 ;; Defined at:
  9248 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftadd.c"
  9249 ;; Parameters:    Size  Location     Type
  9250 ;;  f1              3   48[BANK0 ] float 
  9251 ;;  f2              3   51[BANK0 ] float 
  9252 ;; Auto vars:     Size  Location     Type
  9253 ;;  exp1            1   60[BANK0 ] unsigned char 
  9254 ;;  exp2            1   59[BANK0 ] unsigned char 
  9255 ;;  sign            1   58[BANK0 ] unsigned char 
  9256 ;; Return value:  Size  Location     Type
  9257 ;;                  3   48[BANK0 ] float 
  9258 ;; Registers used:
  9259 ;;		wreg, status,2, status,0, pclath, cstack
  9260 ;; Tracked objects:
  9261 ;;		On entry : 0/0
  9262 ;;		On exit  : 0/0
  9263 ;;		Unchanged: 0/0
  9264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9265 ;;      Params:         0       6       0       0       0
  9266 ;;      Locals:         0       3       0       0       0
  9267 ;;      Temps:          0       4       0       0       0
  9268 ;;      Totals:         0      13       0       0       0
  9269 ;;Total ram usage:       13 bytes
  9270 ;; Hardware stack levels used:    1
  9271 ;; Hardware stack levels required when called:    1
  9272 ;; This function calls:
  9273 ;;		___ftpack
  9274 ;; This function is called by:
  9275 ;;		_main
  9276 ;;		_sprintf
  9277 ;;		___ftsub
  9278 ;;		_floor
  9279 ;;		_log
  9280 ;;		_eval_poly
  9281 ;; This function uses a non-reentrant model
  9282 ;;
  9283                           
  9284                           
  9285                           ;psect for function ___ftadd
  9286  0828                     ___ftadd:	
  9287                           
  9288                           ;incstack = 0
  9289                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  9290  0828  1283               	bcf	3,5	;RP0=0, select bank0
  9291  0829  1303               	bcf	3,6	;RP1=0, select bank0
  9292  082A  0850               	movf	___ftadd@f1,w
  9293  082B  00D6               	movwf	??___ftadd
  9294  082C  0851               	movf	___ftadd@f1+1,w
  9295  082D  00D7               	movwf	??___ftadd+1
  9296  082E  0852               	movf	___ftadd@f1+2,w
  9297  082F  00D8               	movwf	??___ftadd+2
  9298  0830  1003               	clrc
  9299  0831  0D57               	rlf	??___ftadd+1,w
  9300  0832  0D58               	rlf	??___ftadd+2,w
  9301  0833  00D9               	movwf	??___ftadd+3
  9302  0834  0859               	movf	??___ftadd+3,w
  9303  0835  00DC               	movwf	___ftadd@exp1
  9304  0836  0853               	movf	___ftadd@f2,w
  9305  0837  00D6               	movwf	??___ftadd
  9306  0838  0854               	movf	___ftadd@f2+1,w
  9307  0839  00D7               	movwf	??___ftadd+1
  9308  083A  0855               	movf	___ftadd@f2+2,w
  9309  083B  00D8               	movwf	??___ftadd+2
  9310  083C  1003               	clrc
  9311  083D  0D57               	rlf	??___ftadd+1,w
  9312  083E  0D58               	rlf	??___ftadd+2,w
  9313  083F  00D9               	movwf	??___ftadd+3
  9314  0840  0859               	movf	??___ftadd+3,w
  9315  0841  00DB               	movwf	___ftadd@exp2
  9316  0842  085C               	movf	___ftadd@exp1,w
  9317  0843  1903               	btfsc	3,2
  9318  0844  2851               	goto	l2309
  9319  0845  085B               	movf	___ftadd@exp2,w
  9320  0846  025C               	subwf	___ftadd@exp1,w
  9321  0847  1803               	skipnc
  9322  0848  2858               	goto	l2313
  9323  0849  035C               	decf	___ftadd@exp1,w
  9324  084A  3AFF               	xorlw	255
  9325  084B  075B               	addwf	___ftadd@exp2,w
  9326  084C  00D6               	movwf	??___ftadd
  9327  084D  3019               	movlw	25
  9328  084E  0256               	subwf	??___ftadd,w
  9329  084F  1C03               	skipc
  9330  0850  2858               	goto	l2313
  9331  0851                     l2309:	
  9332  0851  0853               	movf	___ftadd@f2,w
  9333  0852  00D0               	movwf	?___ftadd
  9334  0853  0854               	movf	___ftadd@f2+1,w
  9335  0854  00D1               	movwf	?___ftadd+1
  9336  0855  0855               	movf	___ftadd@f2+2,w
  9337  0856  00D2               	movwf	?___ftadd+2
  9338  0857  0008               	return
  9339  0858                     l2313:	
  9340  0858  085B               	movf	___ftadd@exp2,w
  9341  0859  1903               	btfsc	3,2
  9342  085A  0008               	return
  9343  085B  085C               	movf	___ftadd@exp1,w
  9344  085C  025B               	subwf	___ftadd@exp2,w
  9345  085D  1803               	skipnc
  9346  085E  2867               	goto	l2319
  9347  085F  035B               	decf	___ftadd@exp2,w
  9348  0860  3AFF               	xorlw	255
  9349  0861  075C               	addwf	___ftadd@exp1,w
  9350  0862  00D6               	movwf	??___ftadd
  9351  0863  3019               	movlw	25
  9352  0864  0256               	subwf	??___ftadd,w
  9353  0865  1803               	btfsc	3,0
  9354  0866  0008               	return
  9355  0867                     l2319:	
  9356  0867  3006               	movlw	6
  9357  0868  00D6               	movwf	??___ftadd
  9358  0869  0856               	movf	??___ftadd,w
  9359  086A  00DA               	movwf	___ftadd@sign
  9360  086B  1BD2               	btfsc	___ftadd@f1+2,7
  9361  086C  17DA               	bsf	___ftadd@sign,7
  9362  086D  1BD5               	btfsc	___ftadd@f2+2,7
  9363  086E  175A               	bsf	___ftadd@sign,6
  9364  086F  17D1               	bsf	___ftadd@f1+1,7
  9365  0870  30FF               	movlw	255
  9366  0871  05D0               	andwf	___ftadd@f1,f
  9367  0872  30FF               	movlw	255
  9368  0873  05D1               	andwf	___ftadd@f1+1,f
  9369  0874  3000               	movlw	0
  9370  0875  05D2               	andwf	___ftadd@f1+2,f
  9371  0876  17D4               	bsf	___ftadd@f2+1,7
  9372  0877  30FF               	movlw	255
  9373  0878  05D3               	andwf	___ftadd@f2,f
  9374  0879  30FF               	movlw	255
  9375  087A  05D4               	andwf	___ftadd@f2+1,f
  9376  087B  3000               	movlw	0
  9377  087C  05D5               	andwf	___ftadd@f2+2,f
  9378  087D  085B               	movf	___ftadd@exp2,w
  9379  087E  025C               	subwf	___ftadd@exp1,w
  9380  087F  1803               	skipnc
  9381  0880  28A7               	goto	l2341
  9382  0881                     l2331:	
  9383  0881  3001               	movlw	1
  9384  0882                     u2775:	
  9385  0882  1003               	clrc
  9386  0883  0DD3               	rlf	___ftadd@f2,f
  9387  0884  0DD4               	rlf	___ftadd@f2+1,f
  9388  0885  0DD5               	rlf	___ftadd@f2+2,f
  9389  0886  3EFF               	addlw	-1
  9390  0887  1D03               	skipz
  9391  0888  2882               	goto	u2775
  9392  0889  3001               	movlw	1
  9393  088A  02DB               	subwf	___ftadd@exp2,f
  9394  088B  085B               	movf	___ftadd@exp2,w
  9395  088C  065C               	xorwf	___ftadd@exp1,w
  9396  088D  1903               	skipnz
  9397  088E  28A2               	goto	l2339
  9398  088F  3001               	movlw	1
  9399  0890  02DA               	subwf	___ftadd@sign,f
  9400  0891  085A               	movf	___ftadd@sign,w
  9401  0892  3907               	andlw	7
  9402  0893  1903               	btfsc	3,2
  9403  0894  28A2               	goto	l2339
  9404  0895  2881               	goto	l2331
  9405  0896                     l2337:	
  9406  0896  3001               	movlw	1
  9407  0897                     u2805:	
  9408  0897  1003               	clrc
  9409  0898  0CD2               	rrf	___ftadd@f1+2,f
  9410  0899  0CD1               	rrf	___ftadd@f1+1,f
  9411  089A  0CD0               	rrf	___ftadd@f1,f
  9412  089B  3EFF               	addlw	-1
  9413  089C  1D03               	skipz
  9414  089D  2897               	goto	u2805
  9415  089E  3001               	movlw	1
  9416  089F  00D6               	movwf	??___ftadd
  9417  08A0  0856               	movf	??___ftadd,w
  9418  08A1  07DC               	addwf	___ftadd@exp1,f
  9419  08A2                     l2339:	
  9420  08A2  085C               	movf	___ftadd@exp1,w
  9421  08A3  065B               	xorwf	___ftadd@exp2,w
  9422  08A4  1903               	btfsc	3,2
  9423  08A5  28D0               	goto	l513
  9424  08A6  2896               	goto	l2337
  9425  08A7                     l2341:	
  9426  08A7  085C               	movf	___ftadd@exp1,w
  9427  08A8  025B               	subwf	___ftadd@exp2,w
  9428  08A9  1803               	skipnc
  9429  08AA  28D0               	goto	l513
  9430  08AB                     l2343:	
  9431  08AB  3001               	movlw	1
  9432  08AC                     u2835:	
  9433  08AC  1003               	clrc
  9434  08AD  0DD0               	rlf	___ftadd@f1,f
  9435  08AE  0DD1               	rlf	___ftadd@f1+1,f
  9436  08AF  0DD2               	rlf	___ftadd@f1+2,f
  9437  08B0  3EFF               	addlw	-1
  9438  08B1  1D03               	skipz
  9439  08B2  28AC               	goto	u2835
  9440  08B3  3001               	movlw	1
  9441  08B4  02DC               	subwf	___ftadd@exp1,f
  9442  08B5  085B               	movf	___ftadd@exp2,w
  9443  08B6  065C               	xorwf	___ftadd@exp1,w
  9444  08B7  1903               	skipnz
  9445  08B8  28CC               	goto	l2351
  9446  08B9  3001               	movlw	1
  9447  08BA  02DA               	subwf	___ftadd@sign,f
  9448  08BB  085A               	movf	___ftadd@sign,w
  9449  08BC  3907               	andlw	7
  9450  08BD  1903               	btfsc	3,2
  9451  08BE  28CC               	goto	l2351
  9452  08BF  28AB               	goto	l2343
  9453  08C0                     l2349:	
  9454  08C0  3001               	movlw	1
  9455  08C1                     u2865:	
  9456  08C1  1003               	clrc
  9457  08C2  0CD5               	rrf	___ftadd@f2+2,f
  9458  08C3  0CD4               	rrf	___ftadd@f2+1,f
  9459  08C4  0CD3               	rrf	___ftadd@f2,f
  9460  08C5  3EFF               	addlw	-1
  9461  08C6  1D03               	skipz
  9462  08C7  28C1               	goto	u2865
  9463  08C8  3001               	movlw	1
  9464  08C9  00D6               	movwf	??___ftadd
  9465  08CA  0856               	movf	??___ftadd,w
  9466  08CB  07DB               	addwf	___ftadd@exp2,f
  9467  08CC                     l2351:	
  9468  08CC  085C               	movf	___ftadd@exp1,w
  9469  08CD  065B               	xorwf	___ftadd@exp2,w
  9470  08CE  1D03               	skipz
  9471  08CF  28C0               	goto	l2349
  9472  08D0                     l513:	
  9473  08D0  1FDA               	btfss	___ftadd@sign,7
  9474  08D1  28E2               	goto	l2355
  9475  08D2  30FF               	movlw	255
  9476  08D3  06D0               	xorwf	___ftadd@f1,f
  9477  08D4  30FF               	movlw	255
  9478  08D5  06D1               	xorwf	___ftadd@f1+1,f
  9479  08D6  30FF               	movlw	255
  9480  08D7  06D2               	xorwf	___ftadd@f1+2,f
  9481  08D8  3001               	movlw	1
  9482  08D9  07D0               	addwf	___ftadd@f1,f
  9483  08DA  3000               	movlw	0
  9484  08DB  1803               	skipnc
  9485  08DC  3001               	movlw	1
  9486  08DD  07D1               	addwf	___ftadd@f1+1,f
  9487  08DE  3000               	movlw	0
  9488  08DF  1803               	skipnc
  9489  08E0  3001               	movlw	1
  9490  08E1  07D2               	addwf	___ftadd@f1+2,f
  9491  08E2                     l2355:	
  9492  08E2  1F5A               	btfss	___ftadd@sign,6
  9493  08E3  28F4               	goto	l2359
  9494  08E4  30FF               	movlw	255
  9495  08E5  06D3               	xorwf	___ftadd@f2,f
  9496  08E6  30FF               	movlw	255
  9497  08E7  06D4               	xorwf	___ftadd@f2+1,f
  9498  08E8  30FF               	movlw	255
  9499  08E9  06D5               	xorwf	___ftadd@f2+2,f
  9500  08EA  3001               	movlw	1
  9501  08EB  07D3               	addwf	___ftadd@f2,f
  9502  08EC  3000               	movlw	0
  9503  08ED  1803               	skipnc
  9504  08EE  3001               	movlw	1
  9505  08EF  07D4               	addwf	___ftadd@f2+1,f
  9506  08F0  3000               	movlw	0
  9507  08F1  1803               	skipnc
  9508  08F2  3001               	movlw	1
  9509  08F3  07D5               	addwf	___ftadd@f2+2,f
  9510  08F4                     l2359:	
  9511  08F4  01DA               	clrf	___ftadd@sign
  9512  08F5  0850               	movf	___ftadd@f1,w
  9513  08F6  07D3               	addwf	___ftadd@f2,f
  9514  08F7  0851               	movf	___ftadd@f1+1,w
  9515  08F8  1103               	clrz
  9516  08F9  1803               	skipnc
  9517  08FA  0A51               	incf	___ftadd@f1+1,w
  9518  08FB  1D03               	btfss	3,2
  9519  08FC  07D4               	addwf	___ftadd@f2+1,f
  9520  08FD  0852               	movf	___ftadd@f1+2,w
  9521  08FE  1103               	clrz
  9522  08FF  1803               	skipnc
  9523  0900  0A52               	incf	___ftadd@f1+2,w
  9524  0901  1D03               	btfss	3,2
  9525  0902  07D5               	addwf	___ftadd@f2+2,f
  9526  0903  1FD5               	btfss	___ftadd@f2+2,7
  9527  0904  2917               	goto	l2369
  9528  0905  30FF               	movlw	255
  9529  0906  06D3               	xorwf	___ftadd@f2,f
  9530  0907  30FF               	movlw	255
  9531  0908  06D4               	xorwf	___ftadd@f2+1,f
  9532  0909  30FF               	movlw	255
  9533  090A  06D5               	xorwf	___ftadd@f2+2,f
  9534  090B  3001               	movlw	1
  9535  090C  07D3               	addwf	___ftadd@f2,f
  9536  090D  3000               	movlw	0
  9537  090E  1803               	skipnc
  9538  090F  3001               	movlw	1
  9539  0910  07D4               	addwf	___ftadd@f2+1,f
  9540  0911  3000               	movlw	0
  9541  0912  1803               	skipnc
  9542  0913  3001               	movlw	1
  9543  0914  07D5               	addwf	___ftadd@f2+2,f
  9544  0915  01DA               	clrf	___ftadd@sign
  9545  0916  0ADA               	incf	___ftadd@sign,f
  9546  0917                     l2369:	
  9547  0917  0853               	movf	___ftadd@f2,w
  9548  0918  00F0               	movwf	___ftpack@arg
  9549  0919  0854               	movf	___ftadd@f2+1,w
  9550  091A  00F1               	movwf	___ftpack@arg+1
  9551  091B  0855               	movf	___ftadd@f2+2,w
  9552  091C  00F2               	movwf	___ftpack@arg+2
  9553  091D  085C               	movf	___ftadd@exp1,w
  9554  091E  00D6               	movwf	??___ftadd
  9555  091F  0856               	movf	??___ftadd,w
  9556  0920  00F3               	movwf	___ftpack@exp
  9557  0921  085A               	movf	___ftadd@sign,w
  9558  0922  00D7               	movwf	??___ftadd+1
  9559  0923  0857               	movf	??___ftadd+1,w
  9560  0924  00F4               	movwf	___ftpack@sign
  9561  0925  160A  158A  2447   	fcall	___ftpack
  9562  0928  0870               	movf	?___ftpack,w
  9563  0929  1283               	bcf	3,5	;RP0=0, select bank0
  9564  092A  1303               	bcf	3,6	;RP1=0, select bank0
  9565  092B  00D0               	movwf	?___ftadd
  9566  092C  0871               	movf	?___ftpack+1,w
  9567  092D  00D1               	movwf	?___ftadd+1
  9568  092E  0872               	movf	?___ftpack+2,w
  9569  092F  00D2               	movwf	?___ftadd+2
  9570  0930  0008               	return
  9571  0931                     __end_of___ftadd:	
  9572                           
  9573                           	psect	text32
  9574  0003                     __ptext32:	
  9575 ;; *************** function ___ftneg *****************
  9576 ;; Defined at:
  9577 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftneg.c"
  9578 ;; Parameters:    Size  Location     Type
  9579 ;;  f1              3    0[COMMON] float 
  9580 ;; Auto vars:     Size  Location     Type
  9581 ;;		None
  9582 ;; Return value:  Size  Location     Type
  9583 ;;                  3    0[COMMON] float 
  9584 ;; Registers used:
  9585 ;;		wreg
  9586 ;; Tracked objects:
  9587 ;;		On entry : 0/0
  9588 ;;		On exit  : 0/0
  9589 ;;		Unchanged: 0/0
  9590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9591 ;;      Params:         3       0       0       0       0
  9592 ;;      Locals:         0       0       0       0       0
  9593 ;;      Temps:          0       0       0       0       0
  9594 ;;      Totals:         3       0       0       0       0
  9595 ;;Total ram usage:        3 bytes
  9596 ;; Hardware stack levels used:    1
  9597 ;; This function calls:
  9598 ;;		Nothing
  9599 ;; This function is called by:
  9600 ;;		_sprintf
  9601 ;;		_pow
  9602 ;;		_exp
  9603 ;;		_ldexp
  9604 ;; This function uses a non-reentrant model
  9605 ;;
  9606                           
  9607                           
  9608                           ;psect for function ___ftneg
  9609  0003                     ___ftneg:	
  9610                           
  9611                           ;incstack = 0
  9612                           ; Regs used in ___ftneg: [wreg]
  9613  0003  0872               	movf	___ftneg@f1+2,w
  9614  0004  0471               	iorwf	___ftneg@f1+1,w
  9615  0005  0470               	iorwf	___ftneg@f1,w
  9616  0006  1903               	skipnz
  9617  0007  0008               	return
  9618  0008  3080               	movlw	128
  9619  0009  06F2               	xorwf	___ftneg@f1+2,f
  9620  000A  0008               	return
  9621  000B                     __end_of___ftneg:	
  9622                           
  9623                           	psect	text33
  9624  1B2F                     __ptext33:	
  9625 ;; *************** function ___ftge *****************
  9626 ;; Defined at:
  9627 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftge.c"
  9628 ;; Parameters:    Size  Location     Type
  9629 ;;  ff1             3    0[COMMON] float 
  9630 ;;  ff2             3    3[COMMON] float 
  9631 ;; Auto vars:     Size  Location     Type
  9632 ;;		None
  9633 ;; Return value:  Size  Location     Type
  9634 ;;		None               void
  9635 ;; Registers used:
  9636 ;;		wreg, status,2, status,0
  9637 ;; Tracked objects:
  9638 ;;		On entry : 0/0
  9639 ;;		On exit  : 0/0
  9640 ;;		Unchanged: 0/0
  9641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9642 ;;      Params:         6       0       0       0       0
  9643 ;;      Locals:         0       0       0       0       0
  9644 ;;      Temps:          6       0       0       0       0
  9645 ;;      Totals:        12       0       0       0       0
  9646 ;;Total ram usage:       12 bytes
  9647 ;; Hardware stack levels used:    1
  9648 ;; This function calls:
  9649 ;;		Nothing
  9650 ;; This function is called by:
  9651 ;;		_sprintf
  9652 ;;		_pow
  9653 ;;		_exp
  9654 ;;		_floor
  9655 ;;		_ldexp
  9656 ;;		_log
  9657 ;; This function uses a non-reentrant model
  9658 ;;
  9659                           
  9660                           
  9661                           ;psect for function ___ftge
  9662  1B2F                     ___ftge:	
  9663                           
  9664                           ;incstack = 0
  9665                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  9666  1B2F  1FF2               	btfss	___ftge@ff1+2,7
  9667  1B30  2B56               	goto	l2377
  9668  1B31  3000               	movlw	0
  9669  1B32  00F6               	movwf	??___ftge
  9670  1B33  3000               	movlw	0
  9671  1B34  00F7               	movwf	??___ftge+1
  9672  1B35  3080               	movlw	128
  9673  1B36  00F8               	movwf	??___ftge+2
  9674  1B37  0970               	comf	___ftge@ff1,w
  9675  1B38  00F9               	movwf	??___ftge+3
  9676  1B39  0971               	comf	___ftge@ff1+1,w
  9677  1B3A  00FA               	movwf	??___ftge+4
  9678  1B3B  0972               	comf	___ftge@ff1+2,w
  9679  1B3C  00FB               	movwf	??___ftge+5
  9680  1B3D  0AF9               	incf	??___ftge+3,f
  9681  1B3E  1903               	skipnz
  9682  1B3F  0AFA               	incf	??___ftge+4,f
  9683  1B40  1903               	skipnz
  9684  1B41  0AFB               	incf	??___ftge+5,f
  9685  1B42  0879               	movf	??___ftge+3,w
  9686  1B43  07F6               	addwf	??___ftge,f
  9687  1B44  087A               	movf	??___ftge+4,w
  9688  1B45  1803               	skipnc
  9689  1B46  0F7A               	incfsz	??___ftge+4,w
  9690  1B47  2B49               	goto	u2931
  9691  1B48  2B4A               	goto	u2932
  9692  1B49                     u2931:	
  9693  1B49  07F7               	addwf	??___ftge+1,f
  9694  1B4A                     u2932:	
  9695  1B4A  087B               	movf	??___ftge+5,w
  9696  1B4B  1803               	skipnc
  9697  1B4C  0F7B               	incfsz	??___ftge+5,w
  9698  1B4D  2B4F               	goto	u2933
  9699  1B4E  2B50               	goto	u2934
  9700  1B4F                     u2933:	
  9701  1B4F  07F8               	addwf	??___ftge+2,f
  9702  1B50                     u2934:	
  9703  1B50  0876               	movf	??___ftge,w
  9704  1B51  00F0               	movwf	___ftge@ff1
  9705  1B52  0877               	movf	??___ftge+1,w
  9706  1B53  00F1               	movwf	___ftge@ff1+1
  9707  1B54  0878               	movf	??___ftge+2,w
  9708  1B55  00F2               	movwf	___ftge@ff1+2
  9709  1B56                     l2377:	
  9710  1B56  1FF5               	btfss	___ftge@ff2+2,7
  9711  1B57  2B7D               	goto	l2381
  9712  1B58  3000               	movlw	0
  9713  1B59  00F6               	movwf	??___ftge
  9714  1B5A  3000               	movlw	0
  9715  1B5B  00F7               	movwf	??___ftge+1
  9716  1B5C  3080               	movlw	128
  9717  1B5D  00F8               	movwf	??___ftge+2
  9718  1B5E  0973               	comf	___ftge@ff2,w
  9719  1B5F  00F9               	movwf	??___ftge+3
  9720  1B60  0974               	comf	___ftge@ff2+1,w
  9721  1B61  00FA               	movwf	??___ftge+4
  9722  1B62  0975               	comf	___ftge@ff2+2,w
  9723  1B63  00FB               	movwf	??___ftge+5
  9724  1B64  0AF9               	incf	??___ftge+3,f
  9725  1B65  1903               	skipnz
  9726  1B66  0AFA               	incf	??___ftge+4,f
  9727  1B67  1903               	skipnz
  9728  1B68  0AFB               	incf	??___ftge+5,f
  9729  1B69  0879               	movf	??___ftge+3,w
  9730  1B6A  07F6               	addwf	??___ftge,f
  9731  1B6B  087A               	movf	??___ftge+4,w
  9732  1B6C  1803               	skipnc
  9733  1B6D  0F7A               	incfsz	??___ftge+4,w
  9734  1B6E  2B70               	goto	u2951
  9735  1B6F  2B71               	goto	u2952
  9736  1B70                     u2951:	
  9737  1B70  07F7               	addwf	??___ftge+1,f
  9738  1B71                     u2952:	
  9739  1B71  087B               	movf	??___ftge+5,w
  9740  1B72  1803               	skipnc
  9741  1B73  0F7B               	incfsz	??___ftge+5,w
  9742  1B74  2B76               	goto	u2953
  9743  1B75  2B77               	goto	u2954
  9744  1B76                     u2953:	
  9745  1B76  07F8               	addwf	??___ftge+2,f
  9746  1B77                     u2954:	
  9747  1B77  0876               	movf	??___ftge,w
  9748  1B78  00F3               	movwf	___ftge@ff2
  9749  1B79  0877               	movf	??___ftge+1,w
  9750  1B7A  00F4               	movwf	___ftge@ff2+1
  9751  1B7B  0878               	movf	??___ftge+2,w
  9752  1B7C  00F5               	movwf	___ftge@ff2+2
  9753  1B7D                     l2381:	
  9754  1B7D  3080               	movlw	128
  9755  1B7E  06F2               	xorwf	___ftge@ff1+2,f
  9756  1B7F  3080               	movlw	128
  9757  1B80  06F5               	xorwf	___ftge@ff2+2,f
  9758  1B81  0875               	movf	___ftge@ff2+2,w
  9759  1B82  0272               	subwf	___ftge@ff1+2,w
  9760  1B83  1D03               	skipz
  9761  1B84  0008               	return
  9762  1B85  0874               	movf	___ftge@ff2+1,w
  9763  1B86  0271               	subwf	___ftge@ff1+1,w
  9764  1B87  1D03               	skipz
  9765  1B88  0008               	return
  9766  1B89  0873               	movf	___ftge@ff2,w
  9767  1B8A  0270               	subwf	___ftge@ff1,w
  9768  1B8B  0008               	return
  9769  1B8C                     __end_of___ftge:	
  9770                           
  9771                           	psect	text34
  9772  1946                     __ptext34:	
  9773 ;; *************** function _instCtrl *****************
  9774 ;; Defined at:
  9775 ;;		line 111 in file "D:\From old laptop\Subjects\Uni\3rd Year M\2nd sem\Embedded Systems\Practical Activities\Practical
      + Activity #7\To Submit\LE7-3.c"
  9776 ;; Parameters:    Size  Location     Type
  9777 ;;  INST            1    wreg     unsigned char 
  9778 ;; Auto vars:     Size  Location     Type
  9779 ;;  INST            1    6[COMMON] unsigned char 
  9780 ;; Return value:  Size  Location     Type
  9781 ;;		None               void
  9782 ;; Registers used:
  9783 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  9784 ;; Tracked objects:
  9785 ;;		On entry : 0/0
  9786 ;;		On exit  : 0/0
  9787 ;;		Unchanged: 0/0
  9788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9789 ;;      Params:         0       0       0       0       0
  9790 ;;      Locals:         1       0       0       0       0
  9791 ;;      Temps:          0       0       0       0       0
  9792 ;;      Totals:         1       0       0       0       0
  9793 ;;Total ram usage:        1 bytes
  9794 ;; Hardware stack levels used:    1
  9795 ;; Hardware stack levels required when called:    1
  9796 ;; This function calls:
  9797 ;;		_delay_ms
  9798 ;; This function is called by:
  9799 ;;		_initLCD
  9800 ;;		_dispRH
  9801 ;;		_dispT
  9802 ;; This function uses a non-reentrant model
  9803 ;;
  9804                           
  9805                           
  9806                           ;psect for function _instCtrl
  9807  1946                     _instCtrl:	
  9808                           
  9809                           ;incstack = 0
  9810                           ; Regs used in _instCtrl: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  9811                           ;instCtrl@INST stored from wreg
  9812  1946  00F6               	movwf	instCtrl@INST
  9813                           
  9814                           ;LE7-3.c: 112: PORTB = INST;
  9815  1947  0876               	movf	instCtrl@INST,w
  9816  1948  1283               	bcf	3,5	;RP0=0, select bank0
  9817  1949  1303               	bcf	3,6	;RP1=0, select bank0
  9818  194A  0086               	movwf	6	;volatile
  9819                           
  9820                           ;LE7-3.c: 113: RD0 = 0;
  9821  194B  1008               	bcf	8,0	;volatile
  9822                           
  9823                           ;LE7-3.c: 114: RD1 = 1;
  9824  194C  1488               	bsf	8,1	;volatile
  9825                           
  9826                           ;LE7-3.c: 115: delay_ms(1);
  9827  194D  3001               	movlw	1
  9828  194E  00F0               	movwf	delay_ms@cnt
  9829  194F  3000               	movlw	0
  9830  1950  00F1               	movwf	delay_ms@cnt+1
  9831  1951  120A  158A  2000   	fcall	_delay_ms
  9832                           
  9833                           ;LE7-3.c: 116: RD1 = 0;
  9834  1954  1283               	bcf	3,5	;RP0=0, select bank0
  9835  1955  1303               	bcf	3,6	;RP1=0, select bank0
  9836  1956  1088               	bcf	8,1	;volatile
  9837  1957  0008               	return
  9838  1958                     __end_of_instCtrl:	
  9839                           
  9840                           	psect	text35
  9841  1934                     __ptext35:	
  9842 ;; *************** function _dataCtrl *****************
  9843 ;; Defined at:
  9844 ;;		line 126 in file "D:\From old laptop\Subjects\Uni\3rd Year M\2nd sem\Embedded Systems\Practical Activities\Practical
      + Activity #7\To Submit\LE7-3.c"
  9845 ;; Parameters:    Size  Location     Type
  9846 ;;  DATA            1    wreg     unsigned char 
  9847 ;; Auto vars:     Size  Location     Type
  9848 ;;  DATA            1    6[COMMON] unsigned char 
  9849 ;; Return value:  Size  Location     Type
  9850 ;;		None               void
  9851 ;; Registers used:
  9852 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  9853 ;; Tracked objects:
  9854 ;;		On entry : 0/0
  9855 ;;		On exit  : 0/0
  9856 ;;		Unchanged: 0/0
  9857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9858 ;;      Params:         0       0       0       0       0
  9859 ;;      Locals:         1       0       0       0       0
  9860 ;;      Temps:          0       0       0       0       0
  9861 ;;      Totals:         1       0       0       0       0
  9862 ;;Total ram usage:        1 bytes
  9863 ;; Hardware stack levels used:    1
  9864 ;; Hardware stack levels required when called:    1
  9865 ;; This function calls:
  9866 ;;		_delay_ms
  9867 ;; This function is called by:
  9868 ;;		_dispRH
  9869 ;;		_dispT
  9870 ;; This function uses a non-reentrant model
  9871 ;;
  9872                           
  9873                           
  9874                           ;psect for function _dataCtrl
  9875  1934                     _dataCtrl:	
  9876                           
  9877                           ;incstack = 0
  9878                           ; Regs used in _dataCtrl: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  9879                           ;dataCtrl@DATA stored from wreg
  9880  1934  00F6               	movwf	dataCtrl@DATA
  9881                           
  9882                           ;LE7-3.c: 127: PORTB = DATA;
  9883  1935  0876               	movf	dataCtrl@DATA,w
  9884  1936  1283               	bcf	3,5	;RP0=0, select bank0
  9885  1937  1303               	bcf	3,6	;RP1=0, select bank0
  9886  1938  0086               	movwf	6	;volatile
  9887                           
  9888                           ;LE7-3.c: 128: RD0 = 1;
  9889  1939  1408               	bsf	8,0	;volatile
  9890                           
  9891                           ;LE7-3.c: 129: RD1 = 1;
  9892  193A  1488               	bsf	8,1	;volatile
  9893                           
  9894                           ;LE7-3.c: 130: delay_ms(5);
  9895  193B  3005               	movlw	5
  9896  193C  00F0               	movwf	delay_ms@cnt
  9897  193D  3000               	movlw	0
  9898  193E  00F1               	movwf	delay_ms@cnt+1
  9899  193F  120A  158A  2000   	fcall	_delay_ms
  9900                           
  9901                           ;LE7-3.c: 131: RD1 = 0;
  9902  1942  1283               	bcf	3,5	;RP0=0, select bank0
  9903  1943  1303               	bcf	3,6	;RP1=0, select bank0
  9904  1944  1088               	bcf	8,1	;volatile
  9905  1945  0008               	return
  9906  1946                     __end_of_dataCtrl:	
  9907                           
  9908                           	psect	text36
  9909  0800                     __ptext36:	
  9910 ;; *************** function _delay_ms *****************
  9911 ;; Defined at:
  9912 ;;		line 103 in file "D:\From old laptop\Subjects\Uni\3rd Year M\2nd sem\Embedded Systems\Practical Activities\Practical
      + Activity #7\To Submit\LE7-3.c"
  9913 ;; Parameters:    Size  Location     Type
  9914 ;;  cnt             2    0[COMMON] int 
  9915 ;; Auto vars:     Size  Location     Type
  9916 ;;  j               2    4[COMMON] int 
  9917 ;;  i               2    2[COMMON] int 
  9918 ;; Return value:  Size  Location     Type
  9919 ;;		None               void
  9920 ;; Registers used:
  9921 ;;		wreg, status,2, status,0, btemp+1
  9922 ;; Tracked objects:
  9923 ;;		On entry : 0/0
  9924 ;;		On exit  : 0/0
  9925 ;;		Unchanged: 0/0
  9926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9927 ;;      Params:         2       0       0       0       0
  9928 ;;      Locals:         4       0       0       0       0
  9929 ;;      Temps:          0       0       0       0       0
  9930 ;;      Totals:         6       0       0       0       0
  9931 ;;Total ram usage:        6 bytes
  9932 ;; Hardware stack levels used:    1
  9933 ;; This function calls:
  9934 ;;		Nothing
  9935 ;; This function is called by:
  9936 ;;		_main
  9937 ;;		_instCtrl
  9938 ;;		_initLCD
  9939 ;;		_dataCtrl
  9940 ;; This function uses a non-reentrant model
  9941 ;;
  9942                           
  9943                           
  9944                           ;psect for function _delay_ms
  9945  0800                     _delay_ms:	
  9946                           
  9947                           ;LE7-3.c: 104: int i, j;
  9948                           ;LE7-3.c: 105: for (i = cnt; i != 0; i--);
  9949                           
  9950                           ;incstack = 0
  9951                           ; Regs used in _delay_ms: [wreg+status,2+status,0+btemp+1]
  9952  0800  0871               	movf	delay_ms@cnt+1,w
  9953  0801  01F3               	clrf	delay_ms@i+1
  9954  0802  07F3               	addwf	delay_ms@i+1,f
  9955  0803  0870               	movf	delay_ms@cnt,w
  9956  0804  01F2               	clrf	delay_ms@i
  9957  0805  07F2               	addwf	delay_ms@i,f
  9958  0806  0873               	movf	delay_ms@i+1,w
  9959  0807  0472               	iorwf	delay_ms@i,w
  9960  0808  1903               	btfsc	3,2
  9961  0809  2814               	goto	l2525
  9962  080A                     l2521:	
  9963  080A  30FF               	movlw	255
  9964  080B  07F2               	addwf	delay_ms@i,f
  9965  080C  1803               	skipnc
  9966  080D  0AF3               	incf	delay_ms@i+1,f
  9967  080E  30FF               	movlw	255
  9968  080F  07F3               	addwf	delay_ms@i+1,f
  9969  0810  0873               	movf	delay_ms@i+1,w
  9970  0811  0472               	iorwf	delay_ms@i,w
  9971  0812  1D03               	skipz
  9972  0813  280A               	goto	l2521
  9973  0814                     l2525:	
  9974                           
  9975                           ;LE7-3.c: 106: for (j = 0; j < 5000; j++);
  9976  0814  01F4               	clrf	delay_ms@j
  9977  0815  01F5               	clrf	delay_ms@j+1
  9978  0816                     L10:	
  9979  0816  0875               	movf	delay_ms@j+1,w
  9980  0817  3A80               	xorlw	128
  9981  0818  00FF               	movwf	127
  9982  0819  3093               	movlw	147
  9983  081A  027F               	subwf	127,w
  9984  081B  1D03               	skipz
  9985  081C  281F               	goto	u3255
  9986  081D  3088               	movlw	136
  9987  081E  0274               	subwf	delay_ms@j,w
  9988  081F                     u3255:	
  9989  081F  1803               	btfsc	3,0
  9990  0820  0008               	return
  9991  0821  3001               	movlw	1
  9992  0822  07F4               	addwf	delay_ms@j,f
  9993  0823  1803               	skipnc
  9994  0824  0AF5               	incf	delay_ms@j+1,f
  9995  0825  3000               	movlw	0
  9996  0826  07F5               	addwf	delay_ms@j+1,f
  9997  0827  2816               	goto	L10
  9998  0828                     __end_of_delay_ms:	
  9999                           
 10000                           	psect	text37
 10001  1958                     __ptext37:	
 10002 ;; *************** function ___lwtoft *****************
 10003 ;; Defined at:
 10004 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwtoft.c"
 10005 ;; Parameters:    Size  Location     Type
 10006 ;;  c               2    8[COMMON] unsigned int 
 10007 ;; Auto vars:     Size  Location     Type
 10008 ;;		None
 10009 ;; Return value:  Size  Location     Type
 10010 ;;                  3    8[COMMON] float 
 10011 ;; Registers used:
 10012 ;;		wreg, status,2, status,0, pclath, cstack
 10013 ;; Tracked objects:
 10014 ;;		On entry : 0/0
 10015 ;;		On exit  : 0/0
 10016 ;;		Unchanged: 0/0
 10017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10018 ;;      Params:         3       0       0       0       0
 10019 ;;      Locals:         0       0       0       0       0
 10020 ;;      Temps:          1       0       0       0       0
 10021 ;;      Totals:         4       0       0       0       0
 10022 ;;Total ram usage:        4 bytes
 10023 ;; Hardware stack levels used:    1
 10024 ;; Hardware stack levels required when called:    1
 10025 ;; This function calls:
 10026 ;;		___ftpack
 10027 ;; This function is called by:
 10028 ;;		_main
 10029 ;; This function uses a non-reentrant model
 10030 ;;
 10031                           
 10032                           
 10033                           ;psect for function ___lwtoft
 10034  1958                     ___lwtoft:	
 10035                           
 10036                           ;incstack = 0
 10037                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
 10038  1958  0878               	movf	___lwtoft@c,w
 10039  1959  00F0               	movwf	___ftpack@arg
 10040  195A  0879               	movf	___lwtoft@c+1,w
 10041  195B  00F1               	movwf	___ftpack@arg+1
 10042  195C  01F2               	clrf	___ftpack@arg+2
 10043  195D  308E               	movlw	142
 10044  195E  00FB               	movwf	??___lwtoft
 10045  195F  087B               	movf	??___lwtoft,w
 10046  1960  00F3               	movwf	___ftpack@exp
 10047  1961  01F4               	clrf	___ftpack@sign
 10048  1962  160A  158A  2447   	fcall	___ftpack
 10049  1965  0870               	movf	?___ftpack,w
 10050  1966  00F8               	movwf	?___lwtoft
 10051  1967  0871               	movf	?___ftpack+1,w
 10052  1968  00F9               	movwf	?___lwtoft+1
 10053  1969  0872               	movf	?___ftpack+2,w
 10054  196A  00FA               	movwf	?___lwtoft+2
 10055  196B  0008               	return
 10056  196C                     __end_of___lwtoft:	
 10057                           
 10058                           	psect	text38
 10059  1C47                     __ptext38:	
 10060 ;; *************** function ___ftpack *****************
 10061 ;; Defined at:
 10062 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\float.c"
 10063 ;; Parameters:    Size  Location     Type
 10064 ;;  arg             3    0[COMMON] unsigned um
 10065 ;;  exp             1    3[COMMON] unsigned char 
 10066 ;;  sign            1    4[COMMON] unsigned char 
 10067 ;; Auto vars:     Size  Location     Type
 10068 ;;		None
 10069 ;; Return value:  Size  Location     Type
 10070 ;;                  3    0[COMMON] float 
 10071 ;; Registers used:
 10072 ;;		wreg, status,2, status,0
 10073 ;; Tracked objects:
 10074 ;;		On entry : 0/0
 10075 ;;		On exit  : 0/0
 10076 ;;		Unchanged: 0/0
 10077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10078 ;;      Params:         5       0       0       0       0
 10079 ;;      Locals:         0       0       0       0       0
 10080 ;;      Temps:          3       0       0       0       0
 10081 ;;      Totals:         8       0       0       0       0
 10082 ;;Total ram usage:        8 bytes
 10083 ;; Hardware stack levels used:    1
 10084 ;; This function calls:
 10085 ;;		Nothing
 10086 ;; This function is called by:
 10087 ;;		___altoft
 10088 ;;		___awtoft
 10089 ;;		___ftadd
 10090 ;;		___ftdiv
 10091 ;;		___ftmul
 10092 ;;		___lltoft
 10093 ;;		___lwtoft
 10094 ;; This function uses a non-reentrant model
 10095 ;;
 10096                           
 10097                           
 10098                           ;psect for function ___ftpack
 10099  1C47                     ___ftpack:	
 10100                           
 10101                           ;incstack = 0
 10102                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 10103  1C47  0873               	movf	___ftpack@exp,w
 10104  1C48  1903               	btfsc	3,2
 10105  1C49  2C4F               	goto	l2161
 10106  1C4A  0872               	movf	___ftpack@arg+2,w
 10107  1C4B  0471               	iorwf	___ftpack@arg+1,w
 10108  1C4C  0470               	iorwf	___ftpack@arg,w
 10109  1C4D  1D03               	skipz
 10110  1C4E  2C62               	goto	l2167
 10111  1C4F                     l2161:	
 10112  1C4F  3000               	movlw	0
 10113  1C50  00F0               	movwf	?___ftpack
 10114  1C51  3000               	movlw	0
 10115  1C52  00F1               	movwf	?___ftpack+1
 10116  1C53  3000               	movlw	0
 10117  1C54  00F2               	movwf	?___ftpack+2
 10118  1C55  0008               	return
 10119  1C56                     l2165:	
 10120  1C56  3001               	movlw	1
 10121  1C57  00F5               	movwf	??___ftpack
 10122  1C58  0875               	movf	??___ftpack,w
 10123  1C59  07F3               	addwf	___ftpack@exp,f
 10124  1C5A  3001               	movlw	1
 10125  1C5B                     u2355:	
 10126  1C5B  1003               	clrc
 10127  1C5C  0CF2               	rrf	___ftpack@arg+2,f
 10128  1C5D  0CF1               	rrf	___ftpack@arg+1,f
 10129  1C5E  0CF0               	rrf	___ftpack@arg,f
 10130  1C5F  3EFF               	addlw	-1
 10131  1C60  1D03               	skipz
 10132  1C61  2C5B               	goto	u2355
 10133  1C62                     l2167:	
 10134  1C62  30FE               	movlw	254
 10135  1C63  0572               	andwf	___ftpack@arg+2,w
 10136  1C64  1903               	btfsc	3,2
 10137  1C65  2C7D               	goto	l484
 10138  1C66  2C56               	goto	l2165
 10139  1C67                     l2169:	
 10140  1C67  3001               	movlw	1
 10141  1C68  00F5               	movwf	??___ftpack
 10142  1C69  0875               	movf	??___ftpack,w
 10143  1C6A  07F3               	addwf	___ftpack@exp,f
 10144  1C6B  3001               	movlw	1
 10145  1C6C  07F0               	addwf	___ftpack@arg,f
 10146  1C6D  3000               	movlw	0
 10147  1C6E  1803               	skipnc
 10148  1C6F  3001               	movlw	1
 10149  1C70  07F1               	addwf	___ftpack@arg+1,f
 10150  1C71  3000               	movlw	0
 10151  1C72  1803               	skipnc
 10152  1C73  3001               	movlw	1
 10153  1C74  07F2               	addwf	___ftpack@arg+2,f
 10154  1C75  3001               	movlw	1
 10155  1C76                     u2375:	
 10156  1C76  1003               	clrc
 10157  1C77  0CF2               	rrf	___ftpack@arg+2,f
 10158  1C78  0CF1               	rrf	___ftpack@arg+1,f
 10159  1C79  0CF0               	rrf	___ftpack@arg,f
 10160  1C7A  3EFF               	addlw	-1
 10161  1C7B  1D03               	skipz
 10162  1C7C  2C76               	goto	u2375
 10163  1C7D                     l484:	
 10164  1C7D  30FF               	movlw	255
 10165  1C7E  0572               	andwf	___ftpack@arg+2,w
 10166  1C7F  1903               	btfsc	3,2
 10167  1C80  2C8C               	goto	l2177
 10168  1C81  2C67               	goto	l2169
 10169  1C82                     l2175:	
 10170  1C82  3001               	movlw	1
 10171  1C83  02F3               	subwf	___ftpack@exp,f
 10172  1C84  3001               	movlw	1
 10173  1C85                     u2395:	
 10174  1C85  1003               	clrc
 10175  1C86  0DF0               	rlf	___ftpack@arg,f
 10176  1C87  0DF1               	rlf	___ftpack@arg+1,f
 10177  1C88  0DF2               	rlf	___ftpack@arg+2,f
 10178  1C89  3EFF               	addlw	-1
 10179  1C8A  1D03               	skipz
 10180  1C8B  2C85               	goto	u2395
 10181  1C8C                     l2177:	
 10182  1C8C  1FF1               	btfss	___ftpack@arg+1,7
 10183  1C8D  2C82               	goto	l2175
 10184  1C8E  1873               	btfsc	___ftpack@exp,0
 10185  1C8F  2C96               	goto	l490
 10186  1C90  30FF               	movlw	255
 10187  1C91  05F0               	andwf	___ftpack@arg,f
 10188  1C92  307F               	movlw	127
 10189  1C93  05F1               	andwf	___ftpack@arg+1,f
 10190  1C94  30FF               	movlw	255
 10191  1C95  05F2               	andwf	___ftpack@arg+2,f
 10192  1C96                     l490:	
 10193  1C96  1003               	clrc
 10194  1C97  0CF3               	rrf	___ftpack@exp,f
 10195  1C98  0873               	movf	___ftpack@exp,w
 10196  1C99  00F5               	movwf	??___ftpack
 10197  1C9A  01F6               	clrf	??___ftpack+1
 10198  1C9B  01F7               	clrf	??___ftpack+2
 10199  1C9C  3010               	movlw	16
 10200  1C9D                     u2425:	
 10201  1C9D  1003               	clrc
 10202  1C9E  0DF5               	rlf	??___ftpack,f
 10203  1C9F  0DF6               	rlf	??___ftpack+1,f
 10204  1CA0  0DF7               	rlf	??___ftpack+2,f
 10205  1CA1  3EFF               	addlw	-1
 10206  1CA2  1D03               	skipz
 10207  1CA3  2C9D               	goto	u2425
 10208  1CA4  0875               	movf	??___ftpack,w
 10209  1CA5  04F0               	iorwf	___ftpack@arg,f
 10210  1CA6  0876               	movf	??___ftpack+1,w
 10211  1CA7  04F1               	iorwf	___ftpack@arg+1,f
 10212  1CA8  0877               	movf	??___ftpack+2,w
 10213  1CA9  04F2               	iorwf	___ftpack@arg+2,f
 10214  1CAA  0874               	movf	___ftpack@sign,w
 10215  1CAB  1903               	btfsc	3,2
 10216  1CAC  0008               	return
 10217  1CAD  17F2               	bsf	___ftpack@arg+2,7
 10218  1CAE  0008               	return
 10219  1CAF                     __end_of___ftpack:	
 10220                           
 10221                           	psect	text39
 10222  18FF                     __ptext39:	
 10223 ;; *************** function _I2C_Stop *****************
 10224 ;; Defined at:
 10225 ;;		line 209 in file "D:\From old laptop\Subjects\Uni\3rd Year M\2nd sem\Embedded Systems\Practical Activities\Practical
      + Activity #7\To Submit\LE7-3.c"
 10226 ;; Parameters:    Size  Location     Type
 10227 ;;		None
 10228 ;; Auto vars:     Size  Location     Type
 10229 ;;		None
 10230 ;; Return value:  Size  Location     Type
 10231 ;;		None               void
 10232 ;; Registers used:
 10233 ;;		wreg, status,2, status,0, pclath, cstack
 10234 ;; Tracked objects:
 10235 ;;		On entry : 0/0
 10236 ;;		On exit  : 0/0
 10237 ;;		Unchanged: 0/0
 10238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10239 ;;      Params:         0       0       0       0       0
 10240 ;;      Locals:         0       0       0       0       0
 10241 ;;      Temps:          0       0       0       0       0
 10242 ;;      Totals:         0       0       0       0       0
 10243 ;;Total ram usage:        0 bytes
 10244 ;; Hardware stack levels used:    1
 10245 ;; Hardware stack levels required when called:    1
 10246 ;; This function calls:
 10247 ;;		_I2C_Wait
 10248 ;; This function is called by:
 10249 ;;		_main
 10250 ;; This function uses a non-reentrant model
 10251 ;;
 10252                           
 10253                           
 10254                           ;psect for function _I2C_Stop
 10255  18FF                     _I2C_Stop:	
 10256                           
 10257                           ;LE7-3.c: 211: I2C_Wait();
 10258                           
 10259                           ;incstack = 0
 10260                           ; Regs used in _I2C_Stop: [wreg+status,2+status,0+pclath+cstack]
 10261  18FF  160A  158A  2106   	fcall	_I2C_Wait
 10262                           
 10263                           ;LE7-3.c: 213: PEN = 1;
 10264  1902  1683               	bsf	3,5	;RP0=1, select bank1
 10265  1903  1303               	bcf	3,6	;RP1=0, select bank1
 10266  1904  1511               	bsf	17,2	;volatile
 10267  1905  0008               	return
 10268  1906                     __end_of_I2C_Stop:	
 10269                           
 10270                           	psect	text40
 10271  18F8                     __ptext40:	
 10272 ;; *************** function _I2C_Start *****************
 10273 ;; Defined at:
 10274 ;;		line 202 in file "D:\From old laptop\Subjects\Uni\3rd Year M\2nd sem\Embedded Systems\Practical Activities\Practical
      + Activity #7\To Submit\LE7-3.c"
 10275 ;; Parameters:    Size  Location     Type
 10276 ;;		None
 10277 ;; Auto vars:     Size  Location     Type
 10278 ;;		None
 10279 ;; Return value:  Size  Location     Type
 10280 ;;		None               void
 10281 ;; Registers used:
 10282 ;;		wreg, status,2, status,0, pclath, cstack
 10283 ;; Tracked objects:
 10284 ;;		On entry : 0/0
 10285 ;;		On exit  : 0/0
 10286 ;;		Unchanged: 0/0
 10287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10288 ;;      Params:         0       0       0       0       0
 10289 ;;      Locals:         0       0       0       0       0
 10290 ;;      Temps:          0       0       0       0       0
 10291 ;;      Totals:         0       0       0       0       0
 10292 ;;Total ram usage:        0 bytes
 10293 ;; Hardware stack levels used:    1
 10294 ;; Hardware stack levels required when called:    1
 10295 ;; This function calls:
 10296 ;;		_I2C_Wait
 10297 ;; This function is called by:
 10298 ;;		_main
 10299 ;; This function uses a non-reentrant model
 10300 ;;
 10301                           
 10302                           
 10303                           ;psect for function _I2C_Start
 10304  18F8                     _I2C_Start:	
 10305                           
 10306                           ;LE7-3.c: 204: I2C_Wait();
 10307                           
 10308                           ;incstack = 0
 10309                           ; Regs used in _I2C_Start: [wreg+status,2+status,0+pclath+cstack]
 10310  18F8  160A  158A  2106   	fcall	_I2C_Wait
 10311                           
 10312                           ;LE7-3.c: 206: SEN = 1;
 10313  18FB  1683               	bsf	3,5	;RP0=1, select bank1
 10314  18FC  1303               	bcf	3,6	;RP1=0, select bank1
 10315  18FD  1411               	bsf	17,0	;volatile
 10316  18FE  0008               	return
 10317  18FF                     __end_of_I2C_Start:	
 10318                           
 10319                           	psect	text41
 10320  190E                     __ptext41:	
 10321 ;; *************** function _I2C_Send *****************
 10322 ;; Defined at:
 10323 ;;		line 223 in file "D:\From old laptop\Subjects\Uni\3rd Year M\2nd sem\Embedded Systems\Practical Activities\Practical
      + Activity #7\To Submit\LE7-3.c"
 10324 ;; Parameters:    Size  Location     Type
 10325 ;;  data            1    wreg     unsigned char 
 10326 ;; Auto vars:     Size  Location     Type
 10327 ;;  data            1    0[COMMON] unsigned char 
 10328 ;; Return value:  Size  Location     Type
 10329 ;;		None               void
 10330 ;; Registers used:
 10331 ;;		wreg, status,2, status,0, pclath, cstack
 10332 ;; Tracked objects:
 10333 ;;		On entry : 0/0
 10334 ;;		On exit  : 0/0
 10335 ;;		Unchanged: 0/0
 10336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10337 ;;      Params:         0       0       0       0       0
 10338 ;;      Locals:         1       0       0       0       0
 10339 ;;      Temps:          0       0       0       0       0
 10340 ;;      Totals:         1       0       0       0       0
 10341 ;;Total ram usage:        1 bytes
 10342 ;; Hardware stack levels used:    1
 10343 ;; Hardware stack levels required when called:    1
 10344 ;; This function calls:
 10345 ;;		_I2C_Wait
 10346 ;; This function is called by:
 10347 ;;		_main
 10348 ;; This function uses a non-reentrant model
 10349 ;;
 10350                           
 10351                           
 10352                           ;psect for function _I2C_Send
 10353  190E                     _I2C_Send:	
 10354                           
 10355                           ;incstack = 0
 10356                           ; Regs used in _I2C_Send: [wreg+status,2+status,0+pclath+cstack]
 10357                           ;I2C_Send@data stored from wreg
 10358  190E  00F0               	movwf	I2C_Send@data
 10359                           
 10360                           ;LE7-3.c: 225: I2C_Wait();
 10361  190F  160A  158A  2106   	fcall	_I2C_Wait
 10362                           
 10363                           ;LE7-3.c: 227: SSPBUF = data;
 10364  1912  0870               	movf	I2C_Send@data,w
 10365  1913  1283               	bcf	3,5	;RP0=0, select bank0
 10366  1914  1303               	bcf	3,6	;RP1=0, select bank0
 10367  1915  0093               	movwf	19	;volatile
 10368  1916  0008               	return
 10369  1917                     __end_of_I2C_Send:	
 10370                           
 10371                           	psect	text42
 10372  18F1                     __ptext42:	
 10373 ;; *************** function _I2C_RepeatedStart *****************
 10374 ;; Defined at:
 10375 ;;		line 216 in file "D:\From old laptop\Subjects\Uni\3rd Year M\2nd sem\Embedded Systems\Practical Activities\Practical
      + Activity #7\To Submit\LE7-3.c"
 10376 ;; Parameters:    Size  Location     Type
 10377 ;;		None
 10378 ;; Auto vars:     Size  Location     Type
 10379 ;;		None
 10380 ;; Return value:  Size  Location     Type
 10381 ;;		None               void
 10382 ;; Registers used:
 10383 ;;		wreg, status,2, status,0, pclath, cstack
 10384 ;; Tracked objects:
 10385 ;;		On entry : 0/0
 10386 ;;		On exit  : 0/0
 10387 ;;		Unchanged: 0/0
 10388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10389 ;;      Params:         0       0       0       0       0
 10390 ;;      Locals:         0       0       0       0       0
 10391 ;;      Temps:          0       0       0       0       0
 10392 ;;      Totals:         0       0       0       0       0
 10393 ;;Total ram usage:        0 bytes
 10394 ;; Hardware stack levels used:    1
 10395 ;; Hardware stack levels required when called:    1
 10396 ;; This function calls:
 10397 ;;		_I2C_Wait
 10398 ;; This function is called by:
 10399 ;;		_main
 10400 ;; This function uses a non-reentrant model
 10401 ;;
 10402                           
 10403                           
 10404                           ;psect for function _I2C_RepeatedStart
 10405  18F1                     _I2C_RepeatedStart:	
 10406                           
 10407                           ;LE7-3.c: 218: I2C_Wait();
 10408                           
 10409                           ;incstack = 0
 10410                           ; Regs used in _I2C_RepeatedStart: [wreg+status,2+status,0+pclath+cstack]
 10411  18F1  160A  158A  2106   	fcall	_I2C_Wait
 10412                           
 10413                           ;LE7-3.c: 220: RSEN = 1;
 10414  18F4  1683               	bsf	3,5	;RP0=1, select bank1
 10415  18F5  1303               	bcf	3,6	;RP1=0, select bank1
 10416  18F6  1491               	bsf	17,1	;volatile
 10417  18F7  0008               	return
 10418  18F8                     __end_of_I2C_RepeatedStart:	
 10419                           
 10420                           	psect	text43
 10421  19EC                     __ptext43:	
 10422 ;; *************** function _I2C_Receive *****************
 10423 ;; Defined at:
 10424 ;;		line 230 in file "D:\From old laptop\Subjects\Uni\3rd Year M\2nd sem\Embedded Systems\Practical Activities\Practical
      + Activity #7\To Submit\LE7-3.c"
 10425 ;; Parameters:    Size  Location     Type
 10426 ;;  ack             1    wreg     unsigned char 
 10427 ;; Auto vars:     Size  Location     Type
 10428 ;;  ack             1    1[COMMON] unsigned char 
 10429 ;;  temp            1    2[COMMON] unsigned char 
 10430 ;; Return value:  Size  Location     Type
 10431 ;;                  1    wreg      unsigned char 
 10432 ;; Registers used:
 10433 ;;		wreg, status,2, status,0, pclath, cstack
 10434 ;; Tracked objects:
 10435 ;;		On entry : 0/0
 10436 ;;		On exit  : 0/0
 10437 ;;		Unchanged: 0/0
 10438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10439 ;;      Params:         0       0       0       0       0
 10440 ;;      Locals:         2       0       0       0       0
 10441 ;;      Temps:          1       0       0       0       0
 10442 ;;      Totals:         3       0       0       0       0
 10443 ;;Total ram usage:        3 bytes
 10444 ;; Hardware stack levels used:    1
 10445 ;; Hardware stack levels required when called:    1
 10446 ;; This function calls:
 10447 ;;		_I2C_Wait
 10448 ;; This function is called by:
 10449 ;;		_main
 10450 ;; This function uses a non-reentrant model
 10451 ;;
 10452                           
 10453                           
 10454                           ;psect for function _I2C_Receive
 10455  19EC                     _I2C_Receive:	
 10456                           
 10457                           ;incstack = 0
 10458                           ; Regs used in _I2C_Receive: [wreg+status,2+status,0+pclath+cstack]
 10459                           ;I2C_Receive@ack stored from wreg
 10460  19EC  00F1               	movwf	I2C_Receive@ack
 10461                           
 10462                           ;LE7-3.c: 231: unsigned char temp;
 10463                           ;LE7-3.c: 232: I2C_Wait();
 10464  19ED  160A  158A  2106  160A  158A  	fcall	_I2C_Wait
 10465                           
 10466                           ;LE7-3.c: 233: RCEN = 1;
 10467  19F2  1683               	bsf	3,5	;RP0=1, select bank1
 10468  19F3  1303               	bcf	3,6	;RP1=0, select bank1
 10469  19F4  1591               	bsf	17,3	;volatile
 10470                           
 10471                           ;LE7-3.c: 234: I2C_Wait();
 10472  19F5  160A  158A  2106  160A  158A  	fcall	_I2C_Wait
 10473                           
 10474                           ;LE7-3.c: 235: temp = SSPBUF;
 10475  19FA  1283               	bcf	3,5	;RP0=0, select bank0
 10476  19FB  1303               	bcf	3,6	;RP1=0, select bank0
 10477  19FC  0813               	movf	19,w	;volatile
 10478  19FD  00F0               	movwf	??_I2C_Receive
 10479  19FE  0870               	movf	??_I2C_Receive,w
 10480  19FF  00F2               	movwf	I2C_Receive@temp
 10481                           
 10482                           ;LE7-3.c: 236: I2C_Wait();
 10483  1A00  160A  158A  2106  160A  158A  	fcall	_I2C_Wait
 10484                           
 10485                           ;LE7-3.c: 237: ACKDT = (ack)?0:1;
 10486  1A05  08F1               	movf	I2C_Receive@ack,f
 10487  1A06  1D03               	btfss	3,2
 10488  1A07  2A0C               	goto	u4580
 10489  1A08  1683               	bsf	3,5	;RP0=1, select bank1
 10490  1A09  1303               	bcf	3,6	;RP1=0, select bank1
 10491  1A0A  1691               	bsf	17,5	;volatile
 10492  1A0B  2A0F               	goto	l3331
 10493  1A0C                     u4580:	
 10494  1A0C  1683               	bsf	3,5	;RP0=1, select bank1
 10495  1A0D  1303               	bcf	3,6	;RP1=0, select bank1
 10496  1A0E  1291               	bcf	17,5	;volatile
 10497  1A0F                     l3331:	
 10498                           
 10499                           ;LE7-3.c: 238: ACKEN = 1;
 10500  1A0F  1611               	bsf	17,4	;volatile
 10501                           
 10502                           ;LE7-3.c: 239: return temp;
 10503  1A10  0872               	movf	I2C_Receive@temp,w
 10504  1A11  0008               	return
 10505  1A12                     __end_of_I2C_Receive:	
 10506                           
 10507                           	psect	text44
 10508  1906                     __ptext44:	
 10509 ;; *************** function _I2C_Wait *****************
 10510 ;; Defined at:
 10511 ;;		line 196 in file "D:\From old laptop\Subjects\Uni\3rd Year M\2nd sem\Embedded Systems\Practical Activities\Practical
      + Activity #7\To Submit\LE7-3.c"
 10512 ;; Parameters:    Size  Location     Type
 10513 ;;		None
 10514 ;; Auto vars:     Size  Location     Type
 10515 ;;		None
 10516 ;; Return value:  Size  Location     Type
 10517 ;;		None               void
 10518 ;; Registers used:
 10519 ;;		wreg, status,2
 10520 ;; Tracked objects:
 10521 ;;		On entry : 0/0
 10522 ;;		On exit  : 0/0
 10523 ;;		Unchanged: 0/0
 10524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10525 ;;      Params:         0       0       0       0       0
 10526 ;;      Locals:         0       0       0       0       0
 10527 ;;      Temps:          0       0       0       0       0
 10528 ;;      Totals:         0       0       0       0       0
 10529 ;;Total ram usage:        0 bytes
 10530 ;; Hardware stack levels used:    1
 10531 ;; This function calls:
 10532 ;;		Nothing
 10533 ;; This function is called by:
 10534 ;;		_I2C_Start
 10535 ;;		_I2C_Stop
 10536 ;;		_I2C_RepeatedStart
 10537 ;;		_I2C_Send
 10538 ;;		_I2C_Receive
 10539 ;; This function uses a non-reentrant model
 10540 ;;
 10541                           
 10542                           
 10543                           ;psect for function _I2C_Wait
 10544  1906                     _I2C_Wait:	
 10545  1906                     l3179:	
 10546                           ;LE7-3.c: 199: while((SSPCON2 & 0x1F) || (SSPSTAT & 0x04));
 10547                           
 10548                           ;incstack = 0
 10549                           ; Regs used in _I2C_Wait: [wreg+status,2]
 10550                           
 10551  1906  1683               	bsf	3,5	;RP0=1, select bank1
 10552  1907  1303               	bcf	3,6	;RP1=0, select bank1
 10553  1908  0811               	movf	17,w	;volatile
 10554  1909  391F               	andlw	31
 10555  190A  1903               	btfsc	3,2
 10556  190B  1914               	btfsc	20,2	;volatile
 10557  190C  2906               	goto	l3179
 10558  190D  0008               	return
 10559  190E                     __end_of_I2C_Wait:	
 10560  007E                     btemp	set	126	;btemp
 10561  007E                     wtemp	set	126
 10562  007E                     wtemp0	set	126
 10563  0080                     wtemp1	set	128
 10564  0082                     wtemp2	set	130
 10565  0084                     wtemp3	set	132
 10566  0086                     wtemp4	set	134
 10567  0088                     wtemp5	set	136
 10568  007F                     wtemp6	set	127
 10569  007E                     ttemp	set	126
 10570  007E                     ttemp0	set	126
 10571  0081                     ttemp1	set	129
 10572  0084                     ttemp2	set	132
 10573  0087                     ttemp3	set	135
 10574  007F                     ttemp4	set	127
 10575  007E                     ltemp	set	126
 10576  007E                     ltemp0	set	126
 10577  0082                     ltemp1	set	130
 10578  0086                     ltemp2	set	134
 10579  0080                     ltemp3	set	128


Data Sizes:
    Strings     8
    Constant    175
    Data        0
    BSS         7
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     80      80
    BANK1            80     62      69
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(1) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_2(CODE[5]), STR_1(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 8
		 -> dispT@val(BANK1[8]), dispRH@val(BANK1[4]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S177$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0


Critical Paths under _main in COMMON

    _main->___awtoft
    _pow->___lltoft
    _log->___awtoft
    _exp->___awtoft
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _initLCD->_instCtrl
    _sprintf->___lldiv
    _sprintf->___lltoft
    _sprintf->__div_to_l_
    ___ftmul->___awtoft
    ___bmul->___awdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___ftsub->___awtoft
    ___ftsub->___lltoft
    ___ftadd->___awtoft
    _instCtrl->_delay_ms
    _dataCtrl->_delay_ms
    ___lwtoft->___ftpack

Critical Paths under _main in BANK0

    _main->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _floor->___altoft
    ___altoft->___fttol
    _eval_poly->___ftadd
    _dispT->_sprintf
    _dispRH->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___ftmul->___ftdiv
    ___bmul->___awdiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround

Critical Paths under _main in BANK1

    _main->_dispT
    _pow->_exp
    _exp->_ldexp
    _dispT->_sprintf
    _dispRH->_sprintf

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                18    18      0  164055
                                             44 BANK1     18    18      0
                        _I2C_Receive
                  _I2C_RepeatedStart
                           _I2C_Send
                          _I2C_Start
                           _I2C_Stop
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                           _delay_ms
                             _dispRH
                              _dispT
                            _initLCD
                    _init_I2C_Master
                                _pow
 ---------------------------------------------------------------------------------
 (1) _pow                                                 18    12      6   65968
                                             79 BANK0      1     1      0
                                             15 BANK1     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (2) _log                                                  6     3      3   21285
                                             71 BANK0      6     3      3
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (2) _exp                                                 13    10      3   35307
                                             78 BANK0      1     1      0
                                              3 BANK1     12     9      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (3) _ldexp                                               10     5      5    2202
                                             71 BANK0      7     2      5
                                              0 BANK1      3     3      0
                             ___ftge
                            ___ftneg
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (3) _floor                                                9     6      3    8413
                                             63 BANK0      9     6      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                6     2      4     436
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___altoft                                             8     4      4    1993
                                             55 BANK0      8     4      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           10     4      6    9048
                                             61 BANK0     10     4      6
                             ___bmul
                            ___ftadd
                            ___ftmul
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    2400
                                              0 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    2105
                                              8 COMMON     6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _init_I2C_Master                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              0     0      0     992
                           _delay_ms
                           _instCtrl
 ---------------------------------------------------------------------------------
 (1) _dispT                                               11    11      0   40568
                                             77 BANK0      1     1      0
                                             34 BANK1     10    10      0
                           _dataCtrl
                           _instCtrl
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _dispRH                                               5     5      0   40592
                                             77 BANK0      1     1      0
                                             34 BANK1      4     4      0
                           _dataCtrl
                           _instCtrl
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             50    46      4   39420
                                             67 BANK0     10     6      4
                                              0 BANK1     34    34      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               12     9      3    8161
                                             32 BANK0      9     6      3
                            ___awdiv
                            ___awmod
                             ___bmul
                            ___ftmul
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              19    16      3    7963
                                             32 BANK0     16    13      3
                            ___awdiv
                            ___awmod
                             ___bmul
                            ___ftmul
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             16    10      6    4434
                                             16 BANK0     16    10      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                             ___bmul (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___bmul                                               4     3      1     628
                                             12 COMMON     1     1      0
                                              4 BANK0      3     2      1
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              7     3      4    1250
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4    1360
                                              7 COMMON     5     1      4
                                              0 BANK0      4     4      0
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         16    10      6     409
                                              0 COMMON    10     4      6
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          20    14      6     552
                                              0 COMMON    14     8      6
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1352
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             6     2      4    1977
                                              8 COMMON     6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                             10     2      8     583
                                              0 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     480
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             14    10      4     676
                                             41 BANK0     14    10      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    3747
                                             61 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    3490
                                             48 BANK0     13     7      6
                           ___awtoft (ARG)
                             ___bmul (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                              _frexp (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     310
                                              0 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                              12     6      6    1514
                                              0 COMMON    12     6      6
 ---------------------------------------------------------------------------------
 (2) _instCtrl                                             1     1      0     507
                                              6 COMMON     1     1      0
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _dataCtrl                                             1     1      0     507
                                              6 COMMON     1     1      0
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             6     4      2     485
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             4     1      3    1930
                                              8 COMMON     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    1802
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (1) _I2C_Stop                                             0     0      0       0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Start                                            0     0      0       0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Send                                             1     1      0      22
                                              0 COMMON     1     1      0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_RepeatedStart                                    0     0      0       0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Receive                                          3     3      0      45
                                              0 COMMON     3     3      0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Wait                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Receive
     _I2C_Wait
   _I2C_RepeatedStart
     _I2C_Wait
   _I2C_Send
     _I2C_Wait
   _I2C_Start
     _I2C_Wait
   _I2C_Stop
     _I2C_Wait
   ___awtoft
     ___ftpack
   ___ftadd
     ___awtoft (ARG)
       ___ftpack
     ___bmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___bmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
     _frexp (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___bmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___awtoft (ARG)
       ___ftpack
     ___bmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
     _frexp (ARG)
   ___fttol
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___bmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___bmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
   ___lwtoft
     ___ftpack
   _delay_ms
   _dispRH
     _dataCtrl
       _delay_ms
     _instCtrl
       _delay_ms
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___bmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___bmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___ftneg
       ___ftsub
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___bmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___bmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___bmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___bmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___bmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___bmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
       _isdigit
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___bmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
   _dispT
     _dataCtrl
       _delay_ms
     _instCtrl
       _delay_ms
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___bmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___bmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___ftneg
       ___ftsub
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___bmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___bmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___bmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___bmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___bmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___bmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
       _isdigit
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___bmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
   _initLCD
     _delay_ms
     _instCtrl
       _delay_ms
   _init_I2C_Master
   _pow
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___bmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___ftneg
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___bmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
     ___lltoft
       ___ftpack
     _exp
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___ftneg
       ___ftsub
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___bmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___bmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___bmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___bmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___bmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
       _eval_poly
         ___bmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___bmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___bmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___bmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
       _floor
         ___altoft
           ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___bmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___bmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___bmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___bmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___bmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___bmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
         ___ftge
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___bmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___bmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___bmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
         _frexp
       _ldexp
         ___ftge
         ___ftneg
         _eval_poly (ARG)
           ___bmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___bmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___bmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___bmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___bmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___bmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
       _log (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___bmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___bmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___bmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         _eval_poly
           ___bmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___bmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___bmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___bmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___bmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___bmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
         _frexp
     _log
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___bmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___bmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       _eval_poly
         ___bmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___bmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___bmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___bmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
       _frexp

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      A3       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50     3E      45       7       86.3%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      A3      12        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Sat Apr 26 21:46:28 2025

              ___altoft@exp 005D                           _T 00DE                           pc 0002  
            ___bmul@product 0025          __size_of_I2C_Start 0007                 __CFG_CP$OFF 0000  
             ___altoft@sign 005E                          _RH 00E1                ___awdiv@sign 0021  
                        fsr 0004         ___wmul@multiplicand 0072                ___ftadd@exp1 005C  
              ___ftadd@exp2 005B                ___ftadd@sign 005A                         l306 19D3  
                       l166 00D3                         l513 08D0                         l194 040F  
                       l464 14CB                         l490 1C96                         l706 1541  
                       l539 11BA                         l484 1C7D                         _RD0 0040  
                       _RD1 0041                         _PEN 048A                __CFG_CPD$OFF 0000  
                       _SEN 0488                         _exp 0931                         _log 124B  
                       _pow 1520                         fsr0 0004                         indf 0000  
              ___awmod@sign 0076        __size_of_I2C_Receive 0026                __CFG_FOSC$XT 0000  
               _sprintf$190 00A3                 _sprintf$700 00A0                __CFG_LVP$OFF 0000  
              ___ftdiv@cntr 002A                ___ftdiv@sign 002F                        l3011 01BA  
                      l2213 1A68                        l3023 0244                        l2215 1A7A  
                      l2161 1C4F                        l2313 0858                        l2233 1BA3  
                      l3113 065E                        l3121 067C                        l2331 0881  
                      l2251 1BCF                        l2243 1BAB                        l2227 1B98  
                      l3131 06B0                        l3051 0329                        l3035 02C8  
                      l3027 028A                        l3019 0227                        l3211 093F  
                      l2165 1C56                        l2341 08A7                        l2309 0851  
                      l2245 1BB9                        l2421 1398                        l2405 1349  
                      l3141 06C6                        l3061 039E                        l3221 095F  
                      l2175 1C82                        l2167 1C62                        l2351 08CC  
                      l2343 08AB                        l2319 0867                        l2255 1BDA  
                      l2271 1A9E                        l3119 0677                        l3055 0398  
                      l3039 02DF                        l2503 1A24                        l2177 1C8C  
                      l2169 1C67                        l2521 080A                        l2337 0896  
                      l2193 10C7                        l2433 13C0                        l2417 1388  
                      l3153 073C                        l3137 06C0                        l3081 049D  
                      l3233 09B4                        l3331 1A0F                        l2355 08E2  
                      l2339 08A2                        l2259 1BE2                        l2283 1AAB  
                      l2275 1AA5                        l3171 0041                        l3227 0981  
                      l2525 0814                        l2381 1B7D                        l2349 08C0  
                      l2701 14EC                        l2285 1AB9                        l2293 1AD2  
                      l2189 10C1                        l2429 13B0                        l2605 1923  
                      l3157 075E                        l3149 0716                        l3093 04D0  
                      l3069 03EE                        l3173 07EE                        l2359 08F4  
                      l2711 1514                        l2703 14FC                        l2615 11A2  
                      l3087 04B6                        l3255 0AD1                        l2377 1B56  
                      l2369 0917                        l2457 1DC5                        l2713 1517  
                      l2297 1ADA                        l2289 1AC7                        l2553 17CE  
                      l2545 1744                        l3169 0781                        l3179 1906  
                      l2491 1E30                        l2483 1E14                        l2475 1DF7  
                      l3099 0503                        l3195 1285                        l3283 15BE  
                      l3275 1556                        l2485 1E1F                        l2477 1E07  
                      l2805 1C31                        l2821 1AFB                        l2709 1509  
                      l2637 11FB                        l2629 11DB                        l3365 1EA9  
                      l3189 126F                        l3269 154A                        l2487 1E22  
                      l2719 19CB                        l2655 1234                        l2647 1217  
                      l2399 1333                        l2575 0E95                        l3367 1EC3  
                      l3287 15DA                        l2809 1C3E                        l2825 1B19  
                      l2657 123F                        l2649 1227                        l2593 0FE1  
                      l2569 0E27                        l2737 19B2                        l2753 10FE  
                      l2921 1FE7                        l3393 0B4B                        l2819 1AEB  
                      l2675 142E                        l2659 1242                        l2587 0F73  
                      l2579 0EB4                        l2747 10E8                        l2829 1B26  
                      l2837 000F                        l2685 1475                        l2669 140F  
                      l2853 1EFF                        l2917 1FDE                        l2839 0021  
                      l2775 1162                        l2767 1143                        l2857 1F08  
                      l2795 1BF9                        l2971 00CD                        l2955 006D  
                      l2867 1F5E                        l2797 1C09                        l2877 1D21  
                      l2887 1F75                        l2985 0109                        l2977 00D5  
                      l2969 0088                        l2897 1F9E                        l2995 0148  
                      l2979 00F1                        ?_exp 00A3                        ?_log 0067  
                      ?_pow 00AF                        STR_1 10BA                        STR_2 10B5  
                      u3005 1367                        u3035 1399                        u3045 13A1  
                      u3135 1DCC                        u2425 1C9D                        u4105 0295  
                      u2355 1C5B                        u3165 1DF8                        u3405 11FC  
                      u2525 1BAE                        u3085 13C1                        u4205 041F  
                      u2375 1C76                        u3255 081F                        u3095 13C9  
                      u4135 02C6                        u4055 0162                        u2545 1BBA  
                      u2625 1AAE                        u4225 04BF                        u2395 1C85  
                      u3195 1E16                        u3515 1477                        u2555 1BC6  
                      u4235 04CC                        u2475 1A6D                        u2805 0897  
                      u3525 14A6                        u3445 1218                        u2565 1BD0  
                      u2645 1ABF                        u4405 078F                        u4165 03A3  
                      u2655 1AC8                        u4335 06CB                        u4255 0578  
                      u4175 03E0                        u4095 024F                        u3625 19D4  
                      u3385 11DD                        u4345 0708                        u4265 060A  
                      u3705 1144                        u2931 1B49                        u2835 08AC  
                      u3635 19DB                        u3475 1236                        u3395 11EE  
                      u3715 1155                        u4515 0AC8                        u2932 1B4A  
                      u2933 1B4F                        u3565 14ED                        u4365 072F  
                      u3725 1163                        u2934 1B50                        u2951 1B70  
                      u2775 0882                        u4375 0755                        u4615 0B9B  
                      u2952 1B71                        u2953 1B76                        u2865 08C1  
                      u3825 1AEF                        u4625 0BA7                        u2954 1B77  
                      u3755 1BFD                        u3595 150B                        u4395 07A2  
                      u4635 0CAE                        u4580 1A0C                        _RCEN 048B  
                      u3845 1B09                        u3685 1110                        u4565 15B1  
                      u4645 0CBA                        u3775 1C0B                        u3855 1B1A  
                      u3695 1122                        u3785 1C20                        u3795 1C32  
                      u3875 0014                        u2995 1355                        u3965 1FA7  
                      _RSEN 0489                __CFG_WRT$OFF 0000                        _main 0AFD  
              ___ftpack@arg 0070                ___ftpack@exp 0073            __end_of_I2C_Send 1917  
                      btemp 007E            __end_of_I2C_Wait 190E                        exp@x 00A3  
                      log@x 0067            __end_of_I2C_Stop 1906               __CFG_BOREN$ON 0000  
                      ltemp 007E                        pow@x 00AF                        pow@y 00B2  
                      start 0000                        ttemp 007E                        wtemp 007E  
         ___bmul@multiplier 0026                ___ftmul@cntr 003E                ___ftmul@sign 003F  
              ___fttol@exp1 0056                       ??_exp 006E                       ??_log 006A  
              ___fttol@lval 0052                       ??_pow 006F                       ?_main 0070  
                     _ACKEN 048C                       _ACKDT 048D             __end_of___awdiv 1BE9  
           __end_of___ftadd 0931               __CFG_WDTE$OFF 0000             __end_of___awmod 1AE1  
           __end_of___ftdiv 1188             __end_of___ftneg 000B             __end_of___lldiv 1C47  
           __end_of___ftmul 13EE             ___awdiv@divisor 0077             __end_of___llmod 1B2F  
           __end_of___ftsub 1988             __end_of___fttol 1E39             ___awdiv@counter 0020  
                     _PORTB 0006                       _PORTD 0008                       _TRISB 0086  
                     _TRISD 0088               __CFG_PWRTE$ON 0000                ___lltoft@exp 007D  
           __end_of_initLCD 19A8               ___awtoft@sign 007D                       _dispT 1E39  
           __end_of_dpowers 102E                       _floor 1ECE                       _ldexp 1F67  
                     _frexp 1A12                       _errno 00E3                       _scale 0D61  
           __end_of_isdigit 1925               ___ftpack@sign 0074                       main@t 00D1  
         __end_of_I2C_Start 18FF                       pclath 000A                       ltemp0 007E  
                     ltemp1 0082                       ltemp2 0086                       ltemp3 0080  
                     pow@yi 00BC                       ttemp0 007E                       ttemp1 0081  
                     ttemp2 0084                       ttemp3 0087                       ttemp4 007F  
                     status 0003                       wtemp0 007E                       wtemp1 0080  
                     wtemp2 0082                       wtemp3 0084                       wtemp4 0086  
                     wtemp5 0088                       wtemp6 007F             __end_of_sprintf 07F3  
               exp@exponent 00AC                 ldexp@newexp 006A             __initialization 07F3  
               log@exponent 006B                __end_of_main 0D61                      ??_main 00CC  
             ___fttol@sign1 0051        __size_of__tdiv_to_l_ 00C3                      ?_dispT 0070  
                    ?_floor 005F                      ?_ldexp 0067                      ?_frexp 0070  
          __end_of___altoft 1A94            ___llmod@dividend 0024                      ?_scale 0040  
          ___awdiv@dividend 0079            __end_of___awtoft 19C9            __end_of___ftpack 1CAF  
          __end_of___lltoft 0036            __end_of___lwtoft 196C                      _SSPADD 0093  
                    _TRISC3 043B                      _TRISC4 043C                      _SSPCON 0014  
                    _SSPBUF 0013            __end_of_dataCtrl 1946            __end_of_delay_ms 0828  
          __end_of__powers_ 107C                      ___bmul 10BD                      ___ftge 1B2F  
                    ___wmul 19C9                   ??___awdiv 007B                   ??___ftadd 0056  
                 ??___awmod 0074                   ??___ftdiv 0026                   ??___ftneg 0073  
                 ??___lldiv 0078                   ??___ftmul 0036                   ??___llmod 0028  
                 ??___ftsub 007E                   ??___fttol 004D                      _dispRH 1D28  
  __size_of_init_I2C_Master 000F                      _fround 1664            ___awdiv@quotient 0022  
           ___awmod@divisor 0070            __end_of_instCtrl 1958                      dispT@i 00CA  
           ___awmod@counter 0075                      main@rh 00CE                      floor@i 0063  
                    floor@x 005F       ___ftmul@f3_as_product 003B                   ??_initLCD 0077  
                 ??_isdigit 0070                   ?_I2C_Send 0070                   ?_I2C_Wait 0070  
                 ?_I2C_Stop 0070                   ??_sprintf 0067            __end_ofexp@coeff 109A  
          __end_oflog@coeff 10B5     __end_of__initialization 07FC                  ___altoft@c 0057  
                ___ftadd@f1 0050                  ___ftadd@f2 0053                  ___ftge@ff1 0070  
                ___ftge@ff2 0073                eval_poly@res 0064                  ___ftdiv@f1 0023  
                ___ftdiv@f2 0020                  ___ftdiv@f3 002B                  ___ftneg@f1 0070  
                ___awtoft@c 0078         ___bmul@multiplicand 0024                  ___ftmul@f1 0030  
                ___ftmul@f2 0033                  ___ftsub@f1 0060                  ___ftsub@f2 005D  
                ___fttol@f1 0049              __pcstackCOMMON 0070                  ___lltoft@c 0078  
             __end_of_dispT 1ECE               __end_of_floor 1F67               __end_of_ldexp 2000  
             __end_of_frexp 1A52               __end_of_scale 1000                  ___lwtoft@c 0078  
                __div_to_l_ 13EE                  ??_I2C_Send 0070                  ??_I2C_Wait 0070  
                ??_I2C_Stop 0070                     ??_dispT 006D             __div_to_l_@exp1 0025  
                   ??_floor 0062                     ??_ldexp 006C             __div_to_l_@cntr 0024  
              sprintf@integ 00B2                     ??_frexp 0074                     ??_scale 0043  
           __div_to_l_@quot 0020                  __pbssBANK1 00DE          __size_of_eval_poly 0079  
             __div_to_l_@f1 0070               __div_to_l_@f2 0073                  __pmaintext 0AFD  
                   ?___bmul 0024                     ?___ftge 0070                     ?___wmul 0070  
                   ?_dispRH 0070                   ?___altoft 0057                     ?_fround 0040  
                 ?___awtoft 0078                   ?___ftpack 0070               ??_I2C_Receive 0070  
              I2C_Send@data 0070                   ?___lltoft 0078                   ?___lwtoft 0078  
                 ?_dataCtrl 0070           ??_init_I2C_Master 0070                   ?_delay_ms 0070  
                   _SSPCON2 0091                     _SSPSTAT 0094                  __stringtab 1000  
                 ?_instCtrl 0070                   _I2C_Start 18F8              I2C_Receive@ack 0071  
         __end_of__npowers_ 1055             __size_of___bmul 0013             __size_of___ftge 005D  
                   ___awdiv 1B8C                     ___ftadd 0828                     ___awmod 1A94  
                   ___ftdiv 10D0                     ___ftneg 0003                     ___lldiv 1BE9  
           __size_of___wmul 0023                     ___ftmul 131B                     ___llmod 1AE1  
                   ___ftsub 196C                     ___fttol 1DAB                  _fround$697 004C  
                _fround$698 0049             __size_of_dispRH 0083                  ??___altoft 005B  
                   _exp$703 00A6                     _exp$484 00A9                  ??___awtoft 007B  
                ??___ftpack 0075           __end_of_eval_poly 1D28             __size_of_fround 019C  
                ??___lltoft 007C                     __ptext1 1520                     __ptext2 124B  
                   __ptext3 0931                     __ptext4 1F67                     __ptext5 1ECE  
                   __ptext6 1A12                     __ptext7 1A52                     __ptext8 1CAF  
                   __ptext9 10D0                  ??___lwtoft 007B                     _pow$701 00B5  
                   _pow$702 00B8                     _initLCD 1988                 ?__div_to_l_ 0070  
                   _dpowers 1006                  ??_dataCtrl 0076                __size_of_exp 01CC  
              __size_of_log 00D0                     _isdigit 1917                __size_of_pow 0144  
          ___awmod@dividend 0072                  ??_delay_ms 0072         __end_of_I2C_Receive 1A12  
                   _sprintf 0036                     main@res 00D7        end_of_initialization 07FC  
                   exp@sign 00AE                  ??_instCtrl 0076                  ?_I2C_Start 0070  
           ___lldiv@divisor 0070                     pow@sign 00BB             ___lldiv@counter 007D  
            __tdiv_to_l_@f1 0070              __tdiv_to_l_@f2 0073               ??__tdiv_to_l_ 0076  
         __size_of_I2C_Send 0009           __size_of_I2C_Wait 0008           __size_of_I2C_Stop 0007  
              instCtrl@INST 0076                  main@T_temp 00DB                 ___ftdiv@exp 002E  
       __size_of__div_to_l_ 0132                 ___ftmul@exp 003A              __end_of___bmul 10D0  
            __end_of___ftge 1B8C              __end_of___wmul 19EC              __end_of_dispRH 1DAB  
               _I2C_Receive 19EC              __end_of_fround 1800                  floor@expon 0066  
       start_initialization 07F3                  eval_poly@d 0060                  eval_poly@n 0061  
                eval_poly@x 005D                  ldexp@value 0067         __end_of__tdiv_to_l_ 124B  
               __end_of_exp 0AFD                 __end_of_log 131B                 __end_of_pow 1664  
              dataCtrl@DATA 0076                  frexp@value 0070             ___llmod@divisor 0020  
               ??_I2C_Start 0070             ___llmod@counter 0029                    ??___bmul 007C  
                  ??___ftge 0076                    ??___wmul 0074             _init_I2C_Master 1925  
             sprintf@vd_192 00AB                    ??_dispRH 006D           _I2C_RepeatedStart 18F1  
                  ??_fround 0043          ?_I2C_RepeatedStart 0070           __size_of___altoft 0042  
                fround@prec 004F           __size_of___awtoft 0021           __size_of___ftpack 0068  
         __size_of___lltoft 002B                   ___latbits 0002           __size_of___lwtoft 0014  
             __pcstackBANK0 0020               __pcstackBANK1 00A0         ??_I2C_RepeatedStart 0070  
       __end_of__stringdata 10BD           __size_of_dataCtrl 0012           __size_of_delay_ms 0028  
               sprintf@_val 00B7                 sprintf@flag 00B0                 sprintf@fval 00BE  
               sprintf@prec 00BC           __size_of_instCtrl 0012   __end_of_I2C_RepeatedStart 18F8  
                  ?___awdiv 0077                    ?___ftadd 0050                    ?___awmod 0070  
                  ?___ftdiv 0020                    ?___ftneg 0070                    ?___lldiv 0070  
                  ?___ftmul 0030                    ?___llmod 0020                    ?___ftsub 005D  
                 __npowers_ 102E                    ?___fttol 0049                   __pstrings 1000  
                 _ldexp$521 00A0                 __tdiv_to_l_ 1188                ??__div_to_l_ 0076  
                  ?_initLCD 0070                    ?_isdigit 0070                    _I2C_Send 190E  
                  _I2C_Wait 1906                   _eval_poly 1CAF                    _I2C_Stop 18FF  
                 _scale$699 0045              __size_of_dispT 0095                    ?_sprintf 0063  
            __size_of_floor 0099              __size_of_ldexp 0099              __size_of_frexp 0040  
            __size_of_scale 029F              ___wmul@product 0074                   delay_ms@i 0072  
                 delay_ms@j 0074     __end_of_init_I2C_Master 1934          __end_of__div_to_l_ 1520  
                 dispRH@val 00C2                 __stringbase 1005                 __stringdata 10B5  
         ___wmul@multiplier 0070                  ?_eval_poly 005D             I2C_Receive@temp 0072  
                 frexp@eptr 0073  __size_of_I2C_RepeatedStart 0007            __size_of___awdiv 005D  
          __size_of___ftadd 0109            __size_of___awmod 004D            __size_of___ftdiv 00B8  
          __size_of___ftneg 0008            __size_of___lldiv 005E                    ___altoft 1A52  
          __size_of___ftmul 00D3            __size_of___llmod 004E            __size_of___ftsub 001C  
          __size_of___fttol 008E                    ___awtoft 19A8                    ___ftpack 1C47  
        __end_of__stringtab 1006                    ___lltoft 000B                ?_I2C_Receive 0070  
               _isdigit$390 0070                    ___lwtoft 1958                  sprintf@exp 00B5  
                  _dataCtrl 1934            __size_of_initLCD 0020            __size_of_isdigit 000E  
                  _main$696 00D4                    _delay_ms 0800                    __ptext10 19A8  
                  __ptext11 1925                    __ptext20 10BD                    __ptext12 1988  
                  __ptext21 1A94                    __ptext13 1E39                    __ptext30 196C  
                  __ptext22 1B8C                    __ptext14 1D28                    __ptext31 0828  
                  __ptext23 1188                    __ptext15 0036                    __ptext40 18F8  
                  __ptext32 0003                    __ptext24 13EE                    __ptext16 0D61  
                  __ptext41 190E                    __ptext33 1B2F                    __ptext25 19C9  
                  __ptext17 1917                    __ptext42 18F1                    __ptext34 1946  
                  __ptext26 000B                    __ptext18 1664                    __ptext43 19EC  
                  __ptext35 1934                    __ptext27 1AE1                    __ptext19 131B  
                  __ptext44 1906                    __ptext36 0800                    __ptext28 1BE9  
                  __ptext37 1958                    __ptext29 1DAB                    __ptext38 1C47  
                  __ptext39 18FF                    __powers_ 1055            __size_of_sprintf 07BD  
             __size_of_main 0264                    _instCtrl 1946            ?_init_I2C_Master 0070  
                  dispT@val 00C2                    main@temp 00DD                 delay_ms@cnt 0070  
                  exp@coeff 107C                    log@coeff 109A                 ??_eval_poly 0063  
                  isdigit@c 0071                    scale@scl 0048                   sprintf@ap 00AF  
          __tdiv_to_l_@exp1 0025                   sprintf@vd 00A7            __tdiv_to_l_@cntr 0024  
                 sprintf@sp 00BB            __tdiv_to_l_@quot 0020            ___lldiv@dividend 0074  
                 stringcode 1000                ?__tdiv_to_l_ 0070                    sprintf@c 00C1  
                  sprintf@f 0063            ___lldiv@quotient 0079                    stringdir 1000  
                  stringtab 1000                 main@RH_temp 00D9  
