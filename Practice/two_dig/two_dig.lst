

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Mon Mar 03 01:02:23 2025

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	intentry,global,class=CODE,delta=2
    14                           	dabs	1,0x7E,2
    15  0000                     	;# 
    16  0001                     	;# 
    17  0002                     	;# 
    18  0003                     	;# 
    19  0004                     	;# 
    20  0005                     	;# 
    21  0006                     	;# 
    22  0007                     	;# 
    23  0008                     	;# 
    24  0009                     	;# 
    25  000A                     	;# 
    26  000B                     	;# 
    27  000C                     	;# 
    28  000D                     	;# 
    29  000E                     	;# 
    30  000E                     	;# 
    31  000F                     	;# 
    32  0010                     	;# 
    33  0011                     	;# 
    34  0012                     	;# 
    35  0013                     	;# 
    36  0014                     	;# 
    37  0015                     	;# 
    38  0015                     	;# 
    39  0016                     	;# 
    40  0017                     	;# 
    41  0018                     	;# 
    42  0019                     	;# 
    43  001A                     	;# 
    44  001B                     	;# 
    45  001B                     	;# 
    46  001C                     	;# 
    47  001D                     	;# 
    48  001E                     	;# 
    49  001F                     	;# 
    50  0081                     	;# 
    51  0085                     	;# 
    52  0086                     	;# 
    53  0087                     	;# 
    54  0088                     	;# 
    55  0089                     	;# 
    56  008C                     	;# 
    57  008D                     	;# 
    58  008E                     	;# 
    59  0091                     	;# 
    60  0092                     	;# 
    61  0093                     	;# 
    62  0094                     	;# 
    63  0098                     	;# 
    64  0099                     	;# 
    65  009C                     	;# 
    66  009D                     	;# 
    67  009E                     	;# 
    68  009F                     	;# 
    69  010C                     	;# 
    70  010D                     	;# 
    71  010E                     	;# 
    72  010F                     	;# 
    73  018C                     	;# 
    74  018D                     	;# 
    75  0007                     _PORTC	set	7
    76  0008                     _PORTD	set	8
    77  005F                     _GIE	set	95
    78  005C                     _INTE	set	92
    79  0059                     _INTF	set	89
    80  005D                     _TMR0IE	set	93
    81  005A                     _TMR0IF	set	90
    82  0081                     _OPTION_REG	set	129
    83  0086                     _TRISB	set	134
    84  0087                     _TRISC	set	135
    85  0088                     _TRISD	set	136
    86                           
    87                           	psect	text0
    88  0000                     __ptext0:	
    89                           ; #config settings
    90                           
    91                           
    92                           ;psect for function _ISR
    93  0000                     
    94                           	psect	cinit
    95  0015                     start_initialization:	
    96  0015                     __initialization:	
    97                           
    98                           ; Clear objects allocated to BITCOMMON
    99  0015  01F9               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   100  0016                     end_of_initialization:	
   101                           ;End of C runtime variable initialization code
   102                           
   103  0016                     __end_of__initialization:	
   104  0016  0183               	clrf	3
   105  0017  120A  118A  281A   	ljmp	_main	;jump to C main() function
   106                           
   107                           	psect	bitbssCOMMON
   108  03C8                     __pbitbssCOMMON:	
   109  03C8                     _btn_flag:	
   110  03C8                     	ds	1
   111  03C9                     _count_flag:	
   112  03C9                     	ds	1
   113                           
   114                           	psect	cstackCOMMON
   115  0070                     __pcstackCOMMON:	
   116  0070                     ?_ISR:	
   117  0070                     ??_ISR:	
   118                           ; 0 bytes @ 0x0
   119                           
   120  0070                     ?_pause:	
   121                           ; 0 bytes @ 0x0
   122                           
   123  0070                     ?_main:	
   124                           ; 0 bytes @ 0x0
   125                           
   126                           
   127                           ; 0 bytes @ 0x0
   128  0070                     	ds	4
   129  0074                     ?_delay:	
   130  0074                     ??_pause:	
   131                           ; 0 bytes @ 0x4
   132                           
   133  0074                     delay@num:	
   134                           ; 0 bytes @ 0x4
   135                           
   136                           
   137                           ; 2 bytes @ 0x4
   138  0074                     	ds	2
   139  0076                     ??_delay:	
   140                           
   141                           ; 0 bytes @ 0x6
   142  0076                     	ds	1
   143  0077                     delay@flags:	
   144                           
   145                           ; 2 bytes @ 0x7
   146  0077                     	ds	2
   147                           
   148                           	psect	cstackBANK0
   149  0020                     __pcstackBANK0:	
   150  0020                     ??_main:	
   151                           
   152                           ; 0 bytes @ 0x0
   153  0020                     	ds	1
   154  0021                     main@lower_bit:	
   155                           
   156                           ; 1 bytes @ 0x1
   157  0021                     	ds	1
   158  0022                     main@upper_bit:	
   159                           
   160                           ; 1 bytes @ 0x2
   161  0022                     	ds	1
   162  0023                     main@j:	
   163                           
   164                           ; 1 bytes @ 0x3
   165  0023                     	ds	1
   166  0024                     main@i:	
   167                           
   168                           ; 2 bytes @ 0x4
   169  0024                     	ds	2
   170                           
   171                           	psect	maintext
   172  001A                     __pmaintext:	
   173 ;;
   174 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   175 ;;
   176 ;; *************** function _main *****************
   177 ;; Defined at:
   178 ;;		line 47 in file "D:\From old laptop\Subjects\Uni\3rd Year M\2nd sem\Embedded Systems\Practice\two_dig\two_dig.c"
   179 ;; Parameters:    Size  Location     Type
   180 ;;		None
   181 ;; Auto vars:     Size  Location     Type
   182 ;;  i               2    4[BANK0 ] int 
   183 ;;  j               1    3[BANK0 ] char 
   184 ;;  upper_bit       1    2[BANK0 ] unsigned char 
   185 ;;  lower_bit       1    1[BANK0 ] unsigned char 
   186 ;; Return value:  Size  Location     Type
   187 ;;		None               void
   188 ;; Registers used:
   189 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   190 ;; Tracked objects:
   191 ;;		On entry : 17F/0
   192 ;;		On exit  : 0/0
   193 ;;		Unchanged: 0/0
   194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   195 ;;      Params:         0       0       0       0       0
   196 ;;      Locals:         0       5       0       0       0
   197 ;;      Temps:          0       1       0       0       0
   198 ;;      Totals:         0       6       0       0       0
   199 ;;Total ram usage:        6 bytes
   200 ;; Hardware stack levels required when called:    2
   201 ;; This function calls:
   202 ;;		_delay
   203 ;;		_pause
   204 ;; This function is called by:
   205 ;;		Startup code after reset
   206 ;; This function uses a non-reentrant model
   207 ;;
   208                           
   209                           
   210                           ;psect for function _main
   211  001A                     _main:	
   212                           
   213                           ;two_dig.c: 48: TRISB = 0x0F;
   214                           
   215                           ;incstack = 0
   216                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   217  001A  300F               	movlw	15
   218  001B  1683               	bsf	3,5	;RP0=1, select bank1
   219  001C  1303               	bcf	3,6	;RP1=0, select bank1
   220  001D  0086               	movwf	6	;volatile
   221                           
   222                           ;two_dig.c: 49: TRISC = 0x00;
   223  001E  0187               	clrf	7	;volatile
   224                           
   225                           ;two_dig.c: 50: TRISD = 0x00;
   226  001F  0188               	clrf	8	;volatile
   227                           
   228                           ;two_dig.c: 51: INTE = 1;
   229  0020  160B               	bsf	11,4	;volatile
   230                           
   231                           ;two_dig.c: 52: INTF = 0;
   232  0021  108B               	bcf	11,1	;volatile
   233                           
   234                           ;two_dig.c: 53: TMR0IE = 1;
   235  0022  168B               	bsf	11,5	;volatile
   236                           
   237                           ;two_dig.c: 54: TMR0IF = 0;
   238  0023  110B               	bcf	11,2	;volatile
   239                           
   240                           ;two_dig.c: 55: GIE = 1;
   241  0024  178B               	bsf	11,7	;volatile
   242                           
   243                           ;two_dig.c: 56: OPTION_REG = 0xC4;
   244  0025  30C4               	movlw	196
   245  0026  0081               	movwf	1	;volatile
   246                           
   247                           ;two_dig.c: 57: unsigned char lower_bit = 0;
   248  0027  1283               	bcf	3,5	;RP0=0, select bank0
   249  0028  1303               	bcf	3,6	;RP1=0, select bank0
   250  0029  01A1               	clrf	main@lower_bit
   251                           
   252                           ;two_dig.c: 58: unsigned char upper_bit = 0;
   253  002A  01A2               	clrf	main@upper_bit
   254                           
   255                           ;two_dig.c: 60: PORTC = 0x00;
   256  002B  0187               	clrf	7	;volatile
   257                           
   258                           ;two_dig.c: 61: PORTD = 0x00;
   259  002C  0188               	clrf	8	;volatile
   260                           
   261                           ;two_dig.c: 62: signed char j = 0;
   262  002D  01A3               	clrf	main@j
   263                           
   264                           ;two_dig.c: 63: int i = 0;
   265  002E  01A4               	clrf	main@i
   266  002F  01A5               	clrf	main@i+1
   267  0030                     l687:	
   268                           ;two_dig.c: 67: while(1){
   269                           
   270                           
   271                           ;two_dig.c: 68: if(btn_flag == 1){
   272  0030  1C79               	btfss	_btn_flag/(0+8),_btn_flag& (0+7)
   273  0031  2830               	goto	l687
   274                           
   275                           ;two_dig.c: 69: if((PORTC <= 0x09 && PORTD <= 0x09)){
   276  0032  300A               	movlw	10
   277  0033  1283               	bcf	3,5	;RP0=0, select bank0
   278  0034  1303               	bcf	3,6	;RP1=0, select bank0
   279  0035  0207               	subwf	7,w	;volatile
   280  0036  1803               	skipnc
   281  0037  2830               	goto	l687
   282  0038  300A               	movlw	10
   283  0039  0208               	subwf	8,w	;volatile
   284  003A  1803               	skipnc
   285  003B  2830               	goto	l687
   286                           
   287                           ;two_dig.c: 70: i = 0;
   288  003C  01A4               	clrf	main@i
   289  003D  01A5               	clrf	main@i+1
   290                           
   291                           ;two_dig.c: 71: for(i = 0; i < 10; i++){
   292  003E  01A4               	clrf	main@i
   293  003F  01A5               	clrf	main@i+1
   294  0040                     L1:	
   295  0040  0825               	movf	main@i+1,w
   296  0041  3A80               	xorlw	128
   297  0042  00FF               	movwf	127
   298  0043  3080               	movlw	128
   299  0044  027F               	subwf	127,w
   300  0045  1D03               	skipz
   301  0046  2849               	goto	u285
   302  0047  300A               	movlw	10
   303  0048  0224               	subwf	main@i,w
   304  0049                     u285:	
   305  0049  1803               	btfsc	3,0
   306  004A  2830               	goto	l687
   307                           
   308                           ;two_dig.c: 72: PORTC = i;
   309  004B  1283               	bcf	3,5	;RP0=0, select bank0
   310  004C  1303               	bcf	3,6	;RP1=0, select bank0
   311  004D  0824               	movf	main@i,w
   312  004E  0087               	movwf	7	;volatile
   313                           
   314                           ;two_dig.c: 73: delay(24);
   315  004F  3018               	movlw	24
   316  0050  00F4               	movwf	delay@num
   317  0051  3000               	movlw	0
   318  0052  00F5               	movwf	delay@num+1
   319  0053  120A  118A  207A  120A  118A  	fcall	_delay
   320                           
   321                           ;two_dig.c: 74: if(btn_flag == 0){
   322  0058  1879               	btfsc	_btn_flag/(0+8),_btn_flag& (0+7)
   323  0059  285F               	goto	l707
   324                           
   325                           ;two_dig.c: 75: pause();
   326  005A  120A  118A  20A9  120A  118A  	fcall	_pause
   327  005F                     l707:	
   328                           
   329                           ;two_dig.c: 76: }
   330                           ;two_dig.c: 77: if(i == 9){
   331  005F  3009               	movlw	9
   332  0060  1283               	bcf	3,5	;RP0=0, select bank0
   333  0061  1303               	bcf	3,6	;RP1=0, select bank0
   334  0062  0624               	xorwf	main@i,w
   335  0063  0425               	iorwf	main@i+1,w
   336  0064  1D03               	skipz
   337  0065  2873               	goto	l715
   338                           
   339                           ;two_dig.c: 78: PORTD=j+0x01;
   340  0066  0823               	movf	main@j,w
   341  0067  3E01               	addlw	1
   342  0068  0088               	movwf	8	;volatile
   343                           
   344                           ;two_dig.c: 79: j++;
   345  0069  3001               	movlw	1
   346  006A  00A0               	movwf	??_main
   347  006B  0820               	movf	??_main,w
   348  006C  07A3               	addwf	main@j,f
   349                           
   350                           ;two_dig.c: 80: if(j == 9){
   351  006D  0823               	movf	main@j,w
   352  006E  3A09               	xorlw	9
   353  006F  1D03               	skipz
   354  0070  2873               	goto	l715
   355                           
   356                           ;two_dig.c: 81: j = -1;
   357  0071  01A3               	clrf	main@j
   358  0072  03A3               	decf	main@j,f
   359  0073                     l715:	
   360  0073  3001               	movlw	1
   361  0074  07A4               	addwf	main@i,f
   362  0075  1803               	skipnc
   363  0076  0AA5               	incf	main@i+1,f
   364  0077  3000               	movlw	0
   365  0078  07A5               	addwf	main@i+1,f
   366  0079  2840               	goto	L1
   367  007A                     __end_of_main:	
   368                           
   369                           	psect	text1
   370  00A9                     __ptext1:	
   371 ;; *************** function _pause *****************
   372 ;; Defined at:
   373 ;;		line 42 in file "D:\From old laptop\Subjects\Uni\3rd Year M\2nd sem\Embedded Systems\Practice\two_dig\two_dig.c"
   374 ;; Parameters:    Size  Location     Type
   375 ;;		None
   376 ;; Auto vars:     Size  Location     Type
   377 ;;		None
   378 ;; Return value:  Size  Location     Type
   379 ;;		None               void
   380 ;; Registers used:
   381 ;;		None
   382 ;; Tracked objects:
   383 ;;		On entry : 0/0
   384 ;;		On exit  : 0/0
   385 ;;		Unchanged: 0/0
   386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   387 ;;      Params:         0       0       0       0       0
   388 ;;      Locals:         0       0       0       0       0
   389 ;;      Temps:          0       0       0       0       0
   390 ;;      Totals:         0       0       0       0       0
   391 ;;Total ram usage:        0 bytes
   392 ;; Hardware stack levels used:    1
   393 ;; Hardware stack levels required when called:    1
   394 ;; This function calls:
   395 ;;		Nothing
   396 ;; This function is called by:
   397 ;;		_main
   398 ;; This function uses a non-reentrant model
   399 ;;
   400                           
   401                           
   402                           ;psect for function _pause
   403  00A9                     _pause:	
   404  00A9                     l42:	
   405                           ;two_dig.c: 43: while(btn_flag==0){
   406                           
   407                           ;incstack = 0
   408                           ; Regs used in _pause: []
   409                           
   410  00A9  1879               	btfsc	_btn_flag/(0+8),_btn_flag& (0+7)
   411  00AA  0008               	return
   412  00AB  28A9               	goto	l42
   413  00AC                     __end_of_pause:	
   414                           
   415                           	psect	text2
   416  007A                     __ptext2:	
   417 ;; *************** function _delay *****************
   418 ;; Defined at:
   419 ;;		line 15 in file "D:\From old laptop\Subjects\Uni\3rd Year M\2nd sem\Embedded Systems\Practice\two_dig\two_dig.c"
   420 ;; Parameters:    Size  Location     Type
   421 ;;  num             2    4[COMMON] int 
   422 ;; Auto vars:     Size  Location     Type
   423 ;;  flags           2    7[COMMON] int 
   424 ;; Return value:  Size  Location     Type
   425 ;;		None               void
   426 ;; Registers used:
   427 ;;		wreg, status,2
   428 ;; Tracked objects:
   429 ;;		On entry : 0/0
   430 ;;		On exit  : 0/0
   431 ;;		Unchanged: 0/0
   432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   433 ;;      Params:         2       0       0       0       0
   434 ;;      Locals:         2       0       0       0       0
   435 ;;      Temps:          1       0       0       0       0
   436 ;;      Totals:         5       0       0       0       0
   437 ;;Total ram usage:        5 bytes
   438 ;; Hardware stack levels used:    1
   439 ;; Hardware stack levels required when called:    1
   440 ;; This function calls:
   441 ;;		Nothing
   442 ;; This function is called by:
   443 ;;		_main
   444 ;; This function uses a non-reentrant model
   445 ;;
   446                           
   447                           
   448                           ;psect for function _delay
   449  007A                     _delay:	
   450                           
   451                           ;two_dig.c: 17: int flags = 0;
   452                           
   453                           ;incstack = 0
   454                           ; Regs used in _delay: [wreg+status,2]
   455  007A  01F7               	clrf	delay@flags
   456  007B  01F8               	clrf	delay@flags+1
   457  007C                     l29:	
   458                           ;two_dig.c: 19: while (flags < num)
   459                           
   460  007C  0878               	movf	delay@flags+1,w
   461  007D  3A80               	xorlw	128
   462  007E  00F6               	movwf	??_delay
   463  007F  0875               	movf	delay@num+1,w
   464  0080  3A80               	xorlw	128
   465  0081  0276               	subwf	??_delay,w
   466  0082  1D03               	skipz
   467  0083  2886               	goto	u155
   468  0084  0874               	movf	delay@num,w
   469  0085  0277               	subwf	delay@flags,w
   470  0086                     u155:	
   471  0086  1803               	btfsc	3,0
   472  0087  0008               	return
   473                           
   474                           ;two_dig.c: 20: {
   475                           ;two_dig.c: 21: if (count_flag)
   476  0088  1CF9               	btfss	_count_flag/(0+8),_count_flag& (0+7)
   477  0089  287C               	goto	l29
   478                           
   479                           ;two_dig.c: 22: {
   480                           ;two_dig.c: 23: count_flag = 0;
   481  008A  10F9               	bcf	_count_flag/(0+8),_count_flag& (0+7)
   482                           
   483                           ;two_dig.c: 24: flags++;
   484  008B  3001               	movlw	1
   485  008C  07F7               	addwf	delay@flags,f
   486  008D  1803               	skipnc
   487  008E  0AF8               	incf	delay@flags+1,f
   488  008F  3000               	movlw	0
   489  0090  07F8               	addwf	delay@flags+1,f
   490  0091  287C               	goto	l29
   491  0092                     __end_of_delay:	
   492                           
   493                           	psect	text3
   494  0092                     __ptext3:	
   495 ;; *************** function _ISR *****************
   496 ;; Defined at:
   497 ;;		line 29 in file "D:\From old laptop\Subjects\Uni\3rd Year M\2nd sem\Embedded Systems\Practice\two_dig\two_dig.c"
   498 ;; Parameters:    Size  Location     Type
   499 ;;		None
   500 ;; Auto vars:     Size  Location     Type
   501 ;;		None
   502 ;; Return value:  Size  Location     Type
   503 ;;		None               void
   504 ;; Registers used:
   505 ;;		wreg
   506 ;; Tracked objects:
   507 ;;		On entry : 0/0
   508 ;;		On exit  : 0/0
   509 ;;		Unchanged: 0/0
   510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   511 ;;      Params:         0       0       0       0       0
   512 ;;      Locals:         0       0       0       0       0
   513 ;;      Temps:          4       0       0       0       0
   514 ;;      Totals:         4       0       0       0       0
   515 ;;Total ram usage:        4 bytes
   516 ;; Hardware stack levels used:    1
   517 ;; This function calls:
   518 ;;		Nothing
   519 ;; This function is called by:
   520 ;;		Interrupt level 1
   521 ;; This function uses a non-reentrant model
   522 ;;
   523                           
   524                           
   525                           ;psect for function _ISR
   526  0092                     _ISR:	
   527                           
   528                           ;two_dig.c: 30: GIE = 0;
   529  0092  138B               	bcf	11,7	;volatile
   530                           
   531                           ;two_dig.c: 31: if(INTF){
   532  0093  1C8B               	btfss	11,1	;volatile
   533  0094  2899               	goto	i1l36
   534                           
   535                           ;two_dig.c: 32: INTF=0;
   536  0095  108B               	bcf	11,1	;volatile
   537                           
   538                           ;two_dig.c: 33: btn_flag ^= 1;
   539  0096  3001               	movlw	(0+1) shl (_btn_flag& (0+7))
   540  0097  06F9               	xorwf	_btn_flag/(0+8),f
   541                           
   542                           ;two_dig.c: 34: }else if (TMR0IF){
   543  0098  289D               	goto	i1l37
   544  0099                     i1l36:	
   545  0099  1D0B               	btfss	11,2	;volatile
   546  009A  289D               	goto	i1l37
   547                           
   548                           ;two_dig.c: 35: TMR0IF=0;
   549  009B  110B               	bcf	11,2	;volatile
   550                           
   551                           ;two_dig.c: 36: count_flag = 1;
   552  009C  14F9               	bsf	_count_flag/(0+8),_count_flag& (0+7)
   553  009D                     i1l37:	
   554                           
   555                           ;two_dig.c: 37: }
   556                           ;two_dig.c: 39: GIE = 1;
   557  009D  178B               	bsf	11,7	;volatile
   558  009E  0873               	movf	??_ISR+3,w
   559  009F  00FF               	movwf	127
   560  00A0  0872               	movf	??_ISR+2,w
   561  00A1  008A               	movwf	10
   562  00A2  0871               	movf	??_ISR+1,w
   563  00A3  0084               	movwf	4
   564  00A4  0E70               	swapf	??_ISR^(0+-128),w
   565  00A5  0083               	movwf	3
   566  00A6  0EFE               	swapf	126,f
   567  00A7  0E7E               	swapf	126,w
   568  00A8  0009               	retfie
   569  00A9                     __end_of_ISR:	
   570  007E                     btemp	set	126	;btemp
   571  007E                     wtemp	set	126
   572  007E                     wtemp0	set	126
   573  0080                     wtemp1	set	128
   574  0082                     wtemp2	set	130
   575  0084                     wtemp3	set	132
   576  0086                     wtemp4	set	134
   577  0088                     wtemp5	set	136
   578  007F                     wtemp6	set	127
   579  007E                     ttemp	set	126
   580  007E                     ttemp0	set	126
   581  0081                     ttemp1	set	129
   582  0084                     ttemp2	set	132
   583  0087                     ttemp3	set	135
   584  007F                     ttemp4	set	127
   585  007E                     ltemp	set	126
   586  007E                     ltemp0	set	126
   587  0082                     ltemp1	set	130
   588  0086                     ltemp2	set	134
   589  0080                     ltemp3	set	128
   590                           
   591                           	psect	intentry
   592  0004                     __pintentry:	
   593                           ;incstack = 0
   594                           ; Regs used in _ISR: [wreg]
   595                           
   596  0004                     interrupt_function:	
   597  007E                     saved_w	set	btemp
   598  0004  00FE               	movwf	btemp
   599  0005  0E03               	swapf	3,w
   600  0006  00F0               	movwf	??_ISR
   601  0007  0804               	movf	4,w
   602  0008  00F1               	movwf	??_ISR+1
   603  0009  080A               	movf	10,w
   604  000A  00F2               	movwf	??_ISR+2
   605  000B  1283               	bcf	3,5	;RP0=0, select bank0
   606  000C  1303               	bcf	3,6	;RP1=0, select bank0
   607  000D  087F               	movf	btemp+1,w
   608  000E  00F3               	movwf	??_ISR+3
   609  000F  120A  118A  2892   	ljmp	_ISR


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      10
    BANK0            80      6       6
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_delay

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0     312
                                              0 BANK0      6     6      0
                              _delay
                              _pause
 ---------------------------------------------------------------------------------
 (1) _pause                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _delay                                                5     3      2      99
                                              4 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _delay
   _pause

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       1       0        7.1%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      9       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      10       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      6       6       5        7.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      10      12        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Mon Mar 03 01:02:23 2025

            __CFG_CP$OFF 0000                       l42 00A9                       l29 007C  
                    l715 0073                      l707 005F                      l687 0030  
                    _GIE 005F                      u155 0086             __CFG_CPD$OFF 0000  
                    _ISR 0092                      u285 0049                      fsr0 0004  
           __CFG_FOSC$XT 0000             __CFG_LVP$OFF 0000                     ?_ISR 0070  
                   _INTE 005C                     _INTF 0059                     i1l36 0099  
                   i1l37 009D             __CFG_WRT$OFF 0000                     _main 001A  
                   btemp 007E            __CFG_BOREN$ON 0000                     ltemp 007E  
                   start 0012                     ttemp 007E                     wtemp 007E  
                  ??_ISR 0070                    ?_main 0070            __CFG_WDTE$OFF 0000  
                  _PORTC 0007                    _PORTD 0008                    _TRISB 0086  
                  _TRISC 0087                    _TRISD 0088            __CFG_PWRTE$ON 0000  
                  _delay 007A                    _pause 00A9                    main@i 0024  
                  main@j 0023           __pbitbssCOMMON 03C8                    pclath 000A  
                  ltemp0 007E                    ltemp1 0082                    ltemp2 0086  
                  ltemp3 0080                    ttemp0 007E                    ttemp1 0081  
                  ttemp2 0084                    ttemp3 0087                    ttemp4 007F  
                  status 0003                    wtemp0 007E                    wtemp1 0080  
                  wtemp2 0082                    wtemp3 0084                    wtemp4 0086  
                  wtemp5 0088                    wtemp6 007F          __initialization 0015  
           __end_of_main 007A                   ??_main 0020                   ?_delay 0074  
                 ?_pause 0070                   _TMR0IE 005D                   _TMR0IF 005A  
          main@lower_bit 0021                   saved_w 007E            main@upper_bit 0022  
__end_of__initialization 0016           __pcstackCOMMON 0070            __end_of_delay 0092  
          __end_of_pause 00AC                  ??_delay 0076                  ??_pause 0074  
             __pmaintext 001A               __pintentry 0004               _count_flag 03C9  
                __ptext0 0000                  __ptext1 00A9                  __ptext2 007A  
                __ptext3 0092             __size_of_ISR 0017               delay@flags 0077  
   end_of_initialization 0016      start_initialization 0015              __end_of_ISR 00A9  
              ___latbits 0002            __pcstackBANK0 0020           __size_of_delay 0018  
         __size_of_pause 0003        interrupt_function 0004                 _btn_flag 03C8  
          __size_of_main 0060                 delay@num 0074                 intlevel1 0000  
             _OPTION_REG 0081  
