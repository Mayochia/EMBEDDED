

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Sun Mar 09 20:05:14 2025

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	intentry,global,class=CODE,delta=2
    18                           	dabs	1,0x7E,2
    19  0000                     	;# 
    20  0001                     	;# 
    21  0002                     	;# 
    22  0003                     	;# 
    23  0004                     	;# 
    24  0005                     	;# 
    25  0006                     	;# 
    26  0007                     	;# 
    27  0008                     	;# 
    28  0009                     	;# 
    29  000A                     	;# 
    30  000B                     	;# 
    31  000C                     	;# 
    32  000D                     	;# 
    33  000E                     	;# 
    34  000E                     	;# 
    35  000F                     	;# 
    36  0010                     	;# 
    37  0011                     	;# 
    38  0012                     	;# 
    39  0013                     	;# 
    40  0014                     	;# 
    41  0015                     	;# 
    42  0015                     	;# 
    43  0016                     	;# 
    44  0017                     	;# 
    45  0018                     	;# 
    46  0019                     	;# 
    47  001A                     	;# 
    48  001B                     	;# 
    49  001B                     	;# 
    50  001C                     	;# 
    51  001D                     	;# 
    52  001E                     	;# 
    53  001F                     	;# 
    54  0081                     	;# 
    55  0085                     	;# 
    56  0086                     	;# 
    57  0087                     	;# 
    58  0088                     	;# 
    59  0089                     	;# 
    60  008C                     	;# 
    61  008D                     	;# 
    62  008E                     	;# 
    63  0091                     	;# 
    64  0092                     	;# 
    65  0093                     	;# 
    66  0094                     	;# 
    67  0098                     	;# 
    68  0099                     	;# 
    69  009C                     	;# 
    70  009D                     	;# 
    71  009E                     	;# 
    72  009F                     	;# 
    73  010C                     	;# 
    74  010D                     	;# 
    75  010E                     	;# 
    76  010F                     	;# 
    77  018C                     	;# 
    78  018D                     	;# 
    79  0007                     _PORTC	set	7
    80  0008                     _PORTD	set	8
    81  005F                     _GIE	set	95
    82  005C                     _INTE	set	92
    83  0059                     _INTF	set	89
    84  0034                     _RB4	set	52
    85  0035                     _RB5	set	53
    86  0036                     _RB6	set	54
    87  005D                     _TMR0IE	set	93
    88  005A                     _TMR0IF	set	90
    89  0081                     _OPTION_REG	set	129
    90  0086                     _TRISB	set	134
    91  0087                     _TRISC	set	135
    92  0088                     _TRISD	set	136
    93                           
    94                           	psect	text0
    95  0000                     __ptext0:	
    96                           ; #config settings
    97                           
    98                           
    99                           	psect	cinit
   100  0015                     start_initialization:	
   101                           ;psect for function _ISR
   102                           
   103  0015                     __initialization:	
   104                           
   105                           ; Clear objects allocated to COMMON
   106  0015  01F9               	clrf	__pbssCOMMON& (0+127)
   107                           
   108                           ; Clear objects allocated to BANK0
   109  0016  01AC               	clrf	__pbssBANK0& (0+127)
   110  0017  01AD               	clrf	(__pbssBANK0+1)& (0+127)
   111  0018                     end_of_initialization:	
   112                           ;End of C runtime variable initialization code
   113                           
   114  0018                     __end_of__initialization:	
   115  0018  0183               	clrf	3
   116  0019  120A  118A  281C   	ljmp	_main	;jump to C main() function
   117                           
   118                           	psect	bssCOMMON
   119  0079                     __pbssCOMMON:	
   120  0079                     _count_flag:	
   121  0079                     	ds	1
   122                           
   123                           	psect	bssBANK0
   124  002C                     __pbssBANK0:	
   125  002C                     _btn_flag:	
   126  002C                     	ds	1
   127  002D                     _key:	
   128  002D                     	ds	1
   129                           
   130                           	psect	cstackCOMMON
   131  0070                     __pcstackCOMMON:	
   132  0070                     ?_ISR:	
   133  0070                     ??_ISR:	
   134                           ; 0 bytes @ 0x0
   135                           
   136  0070                     ?_dataCtrl:	
   137                           ; 0 bytes @ 0x0
   138                           
   139  0070                     ?_instCtrl:	
   140                           ; 0 bytes @ 0x0
   141                           
   142  0070                     ?_initLCD:	
   143                           ; 0 bytes @ 0x0
   144                           
   145  0070                     ?_main:	
   146                           ; 0 bytes @ 0x0
   147                           
   148                           
   149                           ; 0 bytes @ 0x0
   150  0070                     	ds	4
   151  0074                     ?_delay:	
   152  0074                     ?_delay_lcd:	
   153                           ; 0 bytes @ 0x4
   154                           
   155  0074                     delay@num:	
   156                           ; 0 bytes @ 0x4
   157                           
   158  0074                     delay_lcd@cnt:	
   159                           ; 2 bytes @ 0x4
   160                           
   161                           
   162                           ; 2 bytes @ 0x4
   163  0074                     	ds	2
   164  0076                     ??_delay:	
   165  0076                     ??_delay_lcd:	
   166                           ; 0 bytes @ 0x6
   167                           
   168  0076                     ??_dataCtrl:	
   169                           ; 0 bytes @ 0x6
   170                           
   171  0076                     ??_instCtrl:	
   172                           ; 0 bytes @ 0x6
   173                           
   174  0076                     dataCtrl@DATA:	
   175                           ; 0 bytes @ 0x6
   176                           
   177  0076                     instCtrl@INST:	
   178                           ; 1 bytes @ 0x6
   179                           
   180                           
   181                           ; 1 bytes @ 0x6
   182  0076                     	ds	1
   183  0077                     ??_initLCD:	
   184  0077                     delay@flags:	
   185                           ; 0 bytes @ 0x7
   186                           
   187                           
   188                           ; 2 bytes @ 0x7
   189  0077                     	ds	2
   190                           
   191                           	psect	cstackBANK0
   192  0020                     __pcstackBANK0:	
   193  0020                     delay_lcd@i:	
   194                           
   195                           ; 2 bytes @ 0x0
   196  0020                     	ds	2
   197  0022                     delay_lcd@j:	
   198                           
   199                           ; 2 bytes @ 0x2
   200  0022                     	ds	2
   201  0024                     ??_main:	
   202                           
   203                           ; 0 bytes @ 0x4
   204  0024                     	ds	1
   205  0025                     main@mode:	
   206                           
   207                           ; 1 bytes @ 0x5
   208  0025                     	ds	1
   209  0026                     main@speed:	
   210                           
   211                           ; 2 bytes @ 0x6
   212  0026                     	ds	2
   213  0028                     main@MSB:	
   214                           
   215                           ; 2 bytes @ 0x8
   216  0028                     	ds	2
   217  002A                     main@LSB:	
   218                           
   219                           ; 2 bytes @ 0xA
   220  002A                     	ds	2
   221                           
   222                           	psect	maintext
   223  001C                     __pmaintext:	
   224 ;;
   225 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   226 ;;
   227 ;; *************** function _main *****************
   228 ;; Defined at:
   229 ;;		line 67 in file "D:\From old laptop\Subjects\Uni\3rd Year M\2nd sem\Embedded Systems\Practice\PREMID\blink_delay.c"
   230 ;; Parameters:    Size  Location     Type
   231 ;;		None
   232 ;; Auto vars:     Size  Location     Type
   233 ;;  LSB             2   10[BANK0 ] int 
   234 ;;  MSB             2    8[BANK0 ] int 
   235 ;;  speed           2    6[BANK0 ] int 
   236 ;;  mode            1    5[BANK0 ] unsigned char 
   237 ;; Return value:  Size  Location     Type
   238 ;;		None               void
   239 ;; Registers used:
   240 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   241 ;; Tracked objects:
   242 ;;		On entry : 17F/0
   243 ;;		On exit  : 0/0
   244 ;;		Unchanged: 0/0
   245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   246 ;;      Params:         0       0       0       0       0
   247 ;;      Locals:         0       7       0       0       0
   248 ;;      Temps:          0       1       0       0       0
   249 ;;      Totals:         0       8       0       0       0
   250 ;;Total ram usage:        8 bytes
   251 ;; Hardware stack levels required when called:    4
   252 ;; This function calls:
   253 ;;		_dataCtrl
   254 ;;		_delay
   255 ;;		_initLCD
   256 ;;		_instCtrl
   257 ;; This function is called by:
   258 ;;		Startup code after reset
   259 ;; This function uses a non-reentrant model
   260 ;;
   261                           
   262                           
   263                           ;psect for function _main
   264  001C                     _main:	
   265                           
   266                           ;blink_delay.c: 68: int MSB = 0;
   267                           
   268                           ;incstack = 0
   269                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   270  001C  1283               	bcf	3,5	;RP0=0, select bank0
   271  001D  1303               	bcf	3,6	;RP1=0, select bank0
   272  001E  01A8               	clrf	main@MSB
   273  001F  01A9               	clrf	main@MSB+1
   274                           
   275                           ;blink_delay.c: 69: int LSB = 0;
   276  0020  01AA               	clrf	main@LSB
   277  0021  01AB               	clrf	main@LSB+1
   278                           
   279                           ;blink_delay.c: 70: int speed = 0;
   280  0022  01A6               	clrf	main@speed
   281  0023  01A7               	clrf	main@speed+1
   282                           
   283                           ;blink_delay.c: 71: unsigned char mode;
   284                           ;blink_delay.c: 73: TRISB = 0x0F;
   285  0024  300F               	movlw	15
   286  0025  1683               	bsf	3,5	;RP0=1, select bank1
   287  0026  1303               	bcf	3,6	;RP1=0, select bank1
   288  0027  0086               	movwf	6	;volatile
   289                           
   290                           ;blink_delay.c: 74: TRISC = 0xFF;
   291  0028  30FF               	movlw	255
   292  0029  0087               	movwf	7	;volatile
   293                           
   294                           ;blink_delay.c: 75: TRISD = 0x00;
   295  002A  0188               	clrf	8	;volatile
   296                           
   297                           ;blink_delay.c: 76: OPTION_REG = 0xC4;
   298  002B  30C4               	movlw	196
   299  002C  0081               	movwf	1	;volatile
   300                           
   301                           ;blink_delay.c: 77: INTE = 1;
   302  002D  160B               	bsf	11,4	;volatile
   303                           
   304                           ;blink_delay.c: 78: INTF = 0;
   305  002E  108B               	bcf	11,1	;volatile
   306                           
   307                           ;blink_delay.c: 79: TMR0IE = 1;
   308  002F  168B               	bsf	11,5	;volatile
   309                           
   310                           ;blink_delay.c: 80: TMR0IF = 0;
   311  0030  110B               	bcf	11,2	;volatile
   312                           
   313                           ;blink_delay.c: 81: GIE = 1;
   314  0031  178B               	bsf	11,7	;volatile
   315                           
   316                           ;blink_delay.c: 83: initLCD();
   317  0032  120A  118A  2178  120A  118A  	fcall	_initLCD
   318                           
   319                           ;blink_delay.c: 84: instCtrl(0xC8);
   320  0037  30C8               	movlw	200
   321  0038  120A  118A  21C9  120A  118A  	fcall	_instCtrl
   322                           
   323                           ;blink_delay.c: 85: dataCtrl('0');
   324  003D  3030               	movlw	48
   325  003E  120A  118A  21DC  120A  118A  	fcall	_dataCtrl
   326                           
   327                           ;blink_delay.c: 86: instCtrl(0xC9);
   328  0043  30C9               	movlw	201
   329  0044  120A  118A  21C9  120A  118A  	fcall	_instCtrl
   330                           
   331                           ;blink_delay.c: 87: dataCtrl('0');
   332  0049  3030               	movlw	48
   333  004A  120A  118A  21DC  120A  118A  	fcall	_dataCtrl
   334  004F                     l977:	
   335                           ;blink_delay.c: 89: while(1){
   336                           
   337                           
   338                           ;blink_delay.c: 90: if(btn_flag == 1) {
   339  004F  1283               	bcf	3,5	;RP0=0, select bank0
   340  0050  1303               	bcf	3,6	;RP1=0, select bank0
   341  0051  082C               	movf	_btn_flag,w
   342  0052  3A01               	xorlw	1
   343  0053  1D03               	skipz
   344  0054  28A0               	goto	l1011
   345                           
   346                           ;blink_delay.c: 91: key = PORTC & 0x0F;
   347  0055  0807               	movf	7,w	;volatile
   348  0056  390F               	andlw	15
   349  0057  00A4               	movwf	??_main
   350  0058  0824               	movf	??_main,w
   351  0059  00AD               	movwf	_key
   352                           
   353                           ;blink_delay.c: 93: switch(key){
   354  005A  2879               	goto	l1007
   355  005B                     l981:	
   356                           ;blink_delay.c: 94: case 0x0C:
   357                           
   358                           
   359                           ;blink_delay.c: 95: mode = 0x0C;
   360  005B  300C               	movlw	12
   361  005C  285E               	goto	L1
   362  005D                     l983:	
   363                           ;blink_delay.c: 97: case 0x0E:
   364                           
   365                           ;blink_delay.c: 96: break;
   366                           
   367                           
   368                           ;blink_delay.c: 98: mode = 0x0E;
   369  005D  300E               	movlw	14
   370  005E                     L1:	
   371  005E  00A4               	movwf	??_main
   372  005F  0824               	movf	??_main,w
   373  0060  00A5               	movwf	main@mode
   374                           
   375                           ;blink_delay.c: 99: break;
   376  0061  289F               	goto	l1009
   377  0062                     l985:	
   378                           ;blink_delay.c: 100: case 0x00:
   379                           
   380                           
   381                           ;blink_delay.c: 101: speed = 12;
   382  0062  300C               	movlw	12
   383  0063  2875               	goto	L10
   384  0064                     l987:	
   385                           ;blink_delay.c: 103: case 0x01:
   386                           
   387                           ;blink_delay.c: 102: break;
   388                           
   389                           
   390                           ;blink_delay.c: 104: speed = 24;
   391  0064  3018               	movlw	24
   392  0065  2875               	goto	L10
   393  0066                     l989:	
   394                           ;blink_delay.c: 106: case 0x02:
   395                           
   396                           ;blink_delay.c: 105: break;
   397                           
   398                           
   399                           ;blink_delay.c: 107: speed = 37;
   400  0066  3025               	movlw	37
   401  0067  2875               	goto	L10
   402  0068                     l991:	
   403                           ;blink_delay.c: 109: case 0x04:
   404                           
   405                           ;blink_delay.c: 108: break;
   406                           
   407                           
   408                           ;blink_delay.c: 110: speed = 49;
   409  0068  3031               	movlw	49
   410  0069  2875               	goto	L10
   411  006A                     l993:	
   412                           ;blink_delay.c: 112: case 0x05:
   413                           
   414                           ;blink_delay.c: 111: break;
   415                           
   416                           
   417                           ;blink_delay.c: 113: speed = 61;
   418  006A  303D               	movlw	61
   419  006B  2875               	goto	L10
   420  006C                     l995:	
   421                           ;blink_delay.c: 115: case 0x06:
   422                           
   423                           ;blink_delay.c: 114: break;
   424                           
   425                           
   426                           ;blink_delay.c: 116: speed = 73;
   427  006C  3049               	movlw	73
   428  006D  2875               	goto	L10
   429  006E                     l997:	
   430                           ;blink_delay.c: 118: case 0x08:
   431                           
   432                           ;blink_delay.c: 117: break;
   433                           
   434                           
   435                           ;blink_delay.c: 119: speed = 85;
   436  006E  3055               	movlw	85
   437  006F  2875               	goto	L10
   438  0070                     l999:	
   439                           ;blink_delay.c: 121: case 0x09:
   440                           
   441                           ;blink_delay.c: 120: break;
   442                           
   443                           
   444                           ;blink_delay.c: 122: speed = 98;
   445  0070  3062               	movlw	98
   446  0071  2875               	goto	L10
   447  0072                     l1001:	
   448                           ;blink_delay.c: 124: case 0x0A:
   449                           
   450                           ;blink_delay.c: 123: break;
   451                           
   452                           
   453                           ;blink_delay.c: 125: speed = 110;
   454  0072  306E               	movlw	110
   455  0073  2875               	goto	L10
   456  0074                     l1003:	
   457                           ;blink_delay.c: 127: case 0x0D:
   458                           
   459                           ;blink_delay.c: 126: break;
   460                           
   461                           
   462                           ;blink_delay.c: 128: speed = 122;
   463  0074  307A               	movlw	122
   464  0075                     L10:	
   465  0075  00A6               	movwf	main@speed
   466  0076  3000               	movlw	0
   467  0077  00A7               	movwf	main@speed+1
   468                           
   469                           ;blink_delay.c: 130: }
   470                           
   471                           ;blink_delay.c: 129: break;
   472  0078  289F               	goto	l1009
   473  0079                     l1007:	
   474  0079  082D               	movf	_key,w
   475                           
   476                           ; Switch size 1, requested type "space"
   477                           ; Number of cases is 12, Range of values is 0 to 14
   478                           ; switch strategies available:
   479                           ; Name         Instructions Cycles
   480                           ; simple_byte           37    19 (average)
   481                           ; direct_byte           53     8 (fixed)
   482                           ; jumptable            260     6 (fixed)
   483                           ;	Chosen strategy is simple_byte
   484  007A  3A00               	xorlw	0	; case 0
   485  007B  1903               	skipnz
   486  007C  2862               	goto	l985
   487  007D  3A01               	xorlw	1	; case 1
   488  007E  1903               	skipnz
   489  007F  2864               	goto	l987
   490  0080  3A03               	xorlw	3	; case 2
   491  0081  1903               	skipnz
   492  0082  2866               	goto	l989
   493  0083  3A06               	xorlw	6	; case 4
   494  0084  1903               	skipnz
   495  0085  2868               	goto	l991
   496  0086  3A01               	xorlw	1	; case 5
   497  0087  1903               	skipnz
   498  0088  286A               	goto	l993
   499  0089  3A03               	xorlw	3	; case 6
   500  008A  1903               	skipnz
   501  008B  286C               	goto	l995
   502  008C  3A0E               	xorlw	14	; case 8
   503  008D  1903               	skipnz
   504  008E  286E               	goto	l997
   505  008F  3A01               	xorlw	1	; case 9
   506  0090  1903               	skipnz
   507  0091  2870               	goto	l999
   508  0092  3A03               	xorlw	3	; case 10
   509  0093  1903               	skipnz
   510  0094  2872               	goto	l1001
   511  0095  3A06               	xorlw	6	; case 12
   512  0096  1903               	skipnz
   513  0097  285B               	goto	l981
   514  0098  3A01               	xorlw	1	; case 13
   515  0099  1903               	skipnz
   516  009A  2874               	goto	l1003
   517  009B  3A03               	xorlw	3	; case 14
   518  009C  1903               	skipnz
   519  009D  285D               	goto	l983
   520  009E  289F               	goto	l1009
   521  009F                     l1009:	
   522                           
   523                           ;blink_delay.c: 131: btn_flag = 0;
   524  009F  01AC               	clrf	_btn_flag
   525  00A0                     l1011:	
   526                           
   527                           ;blink_delay.c: 132: }
   528                           ;blink_delay.c: 135: if (mode == 0x0C) {
   529  00A0  0825               	movf	main@mode,w
   530  00A1  3A0C               	xorlw	12
   531  00A2  1D03               	skipz
   532  00A3  28F3               	goto	l1037
   533                           
   534                           ;blink_delay.c: 136: if (MSB == 0 && LSB == 0) {
   535  00A4  0829               	movf	main@MSB+1,w
   536  00A5  0428               	iorwf	main@MSB,w
   537  00A6  1D03               	skipz
   538  00A7  28B0               	goto	l1019
   539  00A8  082B               	movf	main@LSB+1,w
   540  00A9  042A               	iorwf	main@LSB,w
   541  00AA  1D03               	skipz
   542  00AB  28B0               	goto	l1019
   543                           
   544                           ;blink_delay.c: 137: MSB = 9;
   545  00AC  3009               	movlw	9
   546  00AD  00A8               	movwf	main@MSB
   547  00AE  3000               	movlw	0
   548  00AF  28BB               	goto	L12
   549  00B0                     l1019:	
   550                           ;blink_delay.c: 139: } else if (LSB == 0) {
   551                           
   552                           ;blink_delay.c: 138: LSB = 9;
   553                           
   554  00B0  082B               	movf	main@LSB+1,w
   555  00B1  042A               	iorwf	main@LSB,w
   556  00B2  1D03               	skipz
   557  00B3  28C0               	goto	l1025
   558                           
   559                           ;blink_delay.c: 140: MSB = MSB - 1;
   560  00B4  0828               	movf	main@MSB,w
   561  00B5  3EFF               	addlw	255
   562  00B6  00A8               	movwf	main@MSB
   563  00B7  0829               	movf	main@MSB+1,w
   564  00B8  1803               	skipnc
   565  00B9  3E01               	addlw	1
   566  00BA  3EFF               	addlw	255
   567  00BB                     L12:	
   568  00BB  00A9               	movwf	main@MSB+1
   569                           
   570                           ;blink_delay.c: 141: LSB = 9;
   571  00BC  3009               	movlw	9
   572  00BD  00AA               	movwf	main@LSB
   573  00BE  3000               	movlw	0
   574  00BF  28C7               	goto	L11
   575  00C0                     l1025:	
   576                           ;blink_delay.c: 142: } else {
   577                           
   578                           
   579                           ;blink_delay.c: 143: LSB = LSB - 1;
   580  00C0  082A               	movf	main@LSB,w
   581  00C1  3EFF               	addlw	255
   582  00C2  00AA               	movwf	main@LSB
   583  00C3  082B               	movf	main@LSB+1,w
   584  00C4  1803               	skipnc
   585  00C5  3E01               	addlw	1
   586  00C6  3EFF               	addlw	255
   587  00C7                     L11:	
   588  00C7  00AB               	movwf	main@LSB+1
   589                           
   590                           ;blink_delay.c: 144: }
   591                           ;blink_delay.c: 146: instCtrl(0xC8);
   592  00C8  30C8               	movlw	200
   593  00C9  120A  118A  21C9  120A  118A  	fcall	_instCtrl
   594                           
   595                           ;blink_delay.c: 147: dataCtrl(MSB + '0');
   596  00CE  1283               	bcf	3,5	;RP0=0, select bank0
   597  00CF  1303               	bcf	3,6	;RP1=0, select bank0
   598  00D0  0828               	movf	main@MSB,w
   599  00D1  3E30               	addlw	48
   600  00D2  120A  118A  21DC  120A  118A  	fcall	_dataCtrl
   601                           
   602                           ;blink_delay.c: 148: instCtrl(0xC9);
   603  00D7  30C9               	movlw	201
   604  00D8  120A  118A  21C9  120A  118A  	fcall	_instCtrl
   605                           
   606                           ;blink_delay.c: 149: dataCtrl(LSB + '0');
   607  00DD  1283               	bcf	3,5	;RP0=0, select bank0
   608  00DE  1303               	bcf	3,6	;RP1=0, select bank0
   609  00DF  082A               	movf	main@LSB,w
   610  00E0  3E30               	addlw	48
   611  00E1  120A  118A  21DC  120A  118A  	fcall	_dataCtrl
   612                           
   613                           ;blink_delay.c: 150: delay(speed);
   614  00E6  1283               	bcf	3,5	;RP0=0, select bank0
   615  00E7  1303               	bcf	3,6	;RP1=0, select bank0
   616  00E8  0827               	movf	main@speed+1,w
   617  00E9  01F5               	clrf	delay@num+1
   618  00EA  07F5               	addwf	delay@num+1,f
   619  00EB  0826               	movf	main@speed,w
   620  00EC  01F4               	clrf	delay@num
   621  00ED  07F4               	addwf	delay@num,f
   622  00EE  120A  118A  2198  120A  118A  	fcall	_delay
   623  00F3                     l1037:	
   624                           
   625                           ;blink_delay.c: 151: }
   626                           ;blink_delay.c: 153: if (mode == 0x0E) {
   627  00F3  1283               	bcf	3,5	;RP0=0, select bank0
   628  00F4  1303               	bcf	3,6	;RP1=0, select bank0
   629  00F5  0825               	movf	main@mode,w
   630  00F6  3A0E               	xorlw	14
   631  00F7  1D03               	skipz
   632  00F8  284F               	goto	l977
   633                           
   634                           ;blink_delay.c: 154: if (MSB == 9 && LSB == 9) {
   635  00F9  3009               	movlw	9
   636  00FA  0628               	xorwf	main@MSB,w
   637  00FB  0429               	iorwf	main@MSB+1,w
   638  00FC  1D03               	skipz
   639  00FD  2908               	goto	l1045
   640  00FE  3009               	movlw	9
   641  00FF  062A               	xorwf	main@LSB,w
   642  0100  042B               	iorwf	main@LSB+1,w
   643  0101  1D03               	skipz
   644  0102  2908               	goto	l1045
   645                           
   646                           ;blink_delay.c: 155: MSB = 0;
   647  0103  01A8               	clrf	main@MSB
   648  0104  01A9               	clrf	main@MSB+1
   649                           
   650                           ;blink_delay.c: 156: LSB = 0;
   651  0105  01AA               	clrf	main@LSB
   652  0106  01AB               	clrf	main@LSB+1
   653                           
   654                           ;blink_delay.c: 157: } else if (LSB == 9) {
   655  0107  2920               	goto	l1053
   656  0108                     l1045:	
   657  0108  3009               	movlw	9
   658  0109  062A               	xorwf	main@LSB,w
   659  010A  042B               	iorwf	main@LSB+1,w
   660  010B  1D03               	skipz
   661  010C  2918               	goto	l1051
   662                           
   663                           ;blink_delay.c: 158: LSB = 0;
   664  010D  01AA               	clrf	main@LSB
   665  010E  01AB               	clrf	main@LSB+1
   666                           
   667                           ;blink_delay.c: 159: MSB = MSB + 1;
   668  010F  0828               	movf	main@MSB,w
   669  0110  3E01               	addlw	1
   670  0111  00A8               	movwf	main@MSB
   671  0112  0829               	movf	main@MSB+1,w
   672  0113  1803               	skipnc
   673  0114  3E01               	addlw	1
   674  0115  3E00               	addlw	0
   675  0116  00A9               	movwf	main@MSB+1
   676                           
   677                           ;blink_delay.c: 160: } else {
   678  0117  2920               	goto	l1053
   679  0118                     l1051:	
   680                           
   681                           ;blink_delay.c: 161: LSB = LSB + 1;
   682  0118  082A               	movf	main@LSB,w
   683  0119  3E01               	addlw	1
   684  011A  00AA               	movwf	main@LSB
   685  011B  082B               	movf	main@LSB+1,w
   686  011C  1803               	skipnc
   687  011D  3E01               	addlw	1
   688  011E  3E00               	addlw	0
   689  011F  00AB               	movwf	main@LSB+1
   690  0120                     l1053:	
   691                           
   692                           ;blink_delay.c: 162: }
   693                           ;blink_delay.c: 164: instCtrl(0xC8);
   694  0120  30C8               	movlw	200
   695  0121  120A  118A  21C9  120A  118A  	fcall	_instCtrl
   696                           
   697                           ;blink_delay.c: 165: dataCtrl(MSB + '0');
   698  0126  1283               	bcf	3,5	;RP0=0, select bank0
   699  0127  1303               	bcf	3,6	;RP1=0, select bank0
   700  0128  0828               	movf	main@MSB,w
   701  0129  3E30               	addlw	48
   702  012A  120A  118A  21DC  120A  118A  	fcall	_dataCtrl
   703                           
   704                           ;blink_delay.c: 166: instCtrl(0xC9);
   705  012F  30C9               	movlw	201
   706  0130  120A  118A  21C9  120A  118A  	fcall	_instCtrl
   707                           
   708                           ;blink_delay.c: 167: dataCtrl(LSB + '0');
   709  0135  1283               	bcf	3,5	;RP0=0, select bank0
   710  0136  1303               	bcf	3,6	;RP1=0, select bank0
   711  0137  082A               	movf	main@LSB,w
   712  0138  3E30               	addlw	48
   713  0139  120A  118A  21DC  120A  118A  	fcall	_dataCtrl
   714                           
   715                           ;blink_delay.c: 168: delay(speed);
   716  013E  1283               	bcf	3,5	;RP0=0, select bank0
   717  013F  1303               	bcf	3,6	;RP1=0, select bank0
   718  0140  0827               	movf	main@speed+1,w
   719  0141  01F5               	clrf	delay@num+1
   720  0142  07F5               	addwf	delay@num+1,f
   721  0143  0826               	movf	main@speed,w
   722  0144  01F4               	clrf	delay@num
   723  0145  07F4               	addwf	delay@num,f
   724  0146  120A  118A  2198  120A  118A  	fcall	_delay
   725  014B  284F               	goto	l977
   726  014C                     __end_of_main:	
   727                           
   728                           	psect	text1
   729  0178                     __ptext1:	
   730 ;; *************** function _initLCD *****************
   731 ;; Defined at:
   732 ;;		line 59 in file "D:\From old laptop\Subjects\Uni\3rd Year M\2nd sem\Embedded Systems\Practice\PREMID\blink_delay.c"
   733 ;; Parameters:    Size  Location     Type
   734 ;;		None
   735 ;; Auto vars:     Size  Location     Type
   736 ;;		None
   737 ;; Return value:  Size  Location     Type
   738 ;;		None               void
   739 ;; Registers used:
   740 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   741 ;; Tracked objects:
   742 ;;		On entry : 0/0
   743 ;;		On exit  : 0/0
   744 ;;		Unchanged: 0/0
   745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   746 ;;      Params:         0       0       0       0       0
   747 ;;      Locals:         0       0       0       0       0
   748 ;;      Temps:          0       0       0       0       0
   749 ;;      Totals:         0       0       0       0       0
   750 ;;Total ram usage:        0 bytes
   751 ;; Hardware stack levels used:    1
   752 ;; Hardware stack levels required when called:    3
   753 ;; This function calls:
   754 ;;		_delay_lcd
   755 ;;		_instCtrl
   756 ;; This function is called by:
   757 ;;		_main
   758 ;; This function uses a non-reentrant model
   759 ;;
   760                           
   761                           
   762                           ;psect for function _initLCD
   763  0178                     _initLCD:	
   764                           
   765                           ;blink_delay.c: 60: delay_lcd(1);
   766                           
   767                           ;incstack = 0
   768                           ; Regs used in _initLCD: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   769  0178  3001               	movlw	1
   770  0179  00F4               	movwf	delay_lcd@cnt
   771  017A  3000               	movlw	0
   772  017B  00F5               	movwf	delay_lcd@cnt+1
   773  017C  120A  118A  214C  120A  118A  	fcall	_delay_lcd
   774                           
   775                           ;blink_delay.c: 61: instCtrl(0x38);
   776  0181  3038               	movlw	56
   777  0182  120A  118A  21C9  120A  118A  	fcall	_instCtrl
   778                           
   779                           ;blink_delay.c: 62: instCtrl(0x01);
   780  0187  3001               	movlw	1
   781  0188  120A  118A  21C9  120A  118A  	fcall	_instCtrl
   782                           
   783                           ;blink_delay.c: 63: instCtrl(0x06);
   784  018D  3006               	movlw	6
   785  018E  120A  118A  21C9  120A  118A  	fcall	_instCtrl
   786                           
   787                           ;blink_delay.c: 64: instCtrl(0x0E);
   788  0193  300E               	movlw	14
   789  0194  120A  118A  21C9   	fcall	_instCtrl
   790  0197  0008               	return
   791  0198                     __end_of_initLCD:	
   792                           
   793                           	psect	text2
   794  01C9                     __ptext2:	
   795 ;; *************** function _instCtrl *****************
   796 ;; Defined at:
   797 ;;		line 50 in file "D:\From old laptop\Subjects\Uni\3rd Year M\2nd sem\Embedded Systems\Practice\PREMID\blink_delay.c"
   798 ;; Parameters:    Size  Location     Type
   799 ;;  INST            1    wreg     unsigned char 
   800 ;; Auto vars:     Size  Location     Type
   801 ;;  INST            1    6[COMMON] unsigned char 
   802 ;; Return value:  Size  Location     Type
   803 ;;		None               void
   804 ;; Registers used:
   805 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   806 ;; Tracked objects:
   807 ;;		On entry : 0/0
   808 ;;		On exit  : 0/0
   809 ;;		Unchanged: 0/0
   810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   811 ;;      Params:         0       0       0       0       0
   812 ;;      Locals:         1       0       0       0       0
   813 ;;      Temps:          0       0       0       0       0
   814 ;;      Totals:         1       0       0       0       0
   815 ;;Total ram usage:        1 bytes
   816 ;; Hardware stack levels used:    1
   817 ;; Hardware stack levels required when called:    2
   818 ;; This function calls:
   819 ;;		_delay_lcd
   820 ;; This function is called by:
   821 ;;		_initLCD
   822 ;;		_main
   823 ;; This function uses a non-reentrant model
   824 ;;
   825                           
   826                           
   827                           ;psect for function _instCtrl
   828  01C9                     _instCtrl:	
   829                           
   830                           ;incstack = 0
   831                           ; Regs used in _instCtrl: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   832                           ;instCtrl@INST stored from wreg
   833  01C9  00F6               	movwf	instCtrl@INST
   834                           
   835                           ;blink_delay.c: 51: PORTD=INST;
   836  01CA  0876               	movf	instCtrl@INST,w
   837  01CB  1283               	bcf	3,5	;RP0=0, select bank0
   838  01CC  1303               	bcf	3,6	;RP1=0, select bank0
   839  01CD  0088               	movwf	8	;volatile
   840                           
   841                           ;blink_delay.c: 52: RB4=0;
   842  01CE  1206               	bcf	6,4	;volatile
   843                           
   844                           ;blink_delay.c: 53: RB6=0;
   845  01CF  1306               	bcf	6,6	;volatile
   846                           
   847                           ;blink_delay.c: 54: RB5=1;
   848  01D0  1686               	bsf	6,5	;volatile
   849                           
   850                           ;blink_delay.c: 55: delay_lcd(200);
   851  01D1  30C8               	movlw	200
   852  01D2  00F4               	movwf	delay_lcd@cnt
   853  01D3  3000               	movlw	0
   854  01D4  00F5               	movwf	delay_lcd@cnt+1
   855  01D5  120A  118A  214C   	fcall	_delay_lcd
   856                           
   857                           ;blink_delay.c: 56: RB5=0;
   858  01D8  1283               	bcf	3,5	;RP0=0, select bank0
   859  01D9  1303               	bcf	3,6	;RP1=0, select bank0
   860  01DA  1286               	bcf	6,5	;volatile
   861  01DB  0008               	return
   862  01DC                     __end_of_instCtrl:	
   863                           
   864                           	psect	text3
   865  0198                     __ptext3:	
   866 ;; *************** function _delay *****************
   867 ;; Defined at:
   868 ;;		line 23 in file "D:\From old laptop\Subjects\Uni\3rd Year M\2nd sem\Embedded Systems\Practice\PREMID\blink_delay.c"
   869 ;; Parameters:    Size  Location     Type
   870 ;;  num             2    4[COMMON] int 
   871 ;; Auto vars:     Size  Location     Type
   872 ;;  flags           2    7[COMMON] int 
   873 ;; Return value:  Size  Location     Type
   874 ;;		None               void
   875 ;; Registers used:
   876 ;;		wreg, status,2
   877 ;; Tracked objects:
   878 ;;		On entry : 0/0
   879 ;;		On exit  : 0/0
   880 ;;		Unchanged: 0/0
   881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   882 ;;      Params:         2       0       0       0       0
   883 ;;      Locals:         2       0       0       0       0
   884 ;;      Temps:          1       0       0       0       0
   885 ;;      Totals:         5       0       0       0       0
   886 ;;Total ram usage:        5 bytes
   887 ;; Hardware stack levels used:    1
   888 ;; Hardware stack levels required when called:    1
   889 ;; This function calls:
   890 ;;		Nothing
   891 ;; This function is called by:
   892 ;;		_main
   893 ;; This function uses a non-reentrant model
   894 ;;
   895                           
   896                           
   897                           ;psect for function _delay
   898  0198                     _delay:	
   899                           
   900                           ;blink_delay.c: 25: int flags = 0;
   901                           
   902                           ;incstack = 0
   903                           ; Regs used in _delay: [wreg+status,2]
   904  0198  01F7               	clrf	delay@flags
   905  0199  01F8               	clrf	delay@flags+1
   906  019A                     l767:	
   907                           ;blink_delay.c: 27: while (flags < num) {
   908                           
   909  019A  0878               	movf	delay@flags+1,w
   910  019B  3A80               	xorlw	128
   911  019C  00F6               	movwf	??_delay
   912  019D  0875               	movf	delay@num+1,w
   913  019E  3A80               	xorlw	128
   914  019F  0276               	subwf	??_delay,w
   915  01A0  1D03               	skipz
   916  01A1  29A4               	goto	u235
   917  01A2  0874               	movf	delay@num,w
   918  01A3  0277               	subwf	delay@flags,w
   919  01A4                     u235:	
   920  01A4  1803               	btfsc	3,0
   921  01A5  0008               	return
   922                           
   923                           ;blink_delay.c: 28: if(count_flag) {
   924  01A6  0879               	movf	_count_flag,w
   925  01A7  1903               	btfsc	3,2
   926  01A8  299A               	goto	l767
   927                           
   928                           ;blink_delay.c: 29: count_flag = 0;
   929  01A9  01F9               	clrf	_count_flag
   930                           
   931                           ;blink_delay.c: 30: flags++;
   932  01AA  3001               	movlw	1
   933  01AB  07F7               	addwf	delay@flags,f
   934  01AC  1803               	skipnc
   935  01AD  0AF8               	incf	delay@flags+1,f
   936  01AE  3000               	movlw	0
   937  01AF  07F8               	addwf	delay@flags+1,f
   938  01B0  299A               	goto	l767
   939  01B1                     __end_of_delay:	
   940                           
   941                           	psect	text4
   942  01DC                     __ptext4:	
   943 ;; *************** function _dataCtrl *****************
   944 ;; Defined at:
   945 ;;		line 41 in file "D:\From old laptop\Subjects\Uni\3rd Year M\2nd sem\Embedded Systems\Practice\PREMID\blink_delay.c"
   946 ;; Parameters:    Size  Location     Type
   947 ;;  DATA            1    wreg     unsigned char 
   948 ;; Auto vars:     Size  Location     Type
   949 ;;  DATA            1    6[COMMON] unsigned char 
   950 ;; Return value:  Size  Location     Type
   951 ;;		None               void
   952 ;; Registers used:
   953 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   954 ;; Tracked objects:
   955 ;;		On entry : 0/0
   956 ;;		On exit  : 0/0
   957 ;;		Unchanged: 0/0
   958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   959 ;;      Params:         0       0       0       0       0
   960 ;;      Locals:         1       0       0       0       0
   961 ;;      Temps:          0       0       0       0       0
   962 ;;      Totals:         1       0       0       0       0
   963 ;;Total ram usage:        1 bytes
   964 ;; Hardware stack levels used:    1
   965 ;; Hardware stack levels required when called:    2
   966 ;; This function calls:
   967 ;;		_delay_lcd
   968 ;; This function is called by:
   969 ;;		_main
   970 ;; This function uses a non-reentrant model
   971 ;;
   972                           
   973                           
   974                           ;psect for function _dataCtrl
   975  01DC                     _dataCtrl:	
   976                           
   977                           ;incstack = 0
   978                           ; Regs used in _dataCtrl: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   979                           ;dataCtrl@DATA stored from wreg
   980  01DC  00F6               	movwf	dataCtrl@DATA
   981                           
   982                           ;blink_delay.c: 42: PORTD=DATA;
   983  01DD  0876               	movf	dataCtrl@DATA,w
   984  01DE  1283               	bcf	3,5	;RP0=0, select bank0
   985  01DF  1303               	bcf	3,6	;RP1=0, select bank0
   986  01E0  0088               	movwf	8	;volatile
   987                           
   988                           ;blink_delay.c: 43: RB4=1;
   989  01E1  1606               	bsf	6,4	;volatile
   990                           
   991                           ;blink_delay.c: 44: RB6=0;
   992  01E2  1306               	bcf	6,6	;volatile
   993                           
   994                           ;blink_delay.c: 45: RB5=1;
   995  01E3  1686               	bsf	6,5	;volatile
   996                           
   997                           ;blink_delay.c: 46: delay_lcd(200);
   998  01E4  30C8               	movlw	200
   999  01E5  00F4               	movwf	delay_lcd@cnt
  1000  01E6  3000               	movlw	0
  1001  01E7  00F5               	movwf	delay_lcd@cnt+1
  1002  01E8  120A  118A  214C   	fcall	_delay_lcd
  1003                           
  1004                           ;blink_delay.c: 47: RB5=0;
  1005  01EB  1283               	bcf	3,5	;RP0=0, select bank0
  1006  01EC  1303               	bcf	3,6	;RP1=0, select bank0
  1007  01ED  1286               	bcf	6,5	;volatile
  1008  01EE  0008               	return
  1009  01EF                     __end_of_dataCtrl:	
  1010                           
  1011                           	psect	text5
  1012  014C                     __ptext5:	
  1013 ;; *************** function _delay_lcd *****************
  1014 ;; Defined at:
  1015 ;;		line 35 in file "D:\From old laptop\Subjects\Uni\3rd Year M\2nd sem\Embedded Systems\Practice\PREMID\blink_delay.c"
  1016 ;; Parameters:    Size  Location     Type
  1017 ;;  cnt             2    4[COMMON] int 
  1018 ;; Auto vars:     Size  Location     Type
  1019 ;;  j               2    2[BANK0 ] int 
  1020 ;;  i               2    0[BANK0 ] int 
  1021 ;; Return value:  Size  Location     Type
  1022 ;;		None               void
  1023 ;; Registers used:
  1024 ;;		wreg, status,2, status,0, btemp+1
  1025 ;; Tracked objects:
  1026 ;;		On entry : 0/0
  1027 ;;		On exit  : 0/0
  1028 ;;		Unchanged: 0/0
  1029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1030 ;;      Params:         2       0       0       0       0
  1031 ;;      Locals:         0       4       0       0       0
  1032 ;;      Temps:          0       0       0       0       0
  1033 ;;      Totals:         2       4       0       0       0
  1034 ;;Total ram usage:        6 bytes
  1035 ;; Hardware stack levels used:    1
  1036 ;; Hardware stack levels required when called:    1
  1037 ;; This function calls:
  1038 ;;		Nothing
  1039 ;; This function is called by:
  1040 ;;		_dataCtrl
  1041 ;;		_instCtrl
  1042 ;;		_initLCD
  1043 ;; This function uses a non-reentrant model
  1044 ;;
  1045                           
  1046                           
  1047                           ;psect for function _delay_lcd
  1048  014C                     _delay_lcd:	
  1049                           
  1050                           ;blink_delay.c: 36: int i, j;
  1051                           ;blink_delay.c: 37: for (i = cnt; i != 0; i--);
  1052                           
  1053                           ;incstack = 0
  1054                           ; Regs used in _delay_lcd: [wreg+status,2+status,0+btemp+1]
  1055  014C  0875               	movf	delay_lcd@cnt+1,w
  1056  014D  1283               	bcf	3,5	;RP0=0, select bank0
  1057  014E  1303               	bcf	3,6	;RP1=0, select bank0
  1058  014F  01A1               	clrf	delay_lcd@i+1
  1059  0150  07A1               	addwf	delay_lcd@i+1,f
  1060  0151  0874               	movf	delay_lcd@cnt,w
  1061  0152  01A0               	clrf	delay_lcd@i
  1062  0153  07A0               	addwf	delay_lcd@i,f
  1063  0154  0821               	movf	delay_lcd@i+1,w
  1064  0155  0420               	iorwf	delay_lcd@i,w
  1065  0156  1903               	btfsc	3,2
  1066  0157  2962               	goto	l913
  1067  0158                     l909:	
  1068  0158  30FF               	movlw	255
  1069  0159  07A0               	addwf	delay_lcd@i,f
  1070  015A  1803               	skipnc
  1071  015B  0AA1               	incf	delay_lcd@i+1,f
  1072  015C  30FF               	movlw	255
  1073  015D  07A1               	addwf	delay_lcd@i+1,f
  1074  015E  0821               	movf	delay_lcd@i+1,w
  1075  015F  0420               	iorwf	delay_lcd@i,w
  1076  0160  1D03               	skipz
  1077  0161  2958               	goto	l909
  1078  0162                     l913:	
  1079                           
  1080                           ;blink_delay.c: 38: for (j = 0; j < 1000; j++);
  1081  0162  01A2               	clrf	delay_lcd@j
  1082  0163  01A3               	clrf	delay_lcd@j+1
  1083  0164                     L13:	
  1084  0164  0823               	movf	delay_lcd@j+1,w
  1085  0165  3A80               	xorlw	128
  1086  0166  00FF               	movwf	127
  1087  0167  3083               	movlw	131
  1088  0168  027F               	subwf	127,w
  1089  0169  1D03               	skipz
  1090  016A  296D               	goto	u375
  1091  016B  30E8               	movlw	232
  1092  016C  0222               	subwf	delay_lcd@j,w
  1093  016D                     u375:	
  1094  016D  1803               	btfsc	3,0
  1095  016E  0008               	return
  1096  016F  3001               	movlw	1
  1097  0170  1283               	bcf	3,5	;RP0=0, select bank0
  1098  0171  1303               	bcf	3,6	;RP1=0, select bank0
  1099  0172  07A2               	addwf	delay_lcd@j,f
  1100  0173  1803               	skipnc
  1101  0174  0AA3               	incf	delay_lcd@j+1,f
  1102  0175  3000               	movlw	0
  1103  0176  07A3               	addwf	delay_lcd@j+1,f
  1104  0177  2964               	goto	L13
  1105  0178                     __end_of_delay_lcd:	
  1106                           
  1107                           	psect	text6
  1108  01B1                     __ptext6:	
  1109 ;; *************** function _ISR *****************
  1110 ;; Defined at:
  1111 ;;		line 7 in file "D:\From old laptop\Subjects\Uni\3rd Year M\2nd sem\Embedded Systems\Practice\PREMID\blink_delay.c"
  1112 ;; Parameters:    Size  Location     Type
  1113 ;;		None
  1114 ;; Auto vars:     Size  Location     Type
  1115 ;;		None
  1116 ;; Return value:  Size  Location     Type
  1117 ;;		None               void
  1118 ;; Registers used:
  1119 ;;		None
  1120 ;; Tracked objects:
  1121 ;;		On entry : 0/0
  1122 ;;		On exit  : 0/0
  1123 ;;		Unchanged: 0/0
  1124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1125 ;;      Params:         0       0       0       0       0
  1126 ;;      Locals:         0       0       0       0       0
  1127 ;;      Temps:          4       0       0       0       0
  1128 ;;      Totals:         4       0       0       0       0
  1129 ;;Total ram usage:        4 bytes
  1130 ;; Hardware stack levels used:    1
  1131 ;; This function calls:
  1132 ;;		Nothing
  1133 ;; This function is called by:
  1134 ;;		Interrupt level 1
  1135 ;; This function uses a non-reentrant model
  1136 ;;
  1137                           
  1138                           
  1139                           ;psect for function _ISR
  1140  01B1                     _ISR:	
  1141                           
  1142                           ;blink_delay.c: 9: GIE = 0;
  1143  01B1  138B               	bcf	11,7	;volatile
  1144                           
  1145                           ;blink_delay.c: 11: if(INTF) {
  1146  01B2  1C8B               	btfss	11,1	;volatile
  1147  01B3  29B8               	goto	i1l37
  1148                           
  1149                           ;blink_delay.c: 12: INTF = 0;
  1150  01B4  108B               	bcf	11,1	;volatile
  1151                           
  1152                           ;blink_delay.c: 13: btn_flag = 1;
  1153  01B5  01AC               	clrf	_btn_flag
  1154  01B6  0AAC               	incf	_btn_flag,f
  1155                           
  1156                           ;blink_delay.c: 14: }
  1157  01B7  29BD               	goto	i1l38
  1158  01B8                     i1l37:	
  1159                           
  1160                           ;blink_delay.c: 15: else if(TMR0IF) {
  1161  01B8  1D0B               	btfss	11,2	;volatile
  1162  01B9  29BD               	goto	i1l38
  1163                           
  1164                           ;blink_delay.c: 16: TMR0IF = 0;
  1165  01BA  110B               	bcf	11,2	;volatile
  1166                           
  1167                           ;blink_delay.c: 17: count_flag = 1;
  1168  01BB  01F9               	clrf	_count_flag
  1169  01BC  0AF9               	incf	_count_flag,f
  1170  01BD                     i1l38:	
  1171                           
  1172                           ;blink_delay.c: 18: }
  1173                           ;blink_delay.c: 19: GIE = 1;
  1174  01BD  178B               	bsf	11,7	;volatile
  1175  01BE  0873               	movf	??_ISR+3,w
  1176  01BF  00FF               	movwf	127
  1177  01C0  0872               	movf	??_ISR+2,w
  1178  01C1  008A               	movwf	10
  1179  01C2  0871               	movf	??_ISR+1,w
  1180  01C3  0084               	movwf	4
  1181  01C4  0E70               	swapf	??_ISR^(0+-128),w
  1182  01C5  0083               	movwf	3
  1183  01C6  0EFE               	swapf	126,f
  1184  01C7  0E7E               	swapf	126,w
  1185  01C8  0009               	retfie
  1186  01C9                     __end_of_ISR:	
  1187  007E                     btemp	set	126	;btemp
  1188  007E                     wtemp	set	126
  1189  007E                     wtemp0	set	126
  1190  0080                     wtemp1	set	128
  1191  0082                     wtemp2	set	130
  1192  0084                     wtemp3	set	132
  1193  0086                     wtemp4	set	134
  1194  0088                     wtemp5	set	136
  1195  007F                     wtemp6	set	127
  1196  007E                     ttemp	set	126
  1197  007E                     ttemp0	set	126
  1198  0081                     ttemp1	set	129
  1199  0084                     ttemp2	set	132
  1200  0087                     ttemp3	set	135
  1201  007F                     ttemp4	set	127
  1202  007E                     ltemp	set	126
  1203  007E                     ltemp0	set	126
  1204  0082                     ltemp1	set	130
  1205  0086                     ltemp2	set	134
  1206  0080                     ltemp3	set	128
  1207                           
  1208                           	psect	intentry
  1209  0004                     __pintentry:	
  1210                           ;incstack = 0
  1211                           ; Regs used in _ISR: []
  1212                           
  1213  0004                     interrupt_function:	
  1214  007E                     saved_w	set	btemp
  1215  0004  00FE               	movwf	btemp
  1216  0005  0E03               	swapf	3,w
  1217  0006  00F0               	movwf	??_ISR
  1218  0007  0804               	movf	4,w
  1219  0008  00F1               	movwf	??_ISR+1
  1220  0009  080A               	movf	10,w
  1221  000A  00F2               	movwf	??_ISR+2
  1222  000B  1283               	bcf	3,5	;RP0=0, select bank0
  1223  000C  1303               	bcf	3,6	;RP1=0, select bank0
  1224  000D  087F               	movf	btemp+1,w
  1225  000E  00F3               	movwf	??_ISR+3
  1226  000F  120A  118A  29B1   	ljmp	_ISR


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         3
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      10
    BANK0            80     12      14
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_delay
    _initLCD->_instCtrl
    _instCtrl->_delay_lcd
    _dataCtrl->_delay_lcd

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _initLCD->_delay_lcd
    _instCtrl->_delay_lcd
    _dataCtrl->_delay_lcd

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0    2326
                                              4 BANK0      8     8      0
                           _dataCtrl
                              _delay
                            _initLCD
                           _instCtrl
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              0     0      0     755
                          _delay_lcd
                           _instCtrl
 ---------------------------------------------------------------------------------
 (1) _instCtrl                                             1     1      0     393
                                              6 COMMON     1     1      0
                          _delay_lcd
 ---------------------------------------------------------------------------------
 (1) _delay                                                5     3      2     152
                                              4 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _dataCtrl                                             1     1      0     393
                                              6 COMMON     1     1      0
                          _delay_lcd
 ---------------------------------------------------------------------------------
 (2) _delay_lcd                                            6     4      2     362
                                              4 COMMON     2     0      2
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                  4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _dataCtrl
     _delay_lcd
   _delay
   _initLCD
     _delay_lcd
     _instCtrl
       _delay_lcd
   _instCtrl
     _delay_lcd

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      9       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      18       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      C       E       5       17.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      18      12        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Sun Mar 09 20:05:14 2025

                    l913 0162                      l909 0158                      l767 019A  
                    l981 005B                      l991 0068                      l983 005D  
                    l993 006A                      l985 0062                      l977 004F  
                    l995 006C                      l987 0064                      _GIE 005F  
                    l997 006E                      l989 0066                      l999 0070  
                    _RB4 0034                      _RB5 0035                      _RB6 0036  
                    u235 01A4                      _ISR 01B1                      u375 016D  
                    _key 002D                      fsr0 0004                     ?_ISR 0070  
                   l1001 0072                     l1003 0074                     l1011 00A0  
                   l1007 0079                     l1025 00C0                     l1009 009F  
                   l1051 0118                     l1019 00B0                     l1053 0120  
                   l1045 0108                     l1037 00F3                     _INTE 005C  
                   _INTF 0059                     i1l37 01B8                     i1l38 01BD  
                   _main 001C                     btemp 007E                     ltemp 007E  
                   start 0012                     ttemp 007E                     wtemp 007E  
                  ??_ISR 0070                    ?_main 0070                    _PORTC 0007  
                  _PORTD 0008                    _TRISB 0086                    _TRISC 0087  
                  _TRISD 0088          __end_of_initLCD 0198                    _delay 0198  
                  pclath 000A                    ltemp0 007E                    ltemp1 0082  
                  ltemp2 0086                    ltemp3 0080                    ttemp0 007E  
                  ttemp1 0081                    ttemp2 0084                    ttemp3 0087  
                  ttemp4 007F                    status 0003                    wtemp0 007E  
                  wtemp1 0080                    wtemp2 0082                    wtemp3 0084  
                  wtemp4 0086                    wtemp5 0088                    wtemp6 007F  
        __initialization 0015             __end_of_main 014C                   ??_main 0024  
                 ?_delay 0074                   _TMR0IE 005D                   _TMR0IF 005A  
       __end_of_dataCtrl 01EF         __end_of_instCtrl 01DC                ??_initLCD 0077  
                 saved_w 007E  __end_of__initialization 0018           __pcstackCOMMON 0070  
          __end_of_delay 01B1       __size_of_delay_lcd 002C                  ??_delay 0076  
             __pbssBANK0 002C               __pmaintext 001C               __pintentry 0004  
              ?_dataCtrl 0070        __end_of_delay_lcd 0178                ?_instCtrl 0070  
             _count_flag 0079                  __ptext0 0000                  __ptext1 0178  
                __ptext2 01C9                  __ptext3 0198                  __ptext4 01DC  
                __ptext5 014C                  __ptext6 01B1                  _initLCD 0178  
           __size_of_ISR 0018               delay@flags 0077               ??_dataCtrl 0076  
                main@LSB 002A                  main@MSB 0028               delay_lcd@i 0020  
             delay_lcd@j 0022     end_of_initialization 0018               ??_instCtrl 0076  
           instCtrl@INST 0076      start_initialization 0015              __end_of_ISR 01C9  
           dataCtrl@DATA 0076              __pbssCOMMON 0079                ___latbits 0002  
          __pcstackBANK0 0020        __size_of_dataCtrl 0013                _delay_lcd 014C  
      __size_of_instCtrl 0013                 ?_initLCD 0070           __size_of_delay 0019  
      interrupt_function 0004               ?_delay_lcd 0074                main@speed 0026  
           delay_lcd@cnt 0074                 _dataCtrl 01DC         __size_of_initLCD 0020  
               _btn_flag 002C            __size_of_main 0130                 _instCtrl 01C9  
               delay@num 0074              ??_delay_lcd 0076                 main@mode 0025  
               intlevel1 0000               _OPTION_REG 0081  
